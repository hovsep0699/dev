{"ast":null,"code":"import _construct from\"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/construct\";import _classCallCheck from\"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _applyDecoratedDescriptor from\"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";var _class,_class2,_temp;import autobind from\"autobind-decorator\";export var ServiceLocator=(_class=(_temp=_class2=/*#__PURE__*/function(){function ServiceLocator(){_classCallCheck(this,ServiceLocator);this.services=new Map();}_createClass(ServiceLocator,[{key:\"registerSingleton\",value:function registerSingleton(key){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}var keyString=key.name;console.log(\"registerSingleton\",keyString);if(!this.services.has(keyString)){var instance=_construct(key,args);this.services.set(keyString,{instance:instance});}}},{key:\"register\",value:function register(key,factory){var keyString=key.name;this.services.set(keyString,{factory:factory,instance:undefined});}},{key:\"get\",value:function get(key){for(var _len2=arguments.length,args=new Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++){args[_key2-1]=arguments[_key2];}var keyString=key.name;var service=this.services.get(keyString);if(!service){throw new Error(\"Service not found for key: \".concat(keyString));}if(service.instance){return service.instance;}if(service.factory){var instance=service.factory.apply(service,args);service.instance=instance;// Store instance for future calls\nreturn instance;}throw new Error(\"No instance or factory found for key: \".concat(keyString));}}],[{key:\"getInstance\",value:function getInstance(){if(!ServiceLocator.instance){ServiceLocator.instance=new ServiceLocator();}return ServiceLocator.instance;}}]);return ServiceLocator;}(),_class2.instance=void 0,_temp),(_applyDecoratedDescriptor(_class,\"getInstance\",[autobind],Object.getOwnPropertyDescriptor(_class,\"getInstance\"),_class),_applyDecoratedDescriptor(_class.prototype,\"registerSingleton\",[autobind],Object.getOwnPropertyDescriptor(_class.prototype,\"registerSingleton\"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,\"register\",[autobind],Object.getOwnPropertyDescriptor(_class.prototype,\"register\"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,\"get\",[autobind],Object.getOwnPropertyDescriptor(_class.prototype,\"get\"),_class.prototype)),_class);","map":{"version":3,"sources":["C:/Users/Hovsep/Desktop/local/diflow_react/packages/app/src/pages/POA/MCHD_ROOT/di/ServiceLocator.tsx"],"names":["autobind","ServiceLocator","services","Map","key","args","keyString","name","console","log","has","instance","set","factory","undefined","service","get","Error"],"mappings":"itBAAA,MAAOA,CAAAA,QAAP,KAAqB,oBAArB,CAIA,UAAaC,CAAAA,cAAb,gDAGI,yBAAsB,2CAUdC,QAVc,CAU2E,GAAIC,CAAAA,GAAJ,EAV3E,CAAE,CAH5B,uFAgByBC,GAhBzB,CAgB+E,+BAAnBC,IAAmB,qDAAnBA,IAAmB,0BACvE,GAAMC,CAAAA,SAAS,CAAGF,GAAG,CAACG,IAAtB,CACAC,OAAO,CAACC,GAAR,CAAY,mBAAZ,CAAiCH,SAAjC,EACA,GAAI,CAAC,KAAKJ,QAAL,CAAcQ,GAAd,CAAkBJ,SAAlB,CAAL,CAAmC,CAC/B,GAAMK,CAAAA,QAAQ,YAAOP,GAAP,CAAcC,IAAd,CAAd,CACA,KAAKH,QAAL,CAAcU,GAAd,CAAkBN,SAAlB,CAA6B,CAAEK,QAAQ,CAARA,QAAF,CAA7B,EACH,CACJ,CAvBL,0CA0BgBP,GA1BhB,CA0BgDS,OA1BhD,CA0BkF,CAC1E,GAAMP,CAAAA,SAAS,CAAGF,GAAG,CAACG,IAAtB,CACA,KAAKL,QAAL,CAAcU,GAAd,CAAkBN,SAAlB,CAA6B,CAAEO,OAAO,CAAPA,OAAF,CAAWF,QAAQ,CAAEG,SAArB,CAA7B,EACH,CA7BL,gCAgCWV,GAhCX,CAgC8D,gCAAhBC,IAAgB,2DAAhBA,IAAgB,4BACtD,GAAMC,CAAAA,SAAS,CAAGF,GAAG,CAACG,IAAtB,CACA,GAAMQ,CAAAA,OAAO,CAAG,KAAKb,QAAL,CAAcc,GAAd,CAAkBV,SAAlB,CAAhB,CACA,GAAI,CAACS,OAAL,CAAc,CACV,KAAM,IAAIE,CAAAA,KAAJ,sCAAwCX,SAAxC,EAAN,CACH,CACD,GAAIS,OAAO,CAACJ,QAAZ,CAAsB,CAClB,MAAOI,CAAAA,OAAO,CAACJ,QAAf,CACH,CACD,GAAII,OAAO,CAACF,OAAZ,CAAqB,CACjB,GAAMF,CAAAA,QAAQ,CAAGI,OAAO,CAACF,OAAR,OAAAE,OAAO,CAAYV,IAAZ,CAAxB,CACAU,OAAO,CAACJ,QAAR,CAAmBA,QAAnB,CAA6B;AAC7B,MAAOA,CAAAA,QAAP,CACH,CACD,KAAM,IAAIM,CAAAA,KAAJ,iDAAmDX,SAAnD,EAAN,CACH,CA/CL,mDAMgD,CACxC,GAAI,CAACL,cAAc,CAACU,QAApB,CAA8B,CAC1BV,cAAc,CAACU,QAAf,CAA0B,GAAIV,CAAAA,cAAJ,EAA1B,CACH,CACD,MAAOA,CAAAA,cAAc,CAACU,QAAtB,CACH,CAXL,sCACmBA,QADnB,gEAKKX,QALL,gIAeKA,QAfL,iJAyBKA,QAzBL,mIA+BKA,QA/BL","sourcesContent":["import autobind from \"autobind-decorator\";\r\n\r\ntype ServiceFactory<T> = (...args: any[]) => T;\r\n\r\nexport class ServiceLocator {\r\n    private static instance: ServiceLocator;\r\n\r\n    private constructor() {}\r\n\r\n    @autobind\r\n    public static getInstance(): ServiceLocator {\r\n        if (!ServiceLocator.instance) {\r\n            ServiceLocator.instance = new ServiceLocator();\r\n        }\r\n        return ServiceLocator.instance;\r\n    }\r\n\r\n    private services: Map<string, { instance?: any; factory?: ServiceFactory<any>; args?: any[] }> = new Map();\r\n\r\n    @autobind\r\n    registerSingleton<T>(key: new (...args: any[]) => T, ...args: any[]): void {\r\n        const keyString = key.name;\r\n        console.log(\"registerSingleton\", keyString);\r\n        if (!this.services.has(keyString)) {\r\n            const instance = new key(...args);\r\n            this.services.set(keyString, { instance });\r\n        }\r\n    }\r\n\r\n    @autobind\r\n    register<T>(key: new (...args: any[]) => T, factory: ServiceFactory<T>): void {\r\n        const keyString = key.name;\r\n        this.services.set(keyString, { factory, instance: undefined });\r\n    }\r\n\r\n    @autobind\r\n    get<T>(key: new (...args: any[]) => T, ...args: any[]): T {\r\n        const keyString = key.name;\r\n        const service = this.services.get(keyString);\r\n        if (!service) {\r\n            throw new Error(`Service not found for key: ${keyString}`);\r\n        }\r\n        if (service.instance) {\r\n            return service.instance;\r\n        }\r\n        if (service.factory) {\r\n            const instance = service.factory(...args);\r\n            service.instance = instance; // Store instance for future calls\r\n            return instance;\r\n        }\r\n        throw new Error(`No instance or factory found for key: ${keyString}`);\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}