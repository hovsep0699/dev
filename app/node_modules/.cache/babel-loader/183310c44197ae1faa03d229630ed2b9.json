{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport Widgets from '../widgets';\nimport { getOptions, optionsList } from '../utils';\nexport var SchemaBoolean = function SchemaBoolean(props) {\n  var name = props.name,\n      schema = props.schema,\n      uiSchema = props.uiSchema,\n      onChange = props.onChange;\n  var title = schema.title;\n\n  var _a = getOptions(uiSchema),\n      _a$widget = _a.widget,\n      widget = _a$widget === void 0 ? 'checkbox' : _a$widget,\n      options = __rest(_a, [\"widget\"]);\n\n  if (!Widgets.hasOwnProperty(widget)) {\n    throw new Error(\"widget list does not contain \".concat(widget));\n  } // @ts-ignore\n\n\n  var Widget = Widgets[widget];\n  var enumOptions = optionsList({\n    enum: schema.enum || [true, false],\n    enumNames: schema.enumNames || ['Да', 'Нет']\n  });\n  return React.createElement(Widget, {\n    name: name,\n    label: title || name,\n    schema: schema,\n    options: Object.assign(Object.assign({}, options), {\n      enumOptions: enumOptions\n    }),\n    onChange: onChange\n  });\n};","map":{"version":3,"sources":["../../../src/FormSchema/schema/schema.boolean.tsx"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,OAAO,KAAP,MAAkB,OAAlB;AAEA,OAAO,OAAP,MAAoB,YAApB;AACA,SAAS,UAAT,EAAqB,WAArB,QAAwC,UAAxC;AAEA,OAAO,IAAM,aAAa,GAAkB,SAA/B,aAA+B,CAAA,KAAK,EAAG;AAAA,MAC1C,IAD0C,GACL,KADK,CAC1C,IAD0C;AAAA,MACpC,MADoC,GACL,KADK,CACpC,MADoC;AAAA,MAC5B,QAD4B,GACL,KADK,CAC5B,QAD4B;AAAA,MAClB,QADkB,GACL,KADK,CAClB,QADkB;AAAA,MAE1C,KAF0C,GAEhC,MAFgC,CAE1C,KAF0C;;AAG5C,MAAA,EAAA,GAAsC,UAAU,CAAhD,QAAgD,CAAhD;AAAA,kBAAqB,EAArB,CAAE,MAAF;AAAA,MAAE,MAAF,0BAAW,UAAX;AAAA,MAA0B,OAA1B,GAAiC,MAAA,CAAA,EAAA,EAAjC,CAAA,QAAA,CAAiC,CAAjC;;AAEN,MAAI,CAAC,OAAO,CAAC,cAAR,CAAuB,MAAvB,CAAL,EAAqC;AACnC,UAAM,IAAI,KAAJ,wCAA0C,MAA1C,EAAN;AACD,GAPiD,CASlD;;;AACA,MAAM,MAAM,GAAG,OAAO,CAAC,MAAD,CAAtB;AACA,MAAM,WAAW,GAAG,WAAW,CAAC;AAC9B,IAAA,IAAI,EAAE,MAAM,CAAC,IAAP,IAAe,CAAC,IAAD,EAAO,KAAP,CADS;AAE9B,IAAA,SAAS,EAAE,MAAM,CAAC,SAAP,IAAoB,CAAC,IAAD,EAAO,KAAP;AAFD,GAAD,CAA/B;AAKA,SACE,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO;AACL,IAAA,IAAI,EAAE,IADD;AAEL,IAAA,KAAK,EAAE,KAAK,IAAI,IAFX;AAGL,IAAA,MAAM,EAAE,MAHH;AAIL,IAAA,OAAO,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAO,OAAP,CAAA,EAAc;AAAE,MAAA,WAAW,EAAX;AAAF,KAAd,CAJF;AAKL,IAAA,QAAQ,EAAE;AALL,GAAP,CADF;AASD,CAzBM","sourceRoot":"","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\nimport React from 'react';\r\nimport Widgets from '../widgets';\r\nimport { getOptions, optionsList } from '../utils';\r\nexport const SchemaBoolean = props => {\r\n    const { name, schema, uiSchema, onChange } = props;\r\n    const { title } = schema;\r\n    const _a = getOptions(uiSchema), { widget = 'checkbox' } = _a, options = __rest(_a, [\"widget\"]);\r\n    if (!Widgets.hasOwnProperty(widget)) {\r\n        throw new Error(`widget list does not contain ${widget}`);\r\n    }\r\n    // @ts-ignore\r\n    const Widget = Widgets[widget];\r\n    const enumOptions = optionsList({\r\n        enum: schema.enum || [true, false],\r\n        enumNames: schema.enumNames || ['Да', 'Нет']\r\n    });\r\n    return (React.createElement(Widget, { name: name, label: title || name, schema: schema, options: Object.assign(Object.assign({}, options), { enumOptions }), onChange: onChange }));\r\n};\r\n//# sourceMappingURL=schema.boolean.js.map"]},"metadata":{},"sourceType":"module"}