{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/*\r\n   <СвСчФакт НомерСчФ=\"1НОМЕР ДОКУМЕНТА\">\r\n   НомерСчФ А текст(1-1000)\r\n   Для Функция=ДОП может принимать значение б/н(без номер)\r\n*/\nvar Num = /*#__PURE__*/function () {\n  _createClass(Num, null, [{\n    key: \"validate\",\n    value: function validate(value) {\n      return value && Num.REG_EXP.test(value) ? undefined : 'Введите строку длиной 1–1000 знаков';\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid(value) {\n      return !Num.validate(value);\n    }\n  }, {\n    key: \"mask\",\n    value: function mask(value) {\n      return value && value.slice(0, 1000);\n    }\n  }, {\n    key: \"REG_EXP\",\n    get: function get() {\n      return new RegExp('^.{1,1000}$');\n    }\n  }, {\n    key: \"placeholder\",\n    get: function get() {\n      return 'Введите номер';\n    }\n  }, {\n    key: \"hint\",\n    get: function get() {\n      return 'Введите строку длиной 1–1000 знаков';\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'Номер';\n    }\n  }, {\n    key: \"field\",\n    get: function get() {\n      return 'number';\n    }\n  }]);\n\n  function Num() {\n    var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n    _classCallCheck(this, Num);\n\n    if (!Num.isValid(\"\".concat(num))) {\n      this._error = new Error('Невозможно создать НомерСчФ. Формат не верен.');\n    } else {\n      this._error = null;\n    }\n\n    this._value = \"\".concat(num);\n  }\n\n  _createClass(Num, [{\n    key: \"clone\",\n    value: function clone() {\n      return new Num(this.value);\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n  }, {\n    key: \"error\",\n    get: function get() {\n      return this._error;\n    }\n  }]);\n\n  return Num;\n}();\n\nexport default Num;","map":{"version":3,"sources":["../../../../../../src/domain/documents/upd/vo/invoice/Num.js"],"names":[],"mappings":";;;AAAA;;;;;IAKM,G;;;6BAKY,K,EAAK;AACnB,aAAO,KAAK,IAAI,GAAG,CAAC,OAAJ,CAAY,IAAZ,CAAiB,KAAjB,CAAT,GAAmC,SAAnC,GAA+C,qCAAtD;AACD;;;4BAEc,K,EAAK;AAClB,aAAO,CAAC,GAAG,CAAC,QAAJ,CAAa,KAAb,CAAR;AACD;;;yBAEW,K,EAAK;AACf,aAAO,KAAK,IAAI,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAe,IAAf,CAAhB;AACD;;;wBAdiB;AAChB,aAAO,IAAI,MAAJ,CAAW,aAAX,CAAP;AACD;;;wBAcqB;AACpB,aAAO,eAAP;AACD;;;wBAEc;AACb,aAAO,qCAAP;AACD;;;wBAEc;AACb,aAAO,OAAP;AACD;;;wBAEe;AACd,aAAO,QAAP;AACD;;;AAED,iBAAoB;AAAA,QAAR,GAAQ,uEAAF,EAAE;;AAAA;;AAClB,QAAI,CAAC,GAAG,CAAC,OAAJ,WAAe,GAAf,EAAL,EAA4B;AAC1B,WAAK,MAAL,GAAc,IAAI,KAAJ,CAAU,+CAAV,CAAd;AACD,KAFD,MAEO;AACL,WAAK,MAAL,GAAc,IAAd;AACD;;AACD,SAAK,MAAL,aAAiB,GAAjB;AACD;;;;4BAEI;AACH,aAAO,IAAI,GAAJ,CAAQ,KAAK,KAAb,CAAP;AACD;;;wBAEQ;AACP,aAAO,KAAK,MAAZ;AACD;;;wBAEQ;AACP,aAAO,KAAK,MAAZ;AACD;;;;;;AAGH,eAAe,GAAf","sourceRoot":"","sourcesContent":["/*\r\n   <СвСчФакт НомерСчФ=\"1НОМЕР ДОКУМЕНТА\">\r\n   НомерСчФ А текст(1-1000)\r\n   Для Функция=ДОП может принимать значение б/н(без номер)\r\n*/\r\nclass Num {\r\n    static get REG_EXP() {\r\n        return new RegExp('^.{1,1000}$');\r\n    }\r\n    static validate(value) {\r\n        return value && Num.REG_EXP.test(value) ? undefined : 'Введите строку длиной 1–1000 знаков';\r\n    }\r\n    static isValid(value) {\r\n        return !Num.validate(value);\r\n    }\r\n    static mask(value) {\r\n        return value && value.slice(0, 1000);\r\n    }\r\n    static get placeholder() {\r\n        return 'Введите номер';\r\n    }\r\n    static get hint() {\r\n        return 'Введите строку длиной 1–1000 знаков';\r\n    }\r\n    static get name() {\r\n        return 'Номер';\r\n    }\r\n    static get field() {\r\n        return 'number';\r\n    }\r\n    constructor(num = '') {\r\n        if (!Num.isValid(`${num}`)) {\r\n            this._error = new Error('Невозможно создать НомерСчФ. Формат не верен.');\r\n        }\r\n        else {\r\n            this._error = null;\r\n        }\r\n        this._value = `${num}`;\r\n    }\r\n    clone() {\r\n        return new Num(this.value);\r\n    }\r\n    get value() {\r\n        return this._value;\r\n    }\r\n    get error() {\r\n        return this._error;\r\n    }\r\n}\r\nexport default Num;\r\n//# sourceMappingURL=Num.js.map"]},"metadata":{},"sourceType":"module"}