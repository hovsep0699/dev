{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React, { useMemo, useState } from 'react';\nimport get from 'lodash.get';\nimport set from 'lodash.set';\nimport { HTMLArray, HTMLButton, HTMLArrayItem, HTMLArrayItemCall } from '../styled/schema.array.styled';\nimport { Context } from '../context';\nimport { getSchemaComponent } from './schema';\nimport { resolveSchema } from '../utils';\nexport var SchemaArray = function SchemaArray(props) {\n  var _props$formData = props.formData,\n      formData = _props$formData === void 0 ? [] : _props$formData,\n      schemaPath = props.schemaPath,\n      schema = props.schema,\n      uiSchema = props.uiSchema,\n      schemaName = props.schemaName,\n      errorSchema = props.errorSchema;\n\n  var _useState = useState(formData.length || 1),\n      _useState2 = _slicedToArray(_useState, 2),\n      count = _useState2[0],\n      setCount = _useState2[1];\n\n  var _React$useContext = React.useContext(Context),\n      onChange = _React$useContext.onChange,\n      rootFormData = _React$useContext.formData,\n      rootSchema = _React$useContext.rootSchema;\n\n  var _uiSchema$directory = uiSchema.directory,\n      directory = _uiSchema$directory === void 0 ? 'row' : _uiSchema$directory,\n      width = uiSchema.width;\n  var arraySchema = resolveSchema(schema.items, rootSchema);\n\n  if (!arraySchema) {\n    throw new Error(\"Could not find Schema.items in \".concat(schemaName));\n  }\n\n  var renderRows = useMemo(function () {\n    var schema = arraySchema.properties;\n    var properties = Object.keys(schema);\n\n    var renderProperties = function renderProperties(index) {\n      return properties.map(function (name) {\n        var key = [].concat(_toConsumableArray(schemaPath), [index, name]).join('.');\n        var currentSchema = schema[name];\n        var currentSchemaPath = [].concat(_toConsumableArray(schemaPath), [index, name]);\n        var currentUiSchema = get(uiSchema, name, {});\n        var currentFormData = get(formData, [index, name]);\n        var currentError = get(errorSchema, [index, name]);\n        var SchemaComponent = getSchemaComponent(currentSchema);\n        return React.createElement(HTMLArrayItemCall, {\n          key: key,\n          directory: directory\n        }, React.createElement(SchemaComponent, {\n          schemaName: name,\n          schema: currentSchema,\n          uiSchema: currentUiSchema,\n          formData: currentFormData,\n          schemaPath: currentSchemaPath,\n          errorSchema: currentError\n        }));\n      });\n    };\n\n    var onClickAppend = function onClickAppend() {\n      return setCount(count + 1);\n    };\n\n    function onClickRemove(index) {\n      if (formData[index]) {\n        delete formData[index];\n\n        var data = _toConsumableArray(formData.filter(Boolean));\n\n        set(rootFormData, _toConsumableArray(schemaPath), data);\n        onChange(Object.assign({}, rootFormData));\n      }\n\n      setCount(count - 1);\n    }\n\n    return Array(count).fill(null).map(function (v, i) {\n      return React.createElement(HTMLArrayItem, {\n        key: i,\n        directory: directory,\n        width: width\n      }, renderProperties(i), i === 0 && React.createElement(HTMLButton, {\n        onClick: onClickAppend\n      }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"), i !== 0 && React.createElement(HTMLButton, {\n        onClick: onClickRemove.bind(null, i)\n      }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\"));\n    });\n  }, [arraySchema.properties, rootFormData, directory, schemaPath, uiSchema, formData, onChange, width, count]);\n  return React.createElement(HTMLArray, null, renderRows);\n};","map":{"version":3,"sources":["../../../src/FormSchema/schema/schema.array.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React, { useMemo, useState } from 'react';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport { HTMLArray, HTMLButton, HTMLArrayItem, HTMLArrayItemCall } from '../styled/schema.array.styled';\r\nimport { Context } from '../context';\r\nimport { getSchemaComponent } from './schema';\r\nimport { resolveSchema } from '../utils';\r\nexport const SchemaArray = props => {\r\n    const { formData = [], schemaPath, schema, uiSchema, schemaName, errorSchema } = props;\r\n    const [count, setCount] = useState(formData.length || 1);\r\n    const { onChange, formData: rootFormData, rootSchema } = React.useContext(Context);\r\n    const { directory = 'row', width } = uiSchema;\r\n    const arraySchema = resolveSchema(schema.items, rootSchema);\r\n    if (!arraySchema) {\r\n        throw new Error(`Could not find Schema.items in ${schemaName}`);\r\n    }\r\n    const renderRows = useMemo(() => {\r\n        const schema = arraySchema.properties;\r\n        const properties = Object.keys(schema);\r\n        const renderProperties = (index) => {\r\n            return properties.map(name => {\r\n                const key = [...schemaPath, index, name].join('.');\r\n                const currentSchema = schema[name];\r\n                const currentSchemaPath = [...schemaPath, index, name];\r\n                const currentUiSchema = get(uiSchema, name, {});\r\n                const currentFormData = get(formData, [index, name]);\r\n                const currentError = get(errorSchema, [index, name]);\r\n                const SchemaComponent = getSchemaComponent(currentSchema);\r\n                return (React.createElement(HTMLArrayItemCall, { key: key, directory: directory },\r\n                    React.createElement(SchemaComponent, { schemaName: name, schema: currentSchema, uiSchema: currentUiSchema, formData: currentFormData, schemaPath: currentSchemaPath, errorSchema: currentError })));\r\n            });\r\n        };\r\n        const onClickAppend = () => setCount(count + 1);\r\n        function onClickRemove(index) {\r\n            if (formData[index]) {\r\n                delete formData[index];\r\n                const data = [...formData.filter(Boolean)];\r\n                set(rootFormData, [...schemaPath], data);\r\n                onChange(Object.assign({}, rootFormData));\r\n            }\r\n            setCount(count - 1);\r\n        }\r\n        return Array(count)\r\n            .fill(null)\r\n            .map((v, i) => (React.createElement(HTMLArrayItem, { key: i, directory: directory, width: width },\r\n            renderProperties(i),\r\n            i === 0 && React.createElement(HTMLButton, { onClick: onClickAppend }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"),\r\n            i !== 0 && React.createElement(HTMLButton, { onClick: onClickRemove.bind(null, i) }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\"))));\r\n    }, [\r\n        arraySchema.properties,\r\n        rootFormData,\r\n        directory,\r\n        schemaPath,\r\n        uiSchema,\r\n        formData,\r\n        onChange,\r\n        width,\r\n        count\r\n    ]);\r\n    return React.createElement(HTMLArray, null, renderRows);\r\n};\r\n//# sourceMappingURL=schema.array.js.map"]},"metadata":{},"sourceType":"module"}