{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport localFlows from './local/localFlows';\nimport connectorFlows from './connector/connectorFlows';\nimport roamingFlows from './roaming/roamingFlows';\nimport internalRoamingFlows from './internalRoaming/internalRoamingFlows';\nimport taxcomhubFlows from './taxcomhub/taxcomhubFlows';\n\nvar FlowsService = function FlowsService() {\n  var _this = this;\n\n  _classCallCheck(this, FlowsService);\n\n  this.getAggregatedNamesMap = function () {\n    var aggregatedMap = new Map();\n\n    _this.flowsList.forEach(function (flow) {\n      if (!flow.aggregatedFlow) return; //check\n\n      if (aggregatedMap.has(flow.aggregatedFlow)) {\n        var flowsToSet = [].concat(_toConsumableArray(aggregatedMap.get(flow.aggregatedFlow)), [flow]);\n        aggregatedMap.set(flow.aggregatedFlow.name, flowsToSet);\n      } else {\n        aggregatedMap.set(flow.aggregatedFlow.name, [flow]);\n      }\n    });\n\n    return aggregatedMap;\n  };\n\n  this.getFlowNamesMap = function () {\n    var flowNamesMap = new Map();\n\n    _this.flowsList.forEach(function (flow) {\n      flowNamesMap.set(flow.name, flow);\n    });\n\n    return flowNamesMap;\n  };\n\n  this.getFlowsByAggregatedName = function (aggregatedName) {\n    if (_this.aggregatedNamesMap.has(aggregatedName)) return _this.aggregatedNamesMap.get(aggregatedName);\n\n    var flow = _this.getFlowByName(aggregatedName);\n\n    return flow ? [flow] : null;\n  };\n\n  this.getFlowByName = function (flowName) {\n    return _this.flowNamesMap.get(flowName) || null;\n  };\n\n  this.getAggregatedFlowByFlowName = function (flowName) {\n    var flow = _this.getFlowByName(flowName);\n\n    if (flow === null || flow === void 0 ? void 0 : flow.aggregatedFlow) return flow.aggregatedFlow;\n    return null;\n  };\n\n  this.flowsList = [].concat(_toConsumableArray(localFlows), _toConsumableArray(connectorFlows), _toConsumableArray(roamingFlows), _toConsumableArray(internalRoamingFlows), _toConsumableArray(taxcomhubFlows));\n  this.aggregatedNamesMap = this.getAggregatedNamesMap();\n  this.flowNamesMap = this.getFlowNamesMap();\n};\n\nvar instance = new FlowsService();\nexport default instance;","map":{"version":3,"sources":["../../../../../src/application/documents/common/flows/FlowsService.ts"],"names":[],"mappings":";;AACA,OAAO,UAAP,MAAuB,oBAAvB;AAEA,OAAO,cAAP,MAA2B,4BAA3B;AACA,OAAO,YAAP,MAAyB,wBAAzB;AACA,OAAO,oBAAP,MAAiC,wCAAjC;AACA,OAAO,cAAP,MAA2B,4BAA3B;;IAEM,Y,GA0BJ,wBAAA;AAAA;;AAAA;;AArBQ,OAAA,qBAAA,GAAwB,YAAK;AACnC,QAAM,aAAa,GAAG,IAAI,GAAJ,EAAtB;;AACA,IAAA,KAAI,CAAC,SAAL,CAAe,OAAf,CAAuB,UAAA,IAAI,EAAG;AAC5B,UAAI,CAAC,IAAI,CAAC,cAAV,EAA0B,OADE,CACM;;AAElC,UAAI,aAAa,CAAC,GAAd,CAAkB,IAAI,CAAC,cAAvB,CAAJ,EAA4C;AAC1C,YAAM,UAAU,gCAAO,aAAa,CAAC,GAAd,CAAkB,IAAI,CAAC,cAAvB,CAAP,IAA+C,IAA/C,EAAhB;AACA,QAAA,aAAa,CAAC,GAAd,CAAkB,IAAI,CAAC,cAAL,CAAoB,IAAtC,EAA4C,UAA5C;AACD,OAHD,MAGO;AACL,QAAA,aAAa,CAAC,GAAd,CAAkB,IAAI,CAAC,cAAL,CAAoB,IAAtC,EAA4C,CAAC,IAAD,CAA5C;AACD;AACF,KATD;;AAUA,WAAO,aAAP;AACD,GAbO;;AAcA,OAAA,eAAA,GAAkB,YAAK;AAC7B,QAAM,YAAY,GAAG,IAAI,GAAJ,EAArB;;AACA,IAAA,KAAI,CAAC,SAAL,CAAe,OAAf,CAAuB,UAAA,IAAI,EAAG;AAC5B,MAAA,YAAY,CAAC,GAAb,CAAiB,IAAI,CAAC,IAAtB,EAA4B,IAA5B;AACD,KAFD;;AAGA,WAAO,YAAP;AACD,GANO;;AAmBR,OAAA,wBAAA,GAA2B,UAAC,cAAD,EAA2C;AACpE,QAAI,KAAI,CAAC,kBAAL,CAAwB,GAAxB,CAA4B,cAA5B,CAAJ,EACE,OAAO,KAAI,CAAC,kBAAL,CAAwB,GAAxB,CAA4B,cAA5B,CAAP;;AAEF,QAAM,IAAI,GAAG,KAAI,CAAC,aAAL,CAAmB,cAAnB,CAAb;;AACA,WAAO,IAAI,GAAG,CAAC,IAAD,CAAH,GAAY,IAAvB;AACD,GAND;;AAQA,OAAA,aAAA,GAAgB,UAAC,QAAD,EAAmC;AACjD,WAAO,KAAI,CAAC,YAAL,CAAkB,GAAlB,CAAsB,QAAtB,KAAmC,IAA1C;AACD,GAFD;;AAIA,OAAA,2BAAA,GAA8B,UAAC,QAAD,EAA6C;AACzE,QAAM,IAAI,GAAG,KAAI,CAAC,aAAL,CAAmB,QAAnB,CAAb;;AACA,QAAI,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE,cAAV,EAA0B,OAAO,IAAI,CAAC,cAAZ;AAE1B,WAAO,IAAP;AACD,GALD;;AAvBE,OAAK,SAAL,gCACK,UADL,sBAEK,cAFL,sBAGK,YAHL,sBAIK,oBAJL,sBAKK,cALL;AAOA,OAAK,kBAAL,GAA0B,KAAK,qBAAL,EAA1B;AACA,OAAK,YAAL,GAAoB,KAAK,eAAL,EAApB;AACD,C;;AAsBH,IAAM,QAAQ,GAAG,IAAI,YAAJ,EAAjB;AACA,eAAe,QAAf","sourceRoot":"","sourcesContent":["import localFlows from './local/localFlows';\r\nimport connectorFlows from './connector/connectorFlows';\r\nimport roamingFlows from './roaming/roamingFlows';\r\nimport internalRoamingFlows from './internalRoaming/internalRoamingFlows';\r\nimport taxcomhubFlows from './taxcomhub/taxcomhubFlows';\r\nclass FlowsService {\r\n    constructor() {\r\n        this.getAggregatedNamesMap = () => {\r\n            const aggregatedMap = new Map();\r\n            this.flowsList.forEach(flow => {\r\n                if (!flow.aggregatedFlow)\r\n                    return; //check\r\n                if (aggregatedMap.has(flow.aggregatedFlow)) {\r\n                    const flowsToSet = [...aggregatedMap.get(flow.aggregatedFlow), flow];\r\n                    aggregatedMap.set(flow.aggregatedFlow.name, flowsToSet);\r\n                }\r\n                else {\r\n                    aggregatedMap.set(flow.aggregatedFlow.name, [flow]);\r\n                }\r\n            });\r\n            return aggregatedMap;\r\n        };\r\n        this.getFlowNamesMap = () => {\r\n            const flowNamesMap = new Map();\r\n            this.flowsList.forEach(flow => {\r\n                flowNamesMap.set(flow.name, flow);\r\n            });\r\n            return flowNamesMap;\r\n        };\r\n        this.getFlowsByAggregatedName = (aggregatedName) => {\r\n            if (this.aggregatedNamesMap.has(aggregatedName))\r\n                return this.aggregatedNamesMap.get(aggregatedName);\r\n            const flow = this.getFlowByName(aggregatedName);\r\n            return flow ? [flow] : null;\r\n        };\r\n        this.getFlowByName = (flowName) => {\r\n            return this.flowNamesMap.get(flowName) || null;\r\n        };\r\n        this.getAggregatedFlowByFlowName = (flowName) => {\r\n            const flow = this.getFlowByName(flowName);\r\n            if (flow === null || flow === void 0 ? void 0 : flow.aggregatedFlow)\r\n                return flow.aggregatedFlow;\r\n            return null;\r\n        };\r\n        this.flowsList = [\r\n            ...localFlows,\r\n            ...connectorFlows,\r\n            ...roamingFlows,\r\n            ...internalRoamingFlows,\r\n            ...taxcomhubFlows\r\n        ];\r\n        this.aggregatedNamesMap = this.getAggregatedNamesMap();\r\n        this.flowNamesMap = this.getFlowNamesMap();\r\n    }\r\n}\r\nconst instance = new FlowsService();\r\nexport default instance;\r\n//# sourceMappingURL=FlowsService.js.map"]},"metadata":{},"sourceType":"module"}