{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport React, { useMemo } from 'react';\nimport get from 'lodash.get';\nimport { SchemaComponents } from './index';\nimport { retrieveSchema } from '../utils';\nimport { Context } from '../context';\nexport function getSchemaComponent(schema) {\n  var componentName = 'unsupported';\n\n  if (SchemaComponents.hasOwnProperty(schema.type)) {\n    componentName = schema.type;\n  }\n\n  if (schema.anyOf || schema.oneOf || schema.allOf) {\n    return SchemaComponents.multy;\n  }\n\n  if (!SchemaComponents.hasOwnProperty(componentName)) {\n    throw new Error(\"Could not find SchemaComponent \".concat(componentName, \".\"));\n  }\n\n  return SchemaComponents[componentName];\n}\nvar SchemaDefinition = React.memo(function (props) {\n  var name = props.name,\n      schema = props.schema,\n      formData = props.formData,\n      required = props.required,\n      errorSchema = props.errorSchema,\n      _props$schemaPath = props.schemaPath,\n      schemaPath = _props$schemaPath === void 0 ? [] : _props$schemaPath,\n      currentUiSchema = props.uiSchema,\n      className = props.className;\n\n  var _React$useContext = React.useContext(Context),\n      rootSchema = _React$useContext.rootSchema;\n\n  var currentSchema = retrieveSchema(schema, rootSchema);\n  var SchemaComponent = getSchemaComponent(currentSchema);\n  var currentSchemaPath = useMemo(function () {\n    return [].concat(_toConsumableArray(schemaPath), [name]).filter(Boolean);\n  }, [schemaPath, name]);\n  var currentErrors;\n  var currentFormData;\n\n  if (!name) {\n    currentErrors = errorSchema;\n    currentFormData = formData;\n  } else {\n    currentErrors = get(errorSchema, name);\n    currentFormData = get(formData, name);\n  }\n\n  return React.createElement(SchemaComponent, {\n    schemaName: name,\n    className: className,\n    schema: currentSchema,\n    required: Boolean(required),\n    errorSchema: currentErrors,\n    uiSchema: currentUiSchema,\n    formData: currentFormData,\n    schemaPath: currentSchemaPath\n  });\n});\nexport { SchemaDefinition };","map":{"version":3,"sources":["../../../src/FormSchema/schema/schema.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAP,IAAgB,OAAhB,QAA+B,OAA/B;AACA,OAAO,GAAP,MAAgB,YAAhB;AAGA,SAAS,gBAAT,QAAiC,SAAjC;AACA,SAAS,cAAT,QAA+B,UAA/B;AACA,SAAS,OAAT,QAAwB,YAAxB;AAEA,OAAM,SAAU,kBAAV,CAA6B,MAA7B,EAA2C;AAC/C,MAAI,aAAa,GAAW,aAA5B;;AACA,MAAI,gBAAgB,CAAC,cAAjB,CAAgC,MAAM,CAAC,IAAvC,CAAJ,EAAkD;AAChD,IAAA,aAAa,GAAG,MAAM,CAAC,IAAvB;AACD;;AAED,MAAI,MAAM,CAAC,KAAP,IAAgB,MAAM,CAAC,KAAvB,IAAgC,MAAM,CAAC,KAA3C,EAAkD;AAChD,WAAO,gBAAgB,CAAC,KAAxB;AACD;;AAED,MAAI,CAAC,gBAAgB,CAAC,cAAjB,CAAgC,aAAhC,CAAL,EAAqD;AACnD,UAAM,IAAI,KAAJ,0CAA4C,aAA5C,OAAN;AACD;;AAED,SAAO,gBAAgB,CAAC,aAAD,CAAvB;AACD;AAED,IAAM,gBAAgB,GAAmC,KAAK,CAAC,IAAN,CAAW,UAAA,KAAK,EAAG;AAAA,MAExE,IAFwE,GAUtE,KAVsE,CAExE,IAFwE;AAAA,MAGxE,MAHwE,GAUtE,KAVsE,CAGxE,MAHwE;AAAA,MAIxE,QAJwE,GAUtE,KAVsE,CAIxE,QAJwE;AAAA,MAKxE,QALwE,GAUtE,KAVsE,CAKxE,QALwE;AAAA,MAMxE,WANwE,GAUtE,KAVsE,CAMxE,WANwE;AAAA,0BAUtE,KAVsE,CAOxE,UAPwE;AAAA,MAOxE,UAPwE,kCAO3D,EAP2D;AAAA,MAQ9D,eAR8D,GAUtE,KAVsE,CAQxE,QARwE;AAAA,MASxE,SATwE,GAUtE,KAVsE,CASxE,SATwE;;AAAA,0BAWnD,KAAK,CAAC,UAAN,CAAiB,OAAjB,CAXmD;AAAA,MAWlE,UAXkE,qBAWlE,UAXkE;;AAa1E,MAAM,aAAa,GAAG,cAAc,CAAC,MAAD,EAAS,UAAT,CAApC;AACA,MAAM,eAAe,GAAG,kBAAkB,CAAC,aAAD,CAA1C;AACA,MAAM,iBAAiB,GAAG,OAAO,CAAC;AAAA,WAAM,6BAAI,UAAJ,IAAgB,IAAhB,GAAsB,MAAtB,CAA6B,OAA7B,CAAN;AAAA,GAAD,EAA8C,CAC7E,UAD6E,EAE7E,IAF6E,CAA9C,CAAjC;AAKA,MAAI,aAAJ;AACA,MAAI,eAAJ;;AACA,MAAI,CAAC,IAAL,EAAW;AACT,IAAA,aAAa,GAAG,WAAhB;AACA,IAAA,eAAe,GAAG,QAAlB;AACD,GAHD,MAGO;AACL,IAAA,aAAa,GAAG,GAAG,CAAC,WAAD,EAAc,IAAd,CAAnB;AACA,IAAA,eAAe,GAAG,GAAG,CAAC,QAAD,EAAW,IAAX,CAArB;AACD;;AAED,SACE,KAAA,CAAA,aAAA,CAAC,eAAD,EAAgB;AACd,IAAA,UAAU,EAAE,IADE;AAEd,IAAA,SAAS,EAAE,SAFG;AAGd,IAAA,MAAM,EAAE,aAHM;AAId,IAAA,QAAQ,EAAE,OAAO,CAAC,QAAD,CAJH;AAKd,IAAA,WAAW,EAAE,aALC;AAMd,IAAA,QAAQ,EAAE,eANI;AAOd,IAAA,QAAQ,EAAE,eAPI;AAQd,IAAA,UAAU,EAAE;AARE,GAAhB,CADF;AAYD,CA1CwD,CAAzD;AA4CA,SAAS,gBAAT","sourceRoot":"","sourcesContent":["import React, { useMemo } from 'react';\r\nimport get from 'lodash.get';\r\nimport { SchemaComponents } from './index';\r\nimport { retrieveSchema } from '../utils';\r\nimport { Context } from '../context';\r\nexport function getSchemaComponent(schema) {\r\n    let componentName = 'unsupported';\r\n    if (SchemaComponents.hasOwnProperty(schema.type)) {\r\n        componentName = schema.type;\r\n    }\r\n    if (schema.anyOf || schema.oneOf || schema.allOf) {\r\n        return SchemaComponents.multy;\r\n    }\r\n    if (!SchemaComponents.hasOwnProperty(componentName)) {\r\n        throw new Error(`Could not find SchemaComponent ${componentName}.`);\r\n    }\r\n    return SchemaComponents[componentName];\r\n}\r\nconst SchemaDefinition = React.memo(props => {\r\n    const { name, schema, formData, required, errorSchema, schemaPath = [], uiSchema: currentUiSchema, className } = props;\r\n    const { rootSchema } = React.useContext(Context);\r\n    const currentSchema = retrieveSchema(schema, rootSchema);\r\n    const SchemaComponent = getSchemaComponent(currentSchema);\r\n    const currentSchemaPath = useMemo(() => [...schemaPath, name].filter(Boolean), [\r\n        schemaPath,\r\n        name\r\n    ]);\r\n    let currentErrors;\r\n    let currentFormData;\r\n    if (!name) {\r\n        currentErrors = errorSchema;\r\n        currentFormData = formData;\r\n    }\r\n    else {\r\n        currentErrors = get(errorSchema, name);\r\n        currentFormData = get(formData, name);\r\n    }\r\n    return (React.createElement(SchemaComponent, { schemaName: name, className: className, schema: currentSchema, required: Boolean(required), errorSchema: currentErrors, uiSchema: currentUiSchema, formData: currentFormData, schemaPath: currentSchemaPath }));\r\n});\r\nexport { SchemaDefinition };\r\n//# sourceMappingURL=schema.js.map"]},"metadata":{},"sourceType":"module"}