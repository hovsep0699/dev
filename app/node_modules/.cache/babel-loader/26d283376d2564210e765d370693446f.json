{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport ULType from './ULType';\nimport IPType from './IPType';\n\nvar Type = /*#__PURE__*/function () {\n  _createClass(Type, null, [{\n    key: \"validate\",\n    value: function validate(value) {\n      return Type.options.some(function (option) {\n        return option.value === value;\n      }) ? undefined : 'Неверный тип участника';\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid(value) {\n      return !Type.validate(value);\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'Тип';\n    }\n  }, {\n    key: \"field\",\n    get: function get() {\n      return 'type';\n    }\n  }, {\n    key: \"options\",\n    get: function get() {\n      return [ULType, IPType];\n    }\n  }]);\n\n  function Type(value) {\n    _classCallCheck(this, Type);\n\n    if (!Type.isValid(\"\".concat(value))) {\n      this._error = new Error('Невозможно создать тип участника. Формат не верен.');\n    } else {\n      this._error = null;\n    }\n\n    this._value = value;\n    this._title = this.getTitleByValue(value);\n  }\n\n  _createClass(Type, [{\n    key: \"getTitleByValue\",\n    value: function getTitleByValue(value) {\n      var options = _toConsumableArray(Type.options);\n\n      for (var i = 0; i < options.length; i++) {\n        if (options[i].value === value) return options[i].title;\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new Type(this.value);\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n  }, {\n    key: \"title\",\n    get: function get() {\n      return this._title;\n    }\n  }, {\n    key: \"error\",\n    get: function get() {\n      return this._error;\n    }\n  }]);\n\n  return Type;\n}();\n\nexport default Type;","map":{"version":3,"sources":["../../../../../../src/domain/documents/upd/standard_element/participant/Type.js"],"names":[],"mappings":";;;AAAA,OAAO,MAAP,MAAmB,UAAnB;AACA,OAAO,MAAP,MAAmB,UAAnB;;IAEM,I;;;6BAaY,K,EAAK;AACnB,aAAO,IAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,UAAA,MAAM;AAAA,eAAI,MAAM,CAAC,KAAP,KAAiB,KAArB;AAAA,OAAxB,IAAsD,SAAtD,GAAkE,wBAAzE;AACD;;;4BAEc,K,EAAK;AAClB,aAAO,CAAC,IAAI,CAAC,QAAL,CAAc,KAAd,CAAR;AACD;;;wBAlBc;AACb,aAAO,KAAP;AACD;;;wBAEe;AACd,aAAO,MAAP;AACD;;;wBAEiB;AAChB,aAAO,CAAC,MAAD,EAAS,MAAT,CAAP;AACD;;;AAUD,gBAAY,KAAZ,EAAiB;AAAA;;AACf,QAAI,CAAC,IAAI,CAAC,OAAL,WAAgB,KAAhB,EAAL,EAA+B;AAC7B,WAAK,MAAL,GAAc,IAAI,KAAJ,CAAU,oDAAV,CAAd;AACD,KAFD,MAEO;AACL,WAAK,MAAL,GAAc,IAAd;AACD;;AACD,SAAK,MAAL,GAAc,KAAd;AACA,SAAK,MAAL,GAAc,KAAK,eAAL,CAAqB,KAArB,CAAd;AACD;;;;oCAEe,K,EAAK;AACnB,UAAM,OAAO,sBAAO,IAAI,CAAC,OAAZ,CAAb;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAAO,CAAC,MAA5B,EAAoC,CAAC,EAArC,EAAyC;AACvC,YAAI,OAAO,CAAC,CAAD,CAAP,CAAW,KAAX,KAAqB,KAAzB,EAAgC,OAAO,OAAO,CAAC,CAAD,CAAP,CAAW,KAAlB;AACjC;;AACD,aAAO,SAAP;AACD;;;4BAEI;AACH,aAAO,IAAI,IAAJ,CAAS,KAAK,KAAd,CAAP;AACD;;;wBAEQ;AACP,aAAO,KAAK,MAAZ;AACD;;;wBAEQ;AACP,aAAO,KAAK,MAAZ;AACD;;;wBAEQ;AACP,aAAO,KAAK,MAAZ;AACD;;;;;;AAGH,eAAe,IAAf","sourceRoot":"","sourcesContent":["import ULType from './ULType';\r\nimport IPType from './IPType';\r\nclass Type {\r\n    static get name() {\r\n        return 'Тип';\r\n    }\r\n    static get field() {\r\n        return 'type';\r\n    }\r\n    static get options() {\r\n        return [ULType, IPType];\r\n    }\r\n    static validate(value) {\r\n        return Type.options.some(option => option.value === value) ? undefined : 'Неверный тип участника';\r\n    }\r\n    static isValid(value) {\r\n        return !Type.validate(value);\r\n    }\r\n    constructor(value) {\r\n        if (!Type.isValid(`${value}`)) {\r\n            this._error = new Error('Невозможно создать тип участника. Формат не верен.');\r\n        }\r\n        else {\r\n            this._error = null;\r\n        }\r\n        this._value = value;\r\n        this._title = this.getTitleByValue(value);\r\n    }\r\n    getTitleByValue(value) {\r\n        const options = [...Type.options];\r\n        for (let i = 0; i < options.length; i++) {\r\n            if (options[i].value === value)\r\n                return options[i].title;\r\n        }\r\n        return undefined;\r\n    }\r\n    clone() {\r\n        return new Type(this.value);\r\n    }\r\n    get value() {\r\n        return this._value;\r\n    }\r\n    get title() {\r\n        return this._title;\r\n    }\r\n    get error() {\r\n        return this._error;\r\n    }\r\n}\r\nexport default Type;\r\n//# sourceMappingURL=Type.js.map"]},"metadata":{},"sourceType":"module"}