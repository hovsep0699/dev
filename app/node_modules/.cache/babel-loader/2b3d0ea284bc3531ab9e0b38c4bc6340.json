{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport inStates from './IN/states/inStates';\nimport outStates from './OUT/states/outStates';\nimport draftStates from './DRAFT/states/draftStates';\nimport INProcessing from './IN/aggregatedStates/Processing';\nimport OUTProcessing from './OUT/aggregatedStates/Processing';\n\nvar PackageStatesService = function PackageStatesService() {\n  var _this = this;\n\n  _classCallCheck(this, PackageStatesService);\n\n  this.getAggregatedNamesMap = function (type) {\n    var aggregatedMap = new Map();\n\n    _this.statesList[type].forEach(function (state) {\n      if (!state.aggregatedState) return; //check\n\n      if (aggregatedMap.has(state.aggregatedState)) {\n        var statesToSet = [].concat(_toConsumableArray(aggregatedMap.get(state.aggregatedState)), [state]);\n        aggregatedMap.set(state.aggregatedState.name, statesToSet);\n      } else {\n        aggregatedMap.set(state.aggregatedState.name, [state]);\n      }\n    });\n\n    aggregatedMap.set(INProcessing.name, _this.statesList[type]);\n    return aggregatedMap;\n  };\n\n  this.getStateNamesMap = function (type) {\n    var stateNamesMap = new Map();\n\n    _this.statesList[type].forEach(function (state) {\n      stateNamesMap.set(state.name, state);\n    });\n\n    return stateNamesMap;\n  };\n\n  this.isDraftState = function (stateName) {\n    return draftStates.some(function (state) {\n      return state.name === stateName;\n    });\n  };\n\n  this.getStatesByAggregatedName = function (aggregatedName, type) {\n    if (_this.aggregatedNamesMap[type].has(aggregatedName)) return _this.aggregatedNamesMap[type].get(aggregatedName);\n    return _this.statesList[type];\n  };\n\n  this.getStateByName = function (stateName, type) {\n    var state = _this.stateNamesMap[type].get(stateName);\n\n    if (state) return state;\n\n    switch (type) {\n      case 'IN':\n        return INProcessing;\n\n      case 'OUT':\n        return OUTProcessing;\n    }\n  };\n\n  this.getAggregatedStateByStateName = function (stateName, type) {\n    var state = _this.getStateByName(stateName, type);\n\n    if (state === null || state === void 0 ? void 0 : state.aggregatedState) return state.aggregatedState;\n    if (state) return state;\n\n    switch (type) {\n      case 'IN':\n        return INProcessing;\n\n      case 'OUT':\n        return OUTProcessing;\n    }\n  };\n\n  this.statesList = {\n    IN: _toConsumableArray(inStates),\n    OUT: [].concat(_toConsumableArray(outStates), _toConsumableArray(draftStates))\n  };\n  this.aggregatedNamesMap = {\n    IN: this.getAggregatedNamesMap('IN'),\n    OUT: this.getAggregatedNamesMap('OUT')\n  };\n  this.stateNamesMap = {\n    IN: this.getStateNamesMap('IN'),\n    OUT: this.getStateNamesMap('OUT')\n  };\n};\n\nvar instance = new PackageStatesService();\nexport default instance;","map":{"version":3,"sources":["../../../../../src/application/documents/common/packageStates/PackageStatesService.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import inStates from './IN/states/inStates';\r\nimport outStates from './OUT/states/outStates';\r\nimport draftStates from './DRAFT/states/draftStates';\r\nimport INProcessing from './IN/aggregatedStates/Processing';\r\nimport OUTProcessing from './OUT/aggregatedStates/Processing';\r\nclass PackageStatesService {\r\n    constructor() {\r\n        this.getAggregatedNamesMap = (type) => {\r\n            const aggregatedMap = new Map();\r\n            this.statesList[type].forEach(state => {\r\n                if (!state.aggregatedState)\r\n                    return; //check\r\n                if (aggregatedMap.has(state.aggregatedState)) {\r\n                    const statesToSet = [...aggregatedMap.get(state.aggregatedState), state];\r\n                    aggregatedMap.set(state.aggregatedState.name, statesToSet);\r\n                }\r\n                else {\r\n                    aggregatedMap.set(state.aggregatedState.name, [state]);\r\n                }\r\n            });\r\n            aggregatedMap.set(INProcessing.name, this.statesList[type]);\r\n            return aggregatedMap;\r\n        };\r\n        this.getStateNamesMap = (type) => {\r\n            const stateNamesMap = new Map();\r\n            this.statesList[type].forEach(state => {\r\n                stateNamesMap.set(state.name, state);\r\n            });\r\n            return stateNamesMap;\r\n        };\r\n        this.isDraftState = (stateName) => {\r\n            return draftStates.some(state => state.name === stateName);\r\n        };\r\n        this.getStatesByAggregatedName = (aggregatedName, type) => {\r\n            if (this.aggregatedNamesMap[type].has(aggregatedName))\r\n                return this.aggregatedNamesMap[type].get(aggregatedName);\r\n            return this.statesList[type];\r\n        };\r\n        this.getStateByName = (stateName, type) => {\r\n            const state = this.stateNamesMap[type].get(stateName);\r\n            if (state)\r\n                return state;\r\n            switch (type) {\r\n                case 'IN':\r\n                    return INProcessing;\r\n                case 'OUT':\r\n                    return OUTProcessing;\r\n            }\r\n        };\r\n        this.getAggregatedStateByStateName = (stateName, type) => {\r\n            const state = this.getStateByName(stateName, type);\r\n            if (state === null || state === void 0 ? void 0 : state.aggregatedState)\r\n                return state.aggregatedState;\r\n            if (state)\r\n                return state;\r\n            switch (type) {\r\n                case 'IN':\r\n                    return INProcessing;\r\n                case 'OUT':\r\n                    return OUTProcessing;\r\n            }\r\n        };\r\n        this.statesList = {\r\n            IN: [...inStates],\r\n            OUT: [...outStates, ...draftStates]\r\n        };\r\n        this.aggregatedNamesMap = {\r\n            IN: this.getAggregatedNamesMap('IN'),\r\n            OUT: this.getAggregatedNamesMap('OUT')\r\n        };\r\n        this.stateNamesMap = {\r\n            IN: this.getStateNamesMap('IN'),\r\n            OUT: this.getStateNamesMap('OUT')\r\n        };\r\n    }\r\n}\r\nconst instance = new PackageStatesService();\r\nexport default instance;\r\n//# sourceMappingURL=PackageStatesService.js.map"]},"metadata":{},"sourceType":"module"}