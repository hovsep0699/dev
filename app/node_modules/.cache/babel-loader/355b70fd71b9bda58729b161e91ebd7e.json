{"ast":null,"code":"import React from 'react';\nimport get from 'lodash.get';\nimport styled from 'styled-components';\nimport { HTMLRequerid, HTMLTitle, HTMLLabel, HTMLLabelName } from './style';\nvar HTMLContainer = styled.div.withConfig({\n  displayName: \"tplgroup__HTMLContainer\",\n  componentId: \"o5zb1e-0\"\n})(function (_ref) {\n  var $width = _ref.$width;\n  return {\n    display: 'flex',\n    width: $width,\n    paddingTop: 2,\n    paddingBottom: 3,\n    marginLeft: -3,\n    marginRight: -3\n  };\n});\nvar HTMLItem = styled.div.withConfig({\n  displayName: \"tplgroup__HTMLItem\",\n  componentId: \"o5zb1e-1\"\n})(function () {\n  return {\n    paddingLeft: 3,\n    paddingRight: 3\n  };\n});\nvar TemplateGroup = React.memo(function (_ref2) {\n  var title = _ref2.title,\n      className = _ref2.className,\n      label = _ref2.label,\n      content = _ref2.content,\n      required = _ref2.required,\n      groupProps = _ref2.groupProps;\n  var childs = React.Children.toArray(content);\n  var width = 100 / childs.length;\n  return React.createElement(React.Fragment, null, title && React.createElement(HTMLTitle, null, title), React.createElement(HTMLContainer, {\n    className: className\n  }, label !== undefined && React.createElement(HTMLLabel, null, React.createElement(HTMLLabelName, null, required ? React.createElement(HTMLRequerid, null, \"*\") : null, label)), childs.map(function (child, i) {\n    var uiWidth = get(groupProps, ['width', i]);\n    return React.createElement(HTMLItem, {\n      key: i,\n      style: {\n        width: uiWidth || \"\".concat(width, \"%\")\n      }\n    }, child);\n  })));\n});\nexport { TemplateGroup };","map":{"version":3,"sources":["../../../src/FormSchema/template/tpl.group.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,MAAkB,OAAlB;AACA,OAAO,GAAP,MAAgB,YAAhB;AACA,OAAO,MAAP,MAAmB,mBAAnB;AAEA,SAAS,YAAT,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,aAA7C,QAAkE,SAAlE;AAEA,IAAM,aAAa,GAAG,MAAM,CAAC,GAAV;AAAA;AAAA;AAAA,GAAmB,gBAAe;AAAA,MAAZ,MAAY,QAAZ,MAAY;AACnD,SAAO;AACL,IAAA,OAAO,EAAE,MADJ;AAEL,IAAA,KAAK,EAAE,MAFF;AAGL,IAAA,UAAU,EAAE,CAHP;AAIL,IAAA,aAAa,EAAE,CAJV;AAKL,IAAA,UAAU,EAAE,CAAC,CALR;AAML,IAAA,WAAW,EAAE,CAAC;AANT,GAAP;AAQD,CATkB,CAAnB;AAWA,IAAM,QAAQ,GAAG,MAAM,CAAC,GAAV;AAAA;AAAA;AAAA,GAAc,YAAK;AAC/B,SAAO;AACL,IAAA,WAAW,EAAE,CADR;AAEL,IAAA,YAAY,EAAE;AAFT,GAAP;AAID,CALa,CAAd;AAiBA,IAAM,aAAa,GAAkC,KAAK,CAAC,IAAN,CACnD,iBAA+D;AAAA,MAA5D,KAA4D,SAA5D,KAA4D;AAAA,MAArD,SAAqD,SAArD,SAAqD;AAAA,MAA1C,KAA0C,SAA1C,KAA0C;AAAA,MAAnC,OAAmC,SAAnC,OAAmC;AAAA,MAA1B,QAA0B,SAA1B,QAA0B;AAAA,MAAhB,UAAgB,SAAhB,UAAgB;AAC7D,MAAM,MAAM,GAAG,KAAK,CAAC,QAAN,CAAe,OAAf,CAAuB,OAAvB,CAAf;AACA,MAAM,KAAK,GAAG,MAAM,MAAM,CAAC,MAA3B;AAEA,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACG,KAAK,IAAI,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU,IAAV,EAAY,KAAZ,CADZ,EAEE,KAAA,CAAA,aAAA,CAAC,aAAD,EAAc;AAAC,IAAA,SAAS,EAAE;AAAZ,GAAd,EACG,KAAK,KAAK,SAAV,IACC,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU,IAAV,EACE,KAAA,CAAA,aAAA,CAAC,aAAD,EAAc,IAAd,EACG,QAAQ,GAAG,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,EAAa,GAAb,CAAH,GAAoC,IAD/C,EAEG,KAFH,CADF,CAFJ,EASG,MAAM,CAAC,GAAP,CAAW,UAAC,KAAD,EAAQ,CAAR,EAAa;AACvB,QAAM,OAAO,GAAG,GAAG,CAAC,UAAD,EAAa,CAAC,OAAD,EAAU,CAAV,CAAb,CAAnB;AAEA,WACE,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS;AAAC,MAAA,GAAG,EAAE,CAAN;AAAS,MAAA,KAAK,EAAE;AAAE,QAAA,KAAK,EAAE,OAAO,cAAO,KAAP;AAAhB;AAAhB,KAAT,EACG,KADH,CADF;AAKD,GARA,CATH,CAFF,CADF;AAwBD,CA7BkD,CAArD;AAgCA,SAAS,aAAT","sourceRoot":"","sourcesContent":["import React from 'react';\r\nimport get from 'lodash.get';\r\nimport styled from 'styled-components';\r\nimport { HTMLRequerid, HTMLTitle, HTMLLabel, HTMLLabelName } from './style';\r\nconst HTMLContainer = styled.div(({ $width }) => {\r\n    return {\r\n        display: 'flex',\r\n        width: $width,\r\n        paddingTop: 2,\r\n        paddingBottom: 3,\r\n        marginLeft: -3,\r\n        marginRight: -3\r\n    };\r\n});\r\nconst HTMLItem = styled.div(() => {\r\n    return {\r\n        paddingLeft: 3,\r\n        paddingRight: 3\r\n    };\r\n});\r\nconst TemplateGroup = React.memo(({ title, className, label, content, required, groupProps }) => {\r\n    const childs = React.Children.toArray(content);\r\n    const width = 100 / childs.length;\r\n    return (React.createElement(React.Fragment, null,\r\n        title && React.createElement(HTMLTitle, null, title),\r\n        React.createElement(HTMLContainer, { className: className },\r\n            label !== undefined && (React.createElement(HTMLLabel, null,\r\n                React.createElement(HTMLLabelName, null,\r\n                    required ? React.createElement(HTMLRequerid, null, \"*\") : null,\r\n                    label))),\r\n            childs.map((child, i) => {\r\n                const uiWidth = get(groupProps, ['width', i]);\r\n                return (React.createElement(HTMLItem, { key: i, style: { width: uiWidth || `${width}%` } }, child));\r\n            }))));\r\n});\r\nexport { TemplateGroup };\r\n//# sourceMappingURL=tpl.group.js.map"]},"metadata":{},"sourceType":"module"}