{"ast":null,"code":"import React, { useRef } from 'react';\nimport set from 'lodash.set';\nimport { Autocomplete } from '../../Autocomplete';\nimport { isObject } from '../utils';\nimport { Context } from '../context';\n\nvar AutocompleteWidget = function AutocompleteWidget(_ref) {\n  var name = _ref.name,\n      label = _ref.label,\n      options = _ref.options,\n      onChange = _ref.onChange,\n      required = _ref.required,\n      schemaPath = _ref.schemaPath,\n      formValue = _ref.formValue,\n      formDefaultValue = _ref.formDefaultValue,\n      _ref$error = _ref.error,\n      error = _ref$error === void 0 ? [] : _ref$error,\n      _ref$uiSchema = _ref.uiSchema,\n      uiSchema = _ref$uiSchema === void 0 ? {} : _ref$uiSchema;\n  var optionsRef = useRef();\n  var _options$enumOptions = options.enumOptions,\n      enumOptions = _options$enumOptions === void 0 ? [] : _options$enumOptions,\n      _options$loadOptions = options.loadOptions,\n      loadOptions = _options$loadOptions === void 0 ? function () {} : _options$loadOptions;\n\n  var _React$useContext = React.useContext(Context),\n      onChangeDefault = _React$useContext.onChange,\n      formData = _React$useContext.formData;\n\n  var width = uiSchema.width,\n      _uiSchema$placeholder = uiSchema.placeholder,\n      placeholder = _uiSchema$placeholder === void 0 ? '' : _uiSchema$placeholder;\n\n  var handleOnChange = function handleOnChange(options) {\n    optionsRef.current = options;\n\n    if (onChange) {\n      onChange(name, options);\n    } else {\n      var data = set(formData, schemaPath, options);\n      onChangeDefault(Object.assign({}, data));\n    }\n  };\n\n  var value = function value() {\n    if (isObject(formValue) && formValue.hasOwnProperty('value')) {\n      return formValue;\n    }\n\n    return typeof formValue === 'undefined' ? formValue : formDefaultValue;\n  };\n\n  return React.createElement(Autocomplete, {\n    name: name,\n    label: label,\n    width: width,\n    placeholder: placeholder,\n    defaultOptions: enumOptions,\n    required: required,\n    error: Boolean(error.length),\n    value: value(),\n    loadOptions: loadOptions,\n    onChange: handleOnChange\n  });\n};\n\nexport { AutocompleteWidget };","map":{"version":3,"sources":["../../../src/FormSchema/widgets/autocomplete.widget.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,IAAyB,MAAzB,QAAuC,OAAvC;AACA,OAAO,GAAP,MAAgB,YAAhB;AAEA,SAAS,YAAT,QAA6B,oBAA7B;AACA,SAAS,QAAT,QAAyB,UAAzB;AACA,SAAS,OAAT,QAAwB,YAAxB;;AAOA,IAAM,kBAAkB,GAAkB,SAApC,kBAAoC,OAWrC;AAAA,MAVH,IAUG,QAVH,IAUG;AAAA,MATH,KASG,QATH,KASG;AAAA,MARH,OAQG,QARH,OAQG;AAAA,MAPH,QAOG,QAPH,QAOG;AAAA,MANH,QAMG,QANH,QAMG;AAAA,MALH,UAKG,QALH,UAKG;AAAA,MAJH,SAIG,QAJH,SAIG;AAAA,MAHH,gBAGG,QAHH,gBAGG;AAAA,wBAFH,KAEG;AAAA,MAFH,KAEG,2BAFK,EAEL;AAAA,2BADH,QACG;AAAA,MADH,QACG,8BADQ,EACR;AACH,MAAM,UAAU,GAAG,MAAM,EAAzB;AADG,6BAEkD,OAFlD,CAEK,WAFL;AAAA,MAEK,WAFL,qCAEmB,EAFnB;AAAA,6BAEkD,OAFlD,CAEuB,WAFvB;AAAA,MAEuB,WAFvB,qCAEqC,YAAK,CAAG,CAF7C;;AAAA,0BAG6C,KAAK,CAAC,UAAN,CAAiB,OAAjB,CAH7C;AAAA,MAGe,eAHf,qBAGK,QAHL;AAAA,MAGgC,QAHhC,qBAGgC,QAHhC;;AAAA,MAIK,KAJL,GAIiC,QAJjC,CAIK,KAJL;AAAA,8BAIiC,QAJjC,CAIY,WAJZ;AAAA,MAIY,WAJZ,sCAI0B,EAJ1B;;AAMH,MAAM,cAAc,GAAG,SAAjB,cAAiB,CAAC,OAAD,EAA+B;AACpD,IAAA,UAAU,CAAC,OAAX,GAAqB,OAArB;;AACA,QAAI,QAAJ,EAAc;AACZ,MAAA,QAAQ,CAAC,IAAD,EAAO,OAAP,CAAR;AACD,KAFD,MAEO;AACL,UAAM,IAAI,GAAG,GAAG,CAAC,QAAD,EAAW,UAAX,EAAuB,OAAvB,CAAhB;AACA,MAAA,eAAe,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAM,IAAN,CAAA,CAAf;AACD;AACF,GARD;;AAUA,MAAM,KAAK,GAAG,SAAR,KAAQ,GAAK;AACjB,QAAI,QAAQ,CAAC,SAAD,CAAR,IAAuB,SAAS,CAAC,cAAV,CAAyB,OAAzB,CAA3B,EAA8D;AAC5D,aAAO,SAAP;AACD;;AAED,WAAO,OAAO,SAAP,KAAqB,WAArB,GAAmC,SAAnC,GAA+C,gBAAtD;AACD,GAND;;AAQA,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa;AACX,IAAA,IAAI,EAAE,IADK;AAEX,IAAA,KAAK,EAAE,KAFI;AAGX,IAAA,KAAK,EAAE,KAHI;AAIX,IAAA,WAAW,EAAE,WAJF;AAKX,IAAA,cAAc,EAAE,WALL;AAMX,IAAA,QAAQ,EAAE,QANC;AAOX,IAAA,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,MAAP,CAPH;AAQX,IAAA,KAAK,EAAE,KAAK,EARD;AASX,IAAA,WAAW,EAAE,WATF;AAUX,IAAA,QAAQ,EAAE;AAVC,GAAb,CADF;AAcD,CAjDD;;AAmDA,SAAS,kBAAT","sourceRoot":"","sourcesContent":["import React, { useRef } from 'react';\r\nimport set from 'lodash.set';\r\nimport { Autocomplete } from '../../Autocomplete';\r\nimport { isObject } from '../utils';\r\nimport { Context } from '../context';\r\nconst AutocompleteWidget = ({ name, label, options, onChange, required, schemaPath, formValue, formDefaultValue, error = [], uiSchema = {} }) => {\r\n    const optionsRef = useRef();\r\n    const { enumOptions = [], loadOptions = () => { } } = options;\r\n    const { onChange: onChangeDefault, formData } = React.useContext(Context);\r\n    const { width, placeholder = '' } = uiSchema;\r\n    const handleOnChange = (options) => {\r\n        optionsRef.current = options;\r\n        if (onChange) {\r\n            onChange(name, options);\r\n        }\r\n        else {\r\n            const data = set(formData, schemaPath, options);\r\n            onChangeDefault(Object.assign({}, data));\r\n        }\r\n    };\r\n    const value = () => {\r\n        if (isObject(formValue) && formValue.hasOwnProperty('value')) {\r\n            return formValue;\r\n        }\r\n        return typeof formValue === 'undefined' ? formValue : formDefaultValue;\r\n    };\r\n    return (React.createElement(Autocomplete, { name: name, label: label, width: width, placeholder: placeholder, defaultOptions: enumOptions, required: required, error: Boolean(error.length), value: value(), loadOptions: loadOptions, onChange: handleOnChange }));\r\n};\r\nexport { AutocompleteWidget };\r\n//# sourceMappingURL=autocomplete.widget.js.map"]},"metadata":{},"sourceType":"module"}