{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import DocumentsFolderService from'@distate/core/dist/application/documents/common/DocumentsFolderService';var FolderApi=/*#__PURE__*/function(){function FolderApi(){_classCallCheck(this,FolderApi);}_createClass(FolderApi,[{key:\"create\",value:function create(_ref){var title=_ref.title;return DocumentsFolderService.create(title);}},{key:\"update\",value:function update(_ref2){var id=_ref2.id,title=_ref2.title;return DocumentsFolderService.update(id,title);}},{key:\"remove\",value:function remove(_ref3){var id=_ref3.id;return DocumentsFolderService.delete(id);}},{key:\"attachDocuments\",value:function attachDocuments(_ref4){var folderId=_ref4.folderId,packageIds=_ref4.packageIds;return DocumentsFolderService.attachDocuments(folderId,packageIds).then(function(){return true;});}},{key:\"detachDocument\",value:function detachDocument(_ref5){var folderId=_ref5.folderId,packageId=_ref5.packageId;return DocumentsFolderService.detachDocument(folderId,packageId).then(function(){return true;});}},{key:\"getFolders\",value:function getFolders(){return DocumentsFolderService.get().then(function(_ref6){var recordsTotal=_ref6.recordsTotal,rows=_ref6.rows;return{total:recordsTotal,list:rows.map(function(_ref7){var id=_ref7.id,title=_ref7.title,is_shown_in_list=_ref7.is_shown_in_list;return{id:id.toString(),title:title,visible:is_shown_in_list};})};});}}]);return FolderApi;}();var FolderApiServices=new FolderApi();export{FolderApiServices};","map":{"version":3,"sources":["C:/Users/Hovsep/Desktop/local/diflow_react/packages/app/src/container/folder/services/folder.api.tsx"],"names":["DocumentsFolderService","FolderApi","title","create","id","update","delete","folderId","packageIds","attachDocuments","then","packageId","detachDocument","get","recordsTotal","rows","total","list","map","is_shown_in_list","toString","visible","FolderApiServices"],"mappings":"oVAAA,MAAOA,CAAAA,sBAAP,KAAmC,wEAAnC,C,GAEMC,CAAAA,S,gJACmB,IAAdC,CAAAA,KAAc,MAAdA,KAAc,CACrB,MAAOF,CAAAA,sBAAsB,CAACG,MAAvB,CAA8BD,KAA9B,CAAP,CACD,C,4CAE0B,IAAlBE,CAAAA,EAAkB,OAAlBA,EAAkB,CAAdF,KAAc,OAAdA,KAAc,CACzB,MAAOF,CAAAA,sBAAsB,CAACK,MAAvB,CAA8BD,EAA9B,CAAkCF,KAAlC,CAAP,CACD,C,4CAEmB,IAAXE,CAAAA,EAAW,OAAXA,EAAW,CAClB,MAAOJ,CAAAA,sBAAsB,CAACM,MAAvB,CAA8BF,EAA9B,CAAP,CACD,C,8DAE8C,IAA7BG,CAAAA,QAA6B,OAA7BA,QAA6B,CAAnBC,UAAmB,OAAnBA,UAAmB,CAC7C,MAAOR,CAAAA,sBAAsB,CAACS,eAAvB,CAAuCF,QAAvC,CAAiDC,UAAjD,EAA6DE,IAA7D,CAAkE,iBAAM,KAAN,EAAlE,CAAP,CACD,C,4DAE4C,IAA5BH,CAAAA,QAA4B,OAA5BA,QAA4B,CAAlBI,SAAkB,OAAlBA,SAAkB,CAC3C,MAAOX,CAAAA,sBAAsB,CAACY,cAAvB,CAAsCL,QAAtC,CAAgDI,SAAhD,EAA2DD,IAA3D,CAAgE,iBAAM,KAAN,EAAhE,CAAP,CACD,C,+CAEY,CACX,MAAOV,CAAAA,sBAAsB,CAACa,GAAvB,GAA6BH,IAA7B,CAAkC,eAAiC,IAA9BI,CAAAA,YAA8B,OAA9BA,YAA8B,CAAhBC,IAAgB,OAAhBA,IAAgB,CACxE,MAAO,CACLC,KAAK,CAAEF,YADF,CAELG,IAAI,CAAEF,IAAI,CAACG,GAAL,CAAS,mBAAGd,CAAAA,EAAH,OAAGA,EAAH,CAAOF,KAAP,OAAOA,KAAP,CAAciB,gBAAd,OAAcA,gBAAd,OAA2C,CACxDf,EAAE,CAAEA,EAAE,CAACgB,QAAH,EADoD,CAExDlB,KAAK,CAALA,KAFwD,CAGxDmB,OAAO,CAAEF,gBAH+C,CAA3C,EAAT,CAFD,CAAP,CAQD,CATM,CAAP,CAUD,C,yBAGH,GAAMG,CAAAA,iBAAiB,CAAG,GAAIrB,CAAAA,SAAJ,EAA1B,CACA,OAASqB,iBAAT","sourcesContent":["import DocumentsFolderService from '@distate/core/dist/application/documents/common/DocumentsFolderService';\r\n\r\nclass FolderApi {\r\n  create({ title }: any) {\r\n    return DocumentsFolderService.create(title);\r\n  }\r\n\r\n  update({ id, title }: any) {\r\n    return DocumentsFolderService.update(id, title);\r\n  }\r\n\r\n  remove({ id }: any) {\r\n    return DocumentsFolderService.delete(id);\r\n  }\r\n\r\n  attachDocuments({ folderId, packageIds }: any) {\r\n    return DocumentsFolderService.attachDocuments(folderId, packageIds).then(() => true);\r\n  }\r\n\r\n  detachDocument({ folderId, packageId }: any) {\r\n    return DocumentsFolderService.detachDocument(folderId, packageId).then(() => true);\r\n  }\r\n\r\n  getFolders() {\r\n    return DocumentsFolderService.get().then(({ recordsTotal, rows }: any) => {\r\n      return {\r\n        total: recordsTotal,\r\n        list: rows.map(({ id, title, is_shown_in_list }: any) => ({\r\n          id: id.toString(),\r\n          title,\r\n          visible: is_shown_in_list\r\n        }))\r\n      };\r\n    });\r\n  }\r\n}\r\n\r\nconst FolderApiServices = new FolderApi();\r\nexport { FolderApiServices };\r\n"]},"metadata":{},"sourceType":"module"}