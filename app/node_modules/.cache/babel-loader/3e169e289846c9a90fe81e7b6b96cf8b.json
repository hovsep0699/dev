{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport EmployeeCertificateForSigningDocuments from './EmployeeCertificateForSigningDocuments';\nimport EmployeeCertificateForEnterSystem from './EmployeeCertificateForEnterSystem';\nexport var ACTIVE_STATUS = 'active';\nexport var INACTIVE_STATUS = 'inactive';\nexport var WAITING_STATUS = 'waiting_for_approval';\n\nvar Employee = /*#__PURE__*/function () {\n  function Employee(employee) {\n    var certificateToEnterSystem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, Employee);\n\n    this._id = employee.id;\n    this._email = employee.email;\n    this._surname = employee.surname;\n    this._name = employee.name;\n    this._patronymic = employee.patronymic;\n    this._position = employee.position;\n    this._socialNumber = employee.socialNumber;\n    this._status = employee.status_system_name;\n\n    if (certificateToEnterSystem) {\n      this._certificatesToEnterSystem = new Map();\n\n      this._certificatesToEnterSystem.set(certificateToEnterSystem.id, certificateToEnterSystem);\n    }\n  }\n\n  _createClass(Employee, [{\n    key: \"assignCertificateToSignDocument\",\n    value: function assignCertificateToSignDocument(certificate) {\n      if (!(certificate instanceof EmployeeCertificateForSigningDocuments)) {\n        throw new Error('Параметр должен быть экземпляром класса EmployeeCertificateForSigningDocuments');\n      }\n\n      this._certificateToSignDocument = certificate;\n    }\n  }, {\n    key: \"addCertificateToEnterSystem\",\n    value: function addCertificateToEnterSystem(certificate) {\n      if (!(certificate instanceof EmployeeCertificateForEnterSystem)) {\n        throw new Error('Параметр должен быть экземпляром класса EmployeeCertificateForEnterSystem');\n      }\n\n      if (!this._certificatesToEnterSystem) {\n        throw new Error('Пользователь зарегистрировался по логину и паролю, нельзя добавить сертификат для входа в систему. Нужно создать нового пользователя');\n      }\n\n      this._certificatesToEnterSystem.set(certificate.id, certificate);\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._id;\n    }\n  }, {\n    key: \"email\",\n    get: function get() {\n      return this._email;\n    }\n  }, {\n    key: \"surname\",\n    get: function get() {\n      return this._surname;\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this._name;\n    }\n  }, {\n    key: \"patronymic\",\n    get: function get() {\n      return this._patronymic;\n    }\n  }, {\n    key: \"position\",\n    get: function get() {\n      return this._position;\n    }\n  }, {\n    key: \"status\",\n    get: function get() {\n      return this._status;\n    }\n  }, {\n    key: \"socialNumber\",\n    get: function get() {\n      return this._socialNumber;\n    }\n  }], [{\n    key: \"isStatusValid\",\n    value: function isStatusValid(status) {\n      return status === ACTIVE_STATUS || status === INACTIVE_STATUS || status === WAITING_STATUS;\n    }\n  }]);\n\n  return Employee;\n}();\n\nexport { Employee as default };","map":{"version":3,"sources":["../../../src/domain/individual_entrepreneur/Employee.js"],"names":[],"mappings":";;AAAA,OAAO,sCAAP,MAAmD,0CAAnD;AACA,OAAO,iCAAP,MAA8C,qCAA9C;AAEA,OAAO,IAAM,aAAa,GAAG,QAAtB;AACP,OAAO,IAAM,eAAe,GAAG,UAAxB;AACP,OAAO,IAAM,cAAc,GAAG,sBAAvB;;IAEc,Q;AACnB,oBAAY,QAAZ,EAAqD;AAAA,QAA/B,wBAA+B,uEAAJ,IAAI;;AAAA;;AACnD,SAAK,GAAL,GAAW,QAAQ,CAAC,EAApB;AACA,SAAK,MAAL,GAAc,QAAQ,CAAC,KAAvB;AACA,SAAK,QAAL,GAAgB,QAAQ,CAAC,OAAzB;AACA,SAAK,KAAL,GAAa,QAAQ,CAAC,IAAtB;AACA,SAAK,WAAL,GAAmB,QAAQ,CAAC,UAA5B;AACA,SAAK,SAAL,GAAiB,QAAQ,CAAC,QAA1B;AACA,SAAK,aAAL,GAAqB,QAAQ,CAAC,YAA9B;AACA,SAAK,OAAL,GAAe,QAAQ,CAAC,kBAAxB;;AACA,QAAI,wBAAJ,EAA8B;AAC5B,WAAK,0BAAL,GAAkC,IAAI,GAAJ,EAAlC;;AACA,WAAK,0BAAL,CAAgC,GAAhC,CAAoC,wBAAwB,CAAC,EAA7D,EAAiE,wBAAjE;AACD;AACF;;;;oDAE+B,W,EAAW;AACzC,UAAI,EAAE,WAAW,YAAY,sCAAzB,CAAJ,EAAsE;AACpE,cAAM,IAAI,KAAJ,CAAU,gFAAV,CAAN;AACD;;AACD,WAAK,0BAAL,GAAkC,WAAlC;AACD;;;gDAE2B,W,EAAW;AACrC,UAAI,EAAE,WAAW,YAAY,iCAAzB,CAAJ,EAAiE;AAC/D,cAAM,IAAI,KAAJ,CAAU,2EAAV,CAAN;AACD;;AACD,UAAI,CAAC,KAAK,0BAAV,EAAsC;AACpC,cAAM,IAAI,KAAJ,CAAU,sIAAV,CAAN;AACD;;AACD,WAAK,0BAAL,CAAgC,GAAhC,CAAoC,WAAW,CAAC,EAAhD,EAAoD,WAApD;AACD;;;wBAQK;AACJ,aAAO,KAAK,GAAZ;AACD;;;wBAEQ;AACP,aAAO,KAAK,MAAZ;AACD;;;wBAEU;AACT,aAAO,KAAK,QAAZ;AACD;;;wBAEO;AACN,aAAO,KAAK,KAAZ;AACD;;;wBAEa;AACZ,aAAO,KAAK,WAAZ;AACD;;;wBAEW;AACV,aAAO,KAAK,SAAZ;AACD;;;wBAES;AACR,aAAO,KAAK,OAAZ;AACD;;;wBAEe;AACd,aAAO,KAAK,aAAZ;AACD;;;kCApCoB,M,EAAM;AACzB,aAAO,MAAM,KAAK,aAAX,IACF,MAAM,KAAK,eADT,IAEF,MAAM,KAAK,cAFhB;AAGD;;;;;;SArCkB,Q","sourceRoot":"","sourcesContent":["import EmployeeCertificateForSigningDocuments from './EmployeeCertificateForSigningDocuments';\r\nimport EmployeeCertificateForEnterSystem from './EmployeeCertificateForEnterSystem';\r\nexport const ACTIVE_STATUS = 'active';\r\nexport const INACTIVE_STATUS = 'inactive';\r\nexport const WAITING_STATUS = 'waiting_for_approval';\r\nexport default class Employee {\r\n    constructor(employee, certificateToEnterSystem = null) {\r\n        this._id = employee.id;\r\n        this._email = employee.email;\r\n        this._surname = employee.surname;\r\n        this._name = employee.name;\r\n        this._patronymic = employee.patronymic;\r\n        this._position = employee.position;\r\n        this._socialNumber = employee.socialNumber;\r\n        this._status = employee.status_system_name;\r\n        if (certificateToEnterSystem) {\r\n            this._certificatesToEnterSystem = new Map();\r\n            this._certificatesToEnterSystem.set(certificateToEnterSystem.id, certificateToEnterSystem);\r\n        }\r\n    }\r\n    assignCertificateToSignDocument(certificate) {\r\n        if (!(certificate instanceof EmployeeCertificateForSigningDocuments)) {\r\n            throw new Error('Параметр должен быть экземпляром класса EmployeeCertificateForSigningDocuments');\r\n        }\r\n        this._certificateToSignDocument = certificate;\r\n    }\r\n    addCertificateToEnterSystem(certificate) {\r\n        if (!(certificate instanceof EmployeeCertificateForEnterSystem)) {\r\n            throw new Error('Параметр должен быть экземпляром класса EmployeeCertificateForEnterSystem');\r\n        }\r\n        if (!this._certificatesToEnterSystem) {\r\n            throw new Error('Пользователь зарегистрировался по логину и паролю, нельзя добавить сертификат для входа в систему. Нужно создать нового пользователя');\r\n        }\r\n        this._certificatesToEnterSystem.set(certificate.id, certificate);\r\n    }\r\n    static isStatusValid(status) {\r\n        return status === ACTIVE_STATUS\r\n            || status === INACTIVE_STATUS\r\n            || status === WAITING_STATUS;\r\n    }\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    get email() {\r\n        return this._email;\r\n    }\r\n    get surname() {\r\n        return this._surname;\r\n    }\r\n    get name() {\r\n        return this._name;\r\n    }\r\n    get patronymic() {\r\n        return this._patronymic;\r\n    }\r\n    get position() {\r\n        return this._position;\r\n    }\r\n    get status() {\r\n        return this._status;\r\n    }\r\n    get socialNumber() {\r\n        return this._socialNumber;\r\n    }\r\n}\r\n//# sourceMappingURL=Employee.js.map"]},"metadata":{},"sourceType":"module"}