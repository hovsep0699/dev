{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport AJAX from '../../infrastructure/AJAX';\nimport Environment from '../../application/Environment';\n\nvar CompanyGateway = /*#__PURE__*/function () {\n  function CompanyGateway() {\n    _classCallCheck(this, CompanyGateway);\n  }\n\n  _createClass(CompanyGateway, [{\n    key: \"setAddress\",\n    value: function setAddress(url, formData) {\n      return AJAX.postFormData(url, formData);\n    }\n  }, {\n    key: \"setDetails\",\n    value: function setDetails(url, formData) {\n      return AJAX.postFormData(url, formData);\n    }\n  }, {\n    key: \"getDivisions\",\n    value: function getDivisions() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return AJAX.doGet('/front/division/employee', params);\n    }\n  }, {\n    key: \"getByDivisionId\",\n    value: function getByDivisionId(divisionId) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var res, banks, isAccurateBIK;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return AJAX.doGet(\"/front/participant/division/\".concat(divisionId));\n\n              case 2:\n                res = _context.sent;\n\n                if (!res.bik) {\n                  _context.next = 10;\n                  break;\n                }\n\n                _context.next = 6;\n                return Environment.getBankGateway().getBankByBIK(res.bik);\n\n              case 6:\n                banks = _context.sent;\n                isAccurateBIK = banks.rows.length === 1;\n                res.correspondentAccount = isAccurateBIK ? banks.rows[0].correspondent_account : '';\n                res.bankName = isAccurateBIK ? banks.rows[0].full_title : '';\n\n              case 10:\n                return _context.abrupt(\"return\", res);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    }\n    /** установить реквизиты компании */\n\n  }, {\n    key: \"setCompanyDetails\",\n    value: function setCompanyDetails(formData) {\n      return AJAX.postFormData('/front/cabinet/company', formData);\n    }\n    /** установить юридический адрес компании */\n\n  }, {\n    key: \"setCompanyAddress\",\n    value: function setCompanyAddress(formData) {\n      return AJAX.postFormData('/front/cabinet/address', formData);\n    }\n    /** получить карточку сотрудника */\n\n  }, {\n    key: \"getEmployee\",\n    value: function getEmployee(id) {\n      return AJAX.doGet(\"/front/employee/\".concat(id));\n    }\n    /** получить список ролей сотрудника */\n\n  }, {\n    key: \"getEmployeeGroup\",\n    value: function getEmployeeGroup(id, props) {\n      return AJAX.doGet(\"/front/employee/\".concat(id, \"/groups\"), props);\n    }\n    /** получить список ролей доступных для добавления сотруднику */\n\n  }, {\n    key: \"getEmployeeNoGroup\",\n    value: function getEmployeeNoGroup(id, props) {\n      return AJAX.doGet(\"/front/employee/\".concat(id, \"/groups\"), Object.assign(Object.assign({}, props), {\n        inverseJoin: 1\n      }));\n    }\n    /** добавление роли сотруднику */\n\n  }, {\n    key: \"addRoleToEmployee\",\n    value: function addRoleToEmployee(groupId, employeeId) {\n      return AJAX.postFormData(\"/front/group/\".concat(groupId, \"/employee/\").concat(employeeId));\n    }\n    /** удалить роли у сотрудника */\n\n  }, {\n    key: \"deleteRoleToEmployee\",\n    value: function deleteRoleToEmployee(groupId, employeeId) {\n      return AJAX.doDelete(\"/front/group/\".concat(groupId, \"/employee/\").concat(employeeId));\n    }\n    /** получение сертификатов сотрудника */\n\n  }, {\n    key: \"getEmployeeCertificate\",\n    value: function getEmployeeCertificate(id, props) {\n      return AJAX.doGet(\"/front/employee/\".concat(id, \"/certificate\"), props);\n    }\n    /** получение подразделений сотрудника */\n\n  }, {\n    key: \"getEmployeeDivision\",\n    value: function getEmployeeDivision(id, props) {\n      return AJAX.doGet(\"/front/employee/\".concat(id, \"/division\"), props);\n    }\n    /** изменение подразделения по умолчанию для сотрудника */\n\n  }, {\n    key: \"changeEmployeeDefaultDivision\",\n    value: function changeEmployeeDefaultDivision(employeeId, divisionId) {\n      return AJAX.postJSON(\"/front/employee/\".concat(employeeId, \"/division/\").concat(divisionId));\n    }\n    /** деактивировать сертификат */\n\n  }, {\n    key: \"deactivateCertivicate\",\n    value: function deactivateCertivicate(id) {\n      return AJAX.postJSON(\"/front/certificate/\".concat(id, \"/deactivate\"));\n    }\n    /** активация сертификата */\n\n  }, {\n    key: \"activateCertificate\",\n    value: function activateCertificate(id) {\n      return AJAX.postJSON(\"/front/certificate/\".concat(id, \"/activate\"));\n    }\n    /** получение групп контрагентов сотрудника */\n\n  }, {\n    key: \"getEmployeeContractorGroups\",\n    value: function getEmployeeContractorGroups(id, props) {\n      return AJAX.doGet(\"/front/contractor_group/employee/\".concat(id, \"/contractor_group\"), props);\n    }\n    /** удалить группу контрагентов сотрудника */\n\n  }, {\n    key: \"deleteEmployeeContractorGroup\",\n    value: function deleteEmployeeContractorGroup(groupId, employeeId) {\n      return AJAX.doDelete(\"/front/contractor_group/\".concat(groupId, \"/employee/\").concat(employeeId));\n    }\n    /** добавить группу контрагентов сотруднику */\n\n  }, {\n    key: \"addEmployeeContractorGroup\",\n    value: function addEmployeeContractorGroup(groupId, employeeId) {\n      return AJAX.postJSON(\"/front/contractor_group/\".concat(groupId, \"/employee/\").concat(employeeId));\n    }\n    /** изменить ответственность сотрудника */\n\n  }, {\n    key: \"changeEmployeeResponsible\",\n    value: function changeEmployeeResponsible(employeeId, formData) {\n      return AJAX.postFormData(\"/front/employee/\".concat(employeeId, \"/responsible\"), formData);\n    }\n    /** сбросить пароль сотрудника */\n\n  }, {\n    key: \"resetEmployeePassword\",\n    value: function resetEmployeePassword(employeeId) {\n      return AJAX.postFormData(\"/front/employee/\".concat(employeeId, \"/password/remind\"));\n    }\n    /** отклонить заявку на активацию сотрудника */\n\n  }, {\n    key: \"rejectEmployee\",\n    value: function rejectEmployee(employeeId) {\n      return AJAX.postFormData(\"/front/employee/\".concat(employeeId, \"/reject\"));\n    }\n    /** принять заявку на активацию сотрудника */\n\n  }, {\n    key: \"activeEmployee\",\n    value: function activeEmployee(employeeId) {\n      return AJAX.postFormData(\"/front/employee/\".concat(employeeId, \"/status/active\"));\n    }\n    /** деактивировать сотрудника */\n\n  }, {\n    key: \"deactivateEmployee\",\n    value: function deactivateEmployee(employeeId) {\n      return AJAX.postFormData(\"/front/employee/\".concat(employeeId, \"/status/inactive\"));\n    }\n    /** получить роли сотрудников */\n\n  }, {\n    key: \"getStaffRoles\",\n    value: function getStaffRoles(props) {\n      return AJAX.doGet(\"/front/role/list\", props);\n    }\n    /** изменить заголовок роли сотрудника */\n\n  }, {\n    key: \"changeStaffRoleTitle\",\n    value: function changeStaffRoleTitle(id, formData) {\n      return AJAX.postFormData(\"/front/group/\".concat(id), formData);\n    }\n    /** создать новую роль */\n\n  }, {\n    key: \"createStaffRole\",\n    value: function createStaffRole(formData) {\n      return AJAX.postFormData(\"/front/group/new\", formData);\n    }\n    /** получить сотрудников определенной роли */\n\n  }, {\n    key: \"getStaffForRole\",\n    value: function getStaffForRole(groupId, props) {\n      return AJAX.doGet(\"/front/group/\".concat(groupId, \"/employee\"), props);\n    }\n    /** получить права документооборота */\n\n  }, {\n    key: \"getDocumentFlowRoles\",\n    value: function getDocumentFlowRoles(groupId) {\n      return AJAX.doGet(\"/front/group/\".concat(groupId, \"/flow\"));\n    }\n    /** обновить права документооборота */\n\n  }, {\n    key: \"updateDocumentFlowRoles\",\n    value: function updateDocumentFlowRoles(groupId, formData) {\n      return AJAX.postFormData(\"/front/group/\".concat(groupId, \"/roles/update\"), formData);\n    }\n    /** удалить роль */\n\n  }, {\n    key: \"deleteRole\",\n    value: function deleteRole(groupId) {\n      return AJAX.doDelete(\"/front/group/\".concat(groupId));\n    }\n    /** получить подразделения компании */\n\n  }, {\n    key: \"getCompanyDivisions\",\n    value: function getCompanyDivisions(props) {\n      return AJAX.doGet('/front/division', props);\n    }\n    /** создание нового подразделения */\n\n  }, {\n    key: \"createCompanyDivision\",\n    value: function createCompanyDivision(formData) {\n      return AJAX.postFormData('/front/division/new', formData);\n    }\n    /** обновить подразделение */\n\n  }, {\n    key: \"updateCompanyDivision\",\n    value: function updateCompanyDivision(id, formData) {\n      return AJAX.postFormData(\"/front/division/\".concat(id), formData);\n    }\n    /** получить информацию о подразделении */\n\n  }, {\n    key: \"getDivision\",\n    value: function getDivision(id) {\n      return AJAX.doGet(\"/front/division/\".concat(id));\n    }\n    /** получить список сотрудников подразделения */\n\n  }, {\n    key: \"getDivisionEmployee\",\n    value: function getDivisionEmployee(id, props) {\n      return AJAX.doGet(\"/front/division/\".concat(id, \"/employee\"), props);\n    }\n    /** добавить сотрудника в подразделение */\n\n  }, {\n    key: \"addEmployeeToDivision\",\n    value: function addEmployeeToDivision(divisionId, employeeId) {\n      return AJAX.postFormData(\"/front/division/\".concat(divisionId, \"/employee/\").concat(employeeId));\n    }\n    /** удалить сотрудника из подразделения */\n\n  }, {\n    key: \"deleteEmployeeFromDivision\",\n    value: function deleteEmployeeFromDivision(divisionId, employeeId) {\n      return AJAX.doDelete(\"/front/division/\".concat(divisionId, \"/employee/\").concat(employeeId));\n    }\n    /** удалить подразделение */\n\n  }, {\n    key: \"deleteDivision\",\n    value: function deleteDivision(divisionId) {\n      return AJAX.doDelete(\"/front/division/\".concat(divisionId));\n    }\n    /** назначение подразделения главным */\n\n  }, {\n    key: \"doHeadDivision\",\n    value: function doHeadDivision(divisionId) {\n      return AJAX.postFormData(\"/front/division/\".concat(divisionId, \"/head\"));\n    }\n    /** информация о компании - раздел Система */\n\n  }, {\n    key: \"getCompanyJson\",\n    value: function getCompanyJson(companyId) {\n      return AJAX.doGet(\"/front/company/\".concat(companyId, \"/json\"));\n    }\n    /** активация компании */\n\n  }, {\n    key: \"companyActivation\",\n    value: function companyActivation(formData) {\n      return AJAX.postFormData('/front/cabinet/members/activate', formData);\n    }\n    /** удаление компании */\n\n  }, {\n    key: \"companyDelete\",\n    value: function companyDelete(data) {\n      return AJAX.deleteFormData('/front/cabinet/members', data);\n    }\n  }]);\n\n  return CompanyGateway;\n}();\n\nexport default CompanyGateway;","map":{"version":3,"sources":["../../../src/application/company/CompanyGateway.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport AJAX from '../../infrastructure/AJAX';\r\nimport Environment from '../../application/Environment';\r\nclass CompanyGateway {\r\n    setAddress(url, formData) {\r\n        return AJAX.postFormData(url, formData);\r\n    }\r\n    setDetails(url, formData) {\r\n        return AJAX.postFormData(url, formData);\r\n    }\r\n    getDivisions(params = {}) {\r\n        return AJAX.doGet('/front/division/employee', params);\r\n    }\r\n    getByDivisionId(divisionId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const res = yield AJAX.doGet(`/front/participant/division/${divisionId}`);\r\n            if (res.bik) {\r\n                const banks = yield Environment.getBankGateway().getBankByBIK(res.bik);\r\n                const isAccurateBIK = banks.rows.length === 1;\r\n                res.correspondentAccount = isAccurateBIK ? banks.rows[0].correspondent_account : '';\r\n                res.bankName = isAccurateBIK ? banks.rows[0].full_title : '';\r\n            }\r\n            return res;\r\n        });\r\n    }\r\n    /** установить реквизиты компании */\r\n    setCompanyDetails(formData) {\r\n        return AJAX.postFormData('/front/cabinet/company', formData);\r\n    }\r\n    /** установить юридический адрес компании */\r\n    setCompanyAddress(formData) {\r\n        return AJAX.postFormData('/front/cabinet/address', formData);\r\n    }\r\n    /** получить карточку сотрудника */\r\n    getEmployee(id) {\r\n        return AJAX.doGet(`/front/employee/${id}`);\r\n    }\r\n    /** получить список ролей сотрудника */\r\n    getEmployeeGroup(id, props) {\r\n        return AJAX.doGet(`/front/employee/${id}/groups`, props);\r\n    }\r\n    /** получить список ролей доступных для добавления сотруднику */\r\n    getEmployeeNoGroup(id, props) {\r\n        return AJAX.doGet(`/front/employee/${id}/groups`, Object.assign(Object.assign({}, props), { inverseJoin: 1 }));\r\n    }\r\n    /** добавление роли сотруднику */\r\n    addRoleToEmployee(groupId, employeeId) {\r\n        return AJAX.postFormData(`/front/group/${groupId}/employee/${employeeId}`);\r\n    }\r\n    /** удалить роли у сотрудника */\r\n    deleteRoleToEmployee(groupId, employeeId) {\r\n        return AJAX.doDelete(`/front/group/${groupId}/employee/${employeeId}`);\r\n    }\r\n    /** получение сертификатов сотрудника */\r\n    getEmployeeCertificate(id, props) {\r\n        return AJAX.doGet(`/front/employee/${id}/certificate`, props);\r\n    }\r\n    /** получение подразделений сотрудника */\r\n    getEmployeeDivision(id, props) {\r\n        return AJAX.doGet(`/front/employee/${id}/division`, props);\r\n    }\r\n    /** изменение подразделения по умолчанию для сотрудника */\r\n    changeEmployeeDefaultDivision(employeeId, divisionId) {\r\n        return AJAX.postJSON(`/front/employee/${employeeId}/division/${divisionId}`);\r\n    }\r\n    /** деактивировать сертификат */\r\n    deactivateCertivicate(id) {\r\n        return AJAX.postJSON(`/front/certificate/${id}/deactivate`);\r\n    }\r\n    /** активация сертификата */\r\n    activateCertificate(id) {\r\n        return AJAX.postJSON(`/front/certificate/${id}/activate`);\r\n    }\r\n    /** получение групп контрагентов сотрудника */\r\n    getEmployeeContractorGroups(id, props) {\r\n        return AJAX.doGet(`/front/contractor_group/employee/${id}/contractor_group`, props);\r\n    }\r\n    /** удалить группу контрагентов сотрудника */\r\n    deleteEmployeeContractorGroup(groupId, employeeId) {\r\n        return AJAX.doDelete(`/front/contractor_group/${groupId}/employee/${employeeId}`);\r\n    }\r\n    /** добавить группу контрагентов сотруднику */\r\n    addEmployeeContractorGroup(groupId, employeeId) {\r\n        return AJAX.postJSON(`/front/contractor_group/${groupId}/employee/${employeeId}`);\r\n    }\r\n    /** изменить ответственность сотрудника */\r\n    changeEmployeeResponsible(employeeId, formData) {\r\n        return AJAX.postFormData(`/front/employee/${employeeId}/responsible`, formData);\r\n    }\r\n    /** сбросить пароль сотрудника */\r\n    resetEmployeePassword(employeeId) {\r\n        return AJAX.postFormData(`/front/employee/${employeeId}/password/remind`);\r\n    }\r\n    /** отклонить заявку на активацию сотрудника */\r\n    rejectEmployee(employeeId) {\r\n        return AJAX.postFormData(`/front/employee/${employeeId}/reject`);\r\n    }\r\n    /** принять заявку на активацию сотрудника */\r\n    activeEmployee(employeeId) {\r\n        return AJAX.postFormData(`/front/employee/${employeeId}/status/active`);\r\n    }\r\n    /** деактивировать сотрудника */\r\n    deactivateEmployee(employeeId) {\r\n        return AJAX.postFormData(`/front/employee/${employeeId}/status/inactive`);\r\n    }\r\n    /** получить роли сотрудников */\r\n    getStaffRoles(props) {\r\n        return AJAX.doGet(`/front/role/list`, props);\r\n    }\r\n    /** изменить заголовок роли сотрудника */\r\n    changeStaffRoleTitle(id, formData) {\r\n        return AJAX.postFormData(`/front/group/${id}`, formData);\r\n    }\r\n    /** создать новую роль */\r\n    createStaffRole(formData) {\r\n        return AJAX.postFormData(`/front/group/new`, formData);\r\n    }\r\n    /** получить сотрудников определенной роли */\r\n    getStaffForRole(groupId, props) {\r\n        return AJAX.doGet(`/front/group/${groupId}/employee`, props);\r\n    }\r\n    /** получить права документооборота */\r\n    getDocumentFlowRoles(groupId) {\r\n        return AJAX.doGet(`/front/group/${groupId}/flow`);\r\n    }\r\n    /** обновить права документооборота */\r\n    updateDocumentFlowRoles(groupId, formData) {\r\n        return AJAX.postFormData(`/front/group/${groupId}/roles/update`, formData);\r\n    }\r\n    /** удалить роль */\r\n    deleteRole(groupId) {\r\n        return AJAX.doDelete(`/front/group/${groupId}`);\r\n    }\r\n    /** получить подразделения компании */\r\n    getCompanyDivisions(props) {\r\n        return AJAX.doGet('/front/division', props);\r\n    }\r\n    /** создание нового подразделения */\r\n    createCompanyDivision(formData) {\r\n        return AJAX.postFormData('/front/division/new', formData);\r\n    }\r\n    /** обновить подразделение */\r\n    updateCompanyDivision(id, formData) {\r\n        return AJAX.postFormData(`/front/division/${id}`, formData);\r\n    }\r\n    /** получить информацию о подразделении */\r\n    getDivision(id) {\r\n        return AJAX.doGet(`/front/division/${id}`);\r\n    }\r\n    /** получить список сотрудников подразделения */\r\n    getDivisionEmployee(id, props) {\r\n        return AJAX.doGet(`/front/division/${id}/employee`, props);\r\n    }\r\n    /** добавить сотрудника в подразделение */\r\n    addEmployeeToDivision(divisionId, employeeId) {\r\n        return AJAX.postFormData(`/front/division/${divisionId}/employee/${employeeId}`);\r\n    }\r\n    /** удалить сотрудника из подразделения */\r\n    deleteEmployeeFromDivision(divisionId, employeeId) {\r\n        return AJAX.doDelete(`/front/division/${divisionId}/employee/${employeeId}`);\r\n    }\r\n    /** удалить подразделение */\r\n    deleteDivision(divisionId) {\r\n        return AJAX.doDelete(`/front/division/${divisionId}`);\r\n    }\r\n    /** назначение подразделения главным */\r\n    doHeadDivision(divisionId) {\r\n        return AJAX.postFormData(`/front/division/${divisionId}/head`);\r\n    }\r\n    /** информация о компании - раздел Система */\r\n    getCompanyJson(companyId) {\r\n        return AJAX.doGet(`/front/company/${companyId}/json`);\r\n    }\r\n    /** активация компании */\r\n    companyActivation(formData) {\r\n        return AJAX.postFormData('/front/cabinet/members/activate', formData);\r\n    }\r\n    /** удаление компании */\r\n    companyDelete(data) {\r\n        return AJAX.deleteFormData('/front/cabinet/members', data);\r\n    }\r\n}\r\nexport default CompanyGateway;\r\n//# sourceMappingURL=CompanyGateway.js.map"]},"metadata":{},"sourceType":"module"}