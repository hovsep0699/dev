{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/*\r\n  Номер расчётного счёта состоит из 20 цифр\r\n\r\n (1—3-я цифры) означают, кто открыл счет.\r\n  Например\r\n    408 – физические лица и ИП;\r\n    с 411 по 419 — государственные организации;\r\n    с 420 по 422 — юридические лица и так далее.\r\n\r\n  (4—5-я цифры) - показывают вид деятельности лица, открывшего счет.\r\n  Например\r\n   02 – это счет, открытый физлицом, являющимся индивидуальным предпринимателем.\r\n   40702 – счет открыт на юрлицо, открытое или закрытое акционерное общество.\r\n\r\n  (6—8-я цифры) - Валюта счета\r\n  Например\r\n    810 – это российский рубль для переводов внутри страны\r\n    643 – рубль для международных переводов\r\n    840 – американский доллар\r\n    978 – евро\r\n\r\n  (9-я цифра) — контрольная цифра для выявления случайной ошибки в наборе номера счёта\r\n\r\n  (10—13-я цифры) — четырехзначный код подразделения банка (не путать с другим реквизитом – БИК)\r\n   (иногда не подразделяется и является частью внутреннего номера счёта в банке);\r\n\r\n  (14—20-я цифры) — семизначный внутренний номер (лицевого) счёта в банке.\r\n\r\n  В целях создания резерва рекомендовано предусматривать возможность обработки номеров счетов из 25 знаков (резерв на дополнительные 5 знаков).\r\n*/\nvar AccountNumber = /*#__PURE__*/function () {\n  _createClass(AccountNumber, null, [{\n    key: \"validateWithBIK\",\n    value: function validateWithBIK(accountNumber, bik) {\n      var bikAccountNumber = \"\".concat(bik.slice(-3)).concat(accountNumber);\n      var checksum = 0;\n      var KOEFS = [7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1];\n      KOEFS.forEach(function (koef, index) {\n        checksum += koef * (bikAccountNumber[index] % 10);\n      });\n\n      if (checksum % 10 !== 0) {\n        return 'Неправильное контрольное число';\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(value) {\n      return value && !AccountNumber.REG_EXP.test(value) ? 'Введите число длиной 20 знаков' : undefined;\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid(value) {\n      return !AccountNumber.validate(value);\n    }\n  }, {\n    key: \"isValidWithBIK\",\n    value: function isValidWithBIK(accountNumber, bik) {\n      return !AccountNumber.validateWithBIK(accountNumber, bik);\n    }\n  }, {\n    key: \"mask\",\n    value: function mask(value) {\n      return value && value.replace(/\\D/g, '').slice(0, 20);\n    }\n  }, {\n    key: \"REG_EXP\",\n    get: function get() {\n      return new RegExp('^[0-9]{20}$');\n    }\n  }, {\n    key: \"placeholder\",\n    get: function get() {\n      return 'Введите номер';\n    }\n  }, {\n    key: \"hint\",\n    get: function get() {\n      return 'Введите 20-значный «Номер расчётного счёта»';\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'Номер расчётного счёта';\n    }\n  }, {\n    key: \"field\",\n    get: function get() {\n      return 'accountNumber';\n    }\n  }]);\n\n  function AccountNumber(accountNumber) {\n    _classCallCheck(this, AccountNumber);\n\n    if (AccountNumber.isValid(\"\".concat(accountNumber))) {\n      this._value = \"\".concat(accountNumber);\n    } else {\n      this._value = accountNumber;\n    }\n  }\n\n  _createClass(AccountNumber, [{\n    key: \"clone\",\n    value: function clone() {\n      return new AccountNumber(this.value);\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n  }]);\n\n  return AccountNumber;\n}();\n\nexport default AccountNumber;","map":{"version":3,"sources":["../../../src/domain/bank/AccountNumber.js"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA8BM,a;;;oCAKmB,a,EAAe,G,EAAG;AACvC,UAAM,gBAAgB,aAAM,GAAG,CAAC,KAAJ,CAAU,CAAC,CAAX,CAAN,SAAsB,aAAtB,CAAtB;AACA,UAAI,QAAQ,GAAG,CAAf;AACA,UAAM,KAAK,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,EAA8C,CAA9C,EAAiD,CAAjD,EAAoD,CAApD,EAAuD,CAAvD,EAA0D,CAA1D,EAA6D,CAA7D,EAAgE,CAAhE,EAAmE,CAAnE,CAAd;AACA,MAAA,KAAK,CAAC,OAAN,CAAc,UAAC,IAAD,EAAO,KAAP,EAAgB;AAC5B,QAAA,QAAQ,IAAI,IAAI,IAAI,gBAAgB,CAAC,KAAD,CAAhB,GAA0B,EAA9B,CAAhB;AACD,OAFD;;AAGA,UAAI,QAAQ,GAAG,EAAX,KAAkB,CAAtB,EAAyB;AACvB,eAAO,gCAAP;AACD;;AACD,aAAO,SAAP;AACD;;;6BAEe,K,EAAK;AACnB,aAAO,KAAK,IAAI,CAAC,aAAa,CAAC,OAAd,CAAsB,IAAtB,CAA2B,KAA3B,CAAV,GAA8C,gCAA9C,GAAiF,SAAxF;AACD;;;4BAEc,K,EAAK;AAClB,aAAO,CAAC,aAAa,CAAC,QAAd,CAAuB,KAAvB,CAAR;AACD;;;mCAEqB,a,EAAe,G,EAAG;AACtC,aAAO,CAAC,aAAa,CAAC,eAAd,CAA8B,aAA9B,EAA6C,GAA7C,CAAR;AACD;;;yBAEW,K,EAAK;AACf,aAAO,KAAK,IAAI,KAAK,CAAC,OAAN,CAAc,KAAd,EAAqB,EAArB,EAAyB,KAAzB,CAA+B,CAA/B,EAAkC,EAAlC,CAAhB;AACD;;;wBA/BiB;AAChB,aAAO,IAAI,MAAJ,CAAW,aAAX,CAAP;AACD;;;wBA+BqB;AACpB,aAAO,eAAP;AACD;;;wBAEc;AACb,aAAO,6CAAP;AACD;;;wBAEc;AACb,aAAO,wBAAP;AACD;;;wBAEe;AACd,aAAO,eAAP;AACD;;;AAED,yBAAY,aAAZ,EAAyB;AAAA;;AACvB,QAAI,aAAa,CAAC,OAAd,WAAyB,aAAzB,EAAJ,EAA+C;AAC7C,WAAK,MAAL,aAAiB,aAAjB;AACD,KAFD,MAEO;AACL,WAAK,MAAL,GAAc,aAAd;AACD;AACF;;;;4BAEI;AACH,aAAO,IAAI,aAAJ,CAAkB,KAAK,KAAvB,CAAP;AACD;;;wBAEQ;AACP,aAAO,KAAK,MAAZ;AACD;;;;;;AAGH,eAAe,aAAf","sourceRoot":"","sourcesContent":["/*\r\n  Номер расчётного счёта состоит из 20 цифр\r\n\r\n (1—3-я цифры) означают, кто открыл счет.\r\n  Например\r\n    408 – физические лица и ИП;\r\n    с 411 по 419 — государственные организации;\r\n    с 420 по 422 — юридические лица и так далее.\r\n\r\n  (4—5-я цифры) - показывают вид деятельности лица, открывшего счет.\r\n  Например\r\n   02 – это счет, открытый физлицом, являющимся индивидуальным предпринимателем.\r\n   40702 – счет открыт на юрлицо, открытое или закрытое акционерное общество.\r\n\r\n  (6—8-я цифры) - Валюта счета\r\n  Например\r\n    810 – это российский рубль для переводов внутри страны\r\n    643 – рубль для международных переводов\r\n    840 – американский доллар\r\n    978 – евро\r\n\r\n  (9-я цифра) — контрольная цифра для выявления случайной ошибки в наборе номера счёта\r\n\r\n  (10—13-я цифры) — четырехзначный код подразделения банка (не путать с другим реквизитом – БИК)\r\n   (иногда не подразделяется и является частью внутреннего номера счёта в банке);\r\n\r\n  (14—20-я цифры) — семизначный внутренний номер (лицевого) счёта в банке.\r\n\r\n  В целях создания резерва рекомендовано предусматривать возможность обработки номеров счетов из 25 знаков (резерв на дополнительные 5 знаков).\r\n*/\r\nclass AccountNumber {\r\n    static get REG_EXP() {\r\n        return new RegExp('^[0-9]{20}$');\r\n    }\r\n    static validateWithBIK(accountNumber, bik) {\r\n        const bikAccountNumber = `${bik.slice(-3)}${accountNumber}`;\r\n        let checksum = 0;\r\n        const KOEFS = [7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1];\r\n        KOEFS.forEach((koef, index) => {\r\n            checksum += koef * (bikAccountNumber[index] % 10);\r\n        });\r\n        if (checksum % 10 !== 0) {\r\n            return 'Неправильное контрольное число';\r\n        }\r\n        return undefined;\r\n    }\r\n    static validate(value) {\r\n        return value && !AccountNumber.REG_EXP.test(value) ? 'Введите число длиной 20 знаков' : undefined;\r\n    }\r\n    static isValid(value) {\r\n        return !AccountNumber.validate(value);\r\n    }\r\n    static isValidWithBIK(accountNumber, bik) {\r\n        return !AccountNumber.validateWithBIK(accountNumber, bik);\r\n    }\r\n    static mask(value) {\r\n        return value && value.replace(/\\D/g, '').slice(0, 20);\r\n    }\r\n    static get placeholder() {\r\n        return 'Введите номер';\r\n    }\r\n    static get hint() {\r\n        return 'Введите 20-значный «Номер расчётного счёта»';\r\n    }\r\n    static get name() {\r\n        return 'Номер расчётного счёта';\r\n    }\r\n    static get field() {\r\n        return 'accountNumber';\r\n    }\r\n    constructor(accountNumber) {\r\n        if (AccountNumber.isValid(`${accountNumber}`)) {\r\n            this._value = `${accountNumber}`;\r\n        }\r\n        else {\r\n            this._value = accountNumber;\r\n        }\r\n    }\r\n    clone() {\r\n        return new AccountNumber(this.value);\r\n    }\r\n    get value() {\r\n        return this._value;\r\n    }\r\n}\r\nexport default AccountNumber;\r\n//# sourceMappingURL=AccountNumber.js.map"]},"metadata":{},"sourceType":"module"}