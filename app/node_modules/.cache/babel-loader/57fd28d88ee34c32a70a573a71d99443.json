{"ast":null,"code":"import dialogManager from'./DialogManager';import React from\"react\";import Modal from'../../../../common/Modal/Modal';export var useDialog=function useDialog(){var showDialog=function showDialog(dialog){console.log(\"sssssss\");// const body = document.querySelector(\"body\");\n// dialogManager.subscribe((dialog)=> ReactDOM.render(dialog, body));\ndialogManager.showDialog(dialog);// ReactDOM.createPortal(dialog, document.getElementById('modals') as HTMLElement);\n};var hideDialog=function hideDialog(){dialogManager.hideDialog();};var hideAllDialogs=function hideAllDialogs(){dialogManager.hideAllDialogs();};var hideDialogtest=function hideDialogtest(callback){dialogManager.hideDialog();callback();};var openDialog=function openDialog(openDialogProps,event){showDialog(/*#__PURE__*/React.createElement(Modal,{hide:openDialogProps.shouldCloseMultiple?hideAllDialogs:hideDialog,width:openDialogProps.width,isVisible:true,zIndex:300},/*#__PURE__*/React.createElement(Modal.Header,{onClickCloseBtn:openDialogProps.shouldCloseMultiple?hideAllDialogs:hideDialog,title:openDialogProps.dialogTitle}),/*#__PURE__*/React.createElement(Modal.Body,null,openDialogProps.content),openDialogProps.footer?/*#__PURE__*/React.createElement(Modal.Footer,null,openDialogProps.footer):/*#__PURE__*/React.createElement(React.Fragment,null)));};return{showDialog:showDialog,hideDialog:hideDialog,openDialog:openDialog,hideDialogtest:hideDialogtest,hideAllDialogs:hideAllDialogs};};","map":{"version":3,"sources":["C:/Users/Hovsep/Desktop/local/diflow_react/packages/app/src/pages/POA/MCHD_ROOT/presentation/pages/dashboard/modals/useDialog.tsx"],"names":["dialogManager","React","Modal","useDialog","showDialog","dialog","console","log","hideDialog","hideAllDialogs","hideDialogtest","callback","openDialog","openDialogProps","event","shouldCloseMultiple","width","dialogTitle","content","footer"],"mappings":"AAAA,MAAOA,CAAAA,aAAP,KAA0B,iBAA1B,CACA,MAAOC,CAAAA,KAAP,KAAmC,OAAnC,CACA,MAAOC,CAAAA,KAAP,KAAkB,gCAAlB,CA+BA,MAAO,IAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CAC3B,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,MAAD,CAA6B,CAC5CC,OAAO,CAACC,GAAR,CAAY,SAAZ,EACA;AACA;AACAP,aAAa,CAACI,UAAd,CAAyBC,MAAzB,EACA;AACH,CAND,CAQA,GAAMG,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACrBR,aAAa,CAACQ,UAAd,GACH,CAFD,CAIA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CACzBT,aAAa,CAACS,cAAd,GACH,CAFD,CAIA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,QAAD,CAAmB,CACtCX,aAAa,CAACQ,UAAd,GACAG,QAAQ,GACX,CAHD,CAKA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,eAAD,CAAmCC,KAAnC,CAAkD,CACjEV,UAAU,cACN,oBAAC,KAAD,EAAO,IAAI,CAAES,eAAe,CAACE,mBAAhB,CAAsCN,cAAtC,CAAuDD,UAApE,CAAgF,KAAK,CAAEK,eAAe,CAACG,KAAvG,CAA8G,SAAS,CAAE,IAAzH,CAA+H,MAAM,CAAE,GAAvI,eACI,oBAAC,KAAD,CAAO,MAAP,EAAc,eAAe,CAAEH,eAAe,CAACE,mBAAhB,CAAsCN,cAAtC,CAAuDD,UAAtF,CAAkG,KAAK,CAAEK,eAAe,CAACI,WAAzH,EADJ,cAEI,oBAAC,KAAD,CAAO,IAAP,MACCJ,eAAe,CAACK,OADjB,CAFJ,CAKKL,eAAe,CAACM,MAAhB,cACG,oBAAC,KAAD,CAAO,MAAP,MACKN,eAAe,CAACM,MADrB,CADH,cAGsB,wCAR3B,CADM,CAAV,CAaH,CAdD,CAgBA,MAAO,CAAEf,UAAU,CAAVA,UAAF,CAAcI,UAAU,CAAVA,UAAd,CAA0BI,UAAU,CAAVA,UAA1B,CAAsCF,cAAc,CAAdA,cAAtC,CAAsDD,cAAc,CAAdA,cAAtD,CAAP,CACH,CAvCM","sourcesContent":["import dialogManager from './DialogManager';\r\nimport React, {CSSProperties} from \"react\";\r\nimport Modal from '../../../../common/Modal/Modal';\r\nimport {AlignmentType} from \"./Dialog\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {EdgeInsets} from \"../../../utils/EdgeInsets\";\r\n\r\n\r\nexport interface OpenDialogProps {\r\n    content?: React.ReactNode | string;\r\n    overlayColor?: string;\r\n    dialogContainerStyle?: CSSProperties;\r\n    titleCentered?: boolean;\r\n    footer?: React.ReactNode | string;\r\n    actions?: React.ReactNode;\r\n    isScrollable?: boolean | true;\r\n    title?: React.ReactNode | string;\r\n    dialogTitle?: string;\r\n    alignment?: \"start\" | \"center\" | \"end\" | AlignmentType;\r\n    position?: \"absolute\" | \"relative\" | \"fixed\";\r\n    positionOffset?: EdgeInsets;\r\n    maxWidth?: string;\r\n    minHeight?: string;\r\n    shouldOpenMultiple?: boolean | null;\r\n    shouldCloseMultiple?: boolean | null;\r\n    width?: string;\r\n    height?: string;\r\n    minWidth?: string;\r\n    maxHeight?: string;\r\n    isShowArrow?: boolean;\r\n    relativeTo?: React.RefObject<HTMLElement>\r\n}\r\n\r\nexport const useDialog = () => {\r\n    const showDialog = (dialog: React.ReactNode) => {\r\n        console.log(\"sssssss\")\r\n        // const body = document.querySelector(\"body\");\r\n        // dialogManager.subscribe((dialog)=> ReactDOM.render(dialog, body));\r\n        dialogManager.showDialog(dialog);\r\n        // ReactDOM.createPortal(dialog, document.getElementById('modals') as HTMLElement);\r\n    };\r\n\r\n    const hideDialog = () => {\r\n        dialogManager.hideDialog();\r\n    };\r\n\r\n    const hideAllDialogs = () => {\r\n        dialogManager.hideAllDialogs();\r\n    }\r\n\r\n    const hideDialogtest = (callback: any) => {\r\n        dialogManager.hideDialog();\r\n        callback();\r\n    };\r\n\r\n    const openDialog = (openDialogProps: OpenDialogProps, event: any) => {\r\n        showDialog(\r\n            <Modal hide={openDialogProps.shouldCloseMultiple ? hideAllDialogs : hideDialog} width={openDialogProps.width} isVisible={true} zIndex={300}>\r\n                <Modal.Header onClickCloseBtn={openDialogProps.shouldCloseMultiple ? hideAllDialogs : hideDialog} title={openDialogProps.dialogTitle} />\r\n                <Modal.Body>\r\n                {openDialogProps.content}\r\n                </Modal.Body>\r\n                {openDialogProps.footer ? (\r\n                    <Modal.Footer>\r\n                        {openDialogProps.footer}\r\n                    </Modal.Footer>) : <></>\r\n                }\r\n            </Modal>\r\n        )\r\n    };\r\n\r\n    return { showDialog, hideDialog, openDialog, hideDialogtest, hideAllDialogs};\r\n};\r\n"]},"metadata":{},"sourceType":"module"}