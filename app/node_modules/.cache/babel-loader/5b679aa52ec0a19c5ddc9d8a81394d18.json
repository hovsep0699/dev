{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport React from 'react';\nimport AutocompleteGateway from '@distate/core/dist/application/autocomplete/AutocompleteGateway';\nimport { Autocomplete } from '../../Autocomplete';\nimport { Context } from '../context';\nvar AutocompleteService = new AutocompleteGateway();\n\nvar loadOptions = function loadOptions(inputValue, callback) {\n  AutocompleteService.getContractor({\n    recipient: inputValue\n  }).then(function (_ref) {\n    var _ref$rows = _ref.rows,\n        rows = _ref$rows === void 0 ? [] : _ref$rows;\n    callback(rows.map(function (row) {\n      var id = row.id,\n          type = row.type,\n          company = row.company,\n          person = row.person;\n      var label = company;\n\n      if (person) {\n        label = Object.values(person).join(' ');\n      }\n\n      return {\n        label: label,\n        value: {\n          id: id,\n          type: type\n        }\n      };\n    }));\n  }).catch(function () {\n    callback([]);\n  });\n};\n\nvar AutocompleteContractorWidget = function AutocompleteContractorWidget(_ref2) {\n  var required = _ref2.required,\n      name = _ref2.name,\n      label = _ref2.label,\n      options = _ref2.options,\n      formValue = _ref2.formValue;\n  var _options$enumOptions = options.enumOptions,\n      enumOptions = _options$enumOptions === void 0 ? [] : _options$enumOptions,\n      _options$placeholder = options.placeholder,\n      placeholder = _options$placeholder === void 0 ? '' : _options$placeholder;\n\n  var _React$useContext = React.useContext(Context),\n      onChange = _React$useContext.onChange;\n\n  var handleOnChange = function handleOnChange(options) {\n    // let val;\n    // if (Array.isArray(options)) {\n    //   val = options.map(option => option.value);\n    // } else if (isObject(options) && options.hasOwnProperty('value')) {\n    //   val = options.value;\n    // } else {\n    //   val = options;\n    // }\n    onChange(_defineProperty({}, name, options));\n  };\n\n  return React.createElement(Autocomplete, {\n    label: label,\n    value: formValue,\n    placeholder: placeholder,\n    defaultOptions: enumOptions,\n    required: required,\n    loadOptions: loadOptions,\n    onChange: handleOnChange\n  });\n};\n\nexport { AutocompleteContractorWidget };","map":{"version":3,"sources":["../../../src/FormSchema/widgets/_contractor.widget.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAP,MAAkB,OAAlB;AACA,OAAO,mBAAP,MAAgC,iEAAhC;AAEA,SAAS,YAAT,QAA6B,oBAA7B;AACA,SAAS,OAAT,QAAwB,YAAxB;AAEA,IAAM,mBAAmB,GAAG,IAAI,mBAAJ,EAA5B;;AAEA,IAAM,WAAW,GAAG,SAAd,WAAc,CAAC,UAAD,EAAqB,QAArB,EAAsC;AACxD,EAAA,mBAAmB,CAAC,aAApB,CAAkC;AAAE,IAAA,SAAS,EAAE;AAAb,GAAlC,EACG,IADH,CACQ,gBAAuB;AAAA,yBAApB,IAAoB;AAAA,QAApB,IAAoB,0BAAb,EAAa;AAC3B,IAAA,QAAQ,CACN,IAAI,CAAC,GAAL,CAAS,UAAC,GAAD,EAAa;AAAA,UACZ,EADY,GACkB,GADlB,CACZ,EADY;AAAA,UACR,IADQ,GACkB,GADlB,CACR,IADQ;AAAA,UACF,OADE,GACkB,GADlB,CACF,OADE;AAAA,UACO,MADP,GACkB,GADlB,CACO,MADP;AAGpB,UAAI,KAAK,GAAG,OAAZ;;AACA,UAAI,MAAJ,EAAY;AACV,QAAA,KAAK,GAAG,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB,IAAtB,CAA2B,GAA3B,CAAR;AACD;;AAED,aAAO;AAAE,QAAA,KAAK,EAAL,KAAF;AAAS,QAAA,KAAK,EAAE;AAAE,UAAA,EAAE,EAAF,EAAF;AAAM,UAAA,IAAI,EAAJ;AAAN;AAAhB,OAAP;AACD,KATD,CADM,CAAR;AAYD,GAdH,EAeG,KAfH,CAeS,YAAK;AACV,IAAA,QAAQ,CAAC,EAAD,CAAR;AACD,GAjBH;AAkBD,CAnBD;;AAqBA,IAAM,4BAA4B,GAAkB,SAA9C,4BAA8C,QAM/C;AAAA,MALH,QAKG,SALH,QAKG;AAAA,MAJH,IAIG,SAJH,IAIG;AAAA,MAHH,KAGG,SAHH,KAGG;AAAA,MAFH,OAEG,SAFH,OAEG;AAAA,MADH,SACG,SADH,SACG;AAAA,6BAC4C,OAD5C,CACK,WADL;AAAA,MACK,WADL,qCACmB,EADnB;AAAA,6BAC4C,OAD5C,CACuB,WADvB;AAAA,MACuB,WADvB,qCACqC,EADrC;;AAAA,0BAEkB,KAAK,CAAC,UAAN,CAAiB,OAAjB,CAFlB;AAAA,MAEK,QAFL,qBAEK,QAFL;;AAIH,MAAM,cAAc,GAAG,SAAjB,cAAiB,CAAC,OAAD,EAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAA,QAAQ,qBAAI,IAAJ,EAAW,OAAX,EAAR;AACD,GAXD;;AAaA,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa;AACX,IAAA,KAAK,EAAE,KADI;AAEX,IAAA,KAAK,EAAE,SAFI;AAGX,IAAA,WAAW,EAAE,WAHF;AAIX,IAAA,cAAc,EAAE,WAJL;AAKX,IAAA,QAAQ,EAAE,QALC;AAMX,IAAA,WAAW,EAAE,WANF;AAOX,IAAA,QAAQ,EAAE;AAPC,GAAb,CADF;AAWD,CAlCD;;AAoCA,SAAS,4BAAT","sourceRoot":"","sourcesContent":["import React from 'react';\r\nimport AutocompleteGateway from '@distate/core/dist/application/autocomplete/AutocompleteGateway';\r\nimport { Autocomplete } from '../../Autocomplete';\r\nimport { Context } from '../context';\r\nconst AutocompleteService = new AutocompleteGateway();\r\nconst loadOptions = (inputValue, callback) => {\r\n    AutocompleteService.getContractor({ recipient: inputValue })\r\n        .then(({ rows = [] }) => {\r\n        callback(rows.map((row) => {\r\n            const { id, type, company, person } = row;\r\n            let label = company;\r\n            if (person) {\r\n                label = Object.values(person).join(' ');\r\n            }\r\n            return { label, value: { id, type } };\r\n        }));\r\n    })\r\n        .catch(() => {\r\n        callback([]);\r\n    });\r\n};\r\nconst AutocompleteContractorWidget = ({ required, name, label, options, formValue }) => {\r\n    const { enumOptions = [], placeholder = '' } = options;\r\n    const { onChange } = React.useContext(Context);\r\n    const handleOnChange = (options) => {\r\n        // let val;\r\n        // if (Array.isArray(options)) {\r\n        //   val = options.map(option => option.value);\r\n        // } else if (isObject(options) && options.hasOwnProperty('value')) {\r\n        //   val = options.value;\r\n        // } else {\r\n        //   val = options;\r\n        // }\r\n        onChange({ [name]: options });\r\n    };\r\n    return (React.createElement(Autocomplete, { label: label, value: formValue, placeholder: placeholder, defaultOptions: enumOptions, required: required, loadOptions: loadOptions, onChange: handleOnChange }));\r\n};\r\nexport { AutocompleteContractorWidget };\r\n//# sourceMappingURL=_contractor.widget.js.map"]},"metadata":{},"sourceType":"module"}