{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/*\r\n  Информационное поле факта хозяйственной жизни 1(ИнфПолФХЖ1)\r\n*/\nimport assert from 'chai';\nimport TextInfoType from '../../standard_element/text_info/TextInfoType';\nimport TextInfoId from '../../standard_element/text_info/TextInfoId';\nimport TextInfoValue from '../../standard_element/text_info/TextInfoValue';\n\nvar InfoFieldFact1 = /*#__PURE__*/function () {\n  _createClass(InfoFieldFact1, null, [{\n    key: \"validate\",\n    value: function validate(values) {\n      var errorMsgs = [];\n      InfoFieldFact1.VOs.forEach(function (DomainVO) {\n        values.forEach(function (val) {\n          var msg = DomainVO.validate(val[DomainVO.field]);\n\n          if (msg !== undefined) {\n            errorMsgs.push(msg);\n          }\n        });\n      });\n      return errorMsgs.length > 0 ? 'ИнфПолФЧЖ1 заполнено неверно' : undefined;\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid(value) {\n      return !InfoFieldFact1.validate(value);\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'Информационное поле';\n    }\n  }, {\n    key: \"field\",\n    get: function get() {\n      return 'invoice.informationField.attributeValues';\n    }\n  }, {\n    key: \"VOs\",\n    get: function get() {\n      return [TextInfoId, TextInfoValue];\n    }\n  }]);\n\n  function InfoFieldFact1(informationFields) {\n    _classCallCheck(this, InfoFieldFact1);\n\n    this.informationFields = informationFields;\n  }\n\n  _createClass(InfoFieldFact1, [{\n    key: \"clone\",\n    value: function clone() {\n      return new InfoFieldFact1(this.informationFields);\n    }\n  }, {\n    key: \"informationFields\",\n    get: function get() {\n      return this._informationFields;\n    },\n    set: function set(values) {\n      assert.isArray(values);\n      values.forEach(function (val) {\n        assert.instanceOf(val, TextInfoType);\n      });\n      this._informationFields = values;\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.informationFields;\n    }\n  }]);\n\n  return InfoFieldFact1;\n}();\n\nexport default InfoFieldFact1;","map":{"version":3,"sources":["../../../../../../src/domain/documents/invoice/vo/invoice/InfoFieldFact1.js"],"names":[],"mappings":";;;AAAA;;;AAGA,OAAO,MAAP,MAAmB,MAAnB;AACA,OAAO,YAAP,MAAyB,+CAAzB;AACA,OAAO,UAAP,MAAuB,6CAAvB;AACA,OAAO,aAAP,MAA0B,gDAA1B;;IAEM,c;;;6BACY,M,EAAM;AACpB,UAAM,SAAS,GAAG,EAAlB;AACA,MAAA,cAAc,CAAC,GAAf,CAAmB,OAAnB,CAA2B,UAAC,QAAD,EAAa;AACtC,QAAA,MAAM,CAAC,OAAP,CAAe,UAAC,GAAD,EAAQ;AACrB,cAAM,GAAG,GAAG,QAAQ,CAAC,QAAT,CAAkB,GAAG,CAAC,QAAQ,CAAC,KAAV,CAArB,CAAZ;;AACA,cAAI,GAAG,KAAK,SAAZ,EAAuB;AACrB,YAAA,SAAS,CAAC,IAAV,CAAe,GAAf;AACD;AACF,SALD;AAMD,OAPD;AAQA,aAAQ,SAAS,CAAC,MAAV,GAAmB,CAApB,GAAyB,8BAAzB,GAA0D,SAAjE;AACD;;;4BAEc,K,EAAK;AAClB,aAAO,CAAC,cAAc,CAAC,QAAf,CAAwB,KAAxB,CAAR;AACD;;;wBAEc;AACb,aAAO,qBAAP;AACD;;;wBAEe;AACd,aAAO,0CAAP;AACD;;;wBAEa;AACZ,aAAO,CAAC,UAAD,EAAa,aAAb,CAAP;AACD;;;AAED,0BAAY,iBAAZ,EAA6B;AAAA;;AAC3B,SAAK,iBAAL,GAAyB,iBAAzB;AACD;;;;4BAEI;AACH,aAAO,IAAI,cAAJ,CAAmB,KAAK,iBAAxB,CAAP;AACD;;;wBAEoB;AACnB,aAAO,KAAK,kBAAZ;AACD,K;sBAEqB,M,EAAM;AAC1B,MAAA,MAAM,CAAC,OAAP,CAAe,MAAf;AACA,MAAA,MAAM,CAAC,OAAP,CAAe,UAAC,GAAD,EAAQ;AACrB,QAAA,MAAM,CAAC,UAAP,CAAkB,GAAlB,EAAuB,YAAvB;AACD,OAFD;AAGA,WAAK,kBAAL,GAA0B,MAA1B;AACD;;;wBAEQ;AACP,aAAO,KAAK,iBAAZ;AACD;;;;;;AAGH,eAAe,cAAf","sourceRoot":"","sourcesContent":["/*\r\n  Информационное поле факта хозяйственной жизни 1(ИнфПолФХЖ1)\r\n*/\r\nimport assert from 'chai';\r\nimport TextInfoType from '../../standard_element/text_info/TextInfoType';\r\nimport TextInfoId from '../../standard_element/text_info/TextInfoId';\r\nimport TextInfoValue from '../../standard_element/text_info/TextInfoValue';\r\nclass InfoFieldFact1 {\r\n    static validate(values) {\r\n        const errorMsgs = [];\r\n        InfoFieldFact1.VOs.forEach((DomainVO) => {\r\n            values.forEach((val) => {\r\n                const msg = DomainVO.validate(val[DomainVO.field]);\r\n                if (msg !== undefined) {\r\n                    errorMsgs.push(msg);\r\n                }\r\n            });\r\n        });\r\n        return (errorMsgs.length > 0) ? 'ИнфПолФЧЖ1 заполнено неверно' : undefined;\r\n    }\r\n    static isValid(value) {\r\n        return !InfoFieldFact1.validate(value);\r\n    }\r\n    static get name() {\r\n        return 'Информационное поле';\r\n    }\r\n    static get field() {\r\n        return 'invoice.informationField.attributeValues';\r\n    }\r\n    static get VOs() {\r\n        return [TextInfoId, TextInfoValue];\r\n    }\r\n    constructor(informationFields) {\r\n        this.informationFields = informationFields;\r\n    }\r\n    clone() {\r\n        return new InfoFieldFact1(this.informationFields);\r\n    }\r\n    get informationFields() {\r\n        return this._informationFields;\r\n    }\r\n    set informationFields(values) {\r\n        assert.isArray(values);\r\n        values.forEach((val) => {\r\n            assert.instanceOf(val, TextInfoType);\r\n        });\r\n        this._informationFields = values;\r\n    }\r\n    get value() {\r\n        return this.informationFields;\r\n    }\r\n}\r\nexport default InfoFieldFact1;\r\n//# sourceMappingURL=InfoFieldFact1.js.map"]},"metadata":{},"sourceType":"module"}