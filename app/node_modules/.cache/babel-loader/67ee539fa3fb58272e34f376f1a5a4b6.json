{"ast":null,"code":"import _defineProperty from\"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _classCallCheck from\"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import React from'react';// TODO в import-ax ccылки на upd (хотя та же самая форма используется для счёта фактуры invoice_utd)\nimport Good from'@distate/core/dist/domain/documents/upd/vo/Good';import GoodName from'@distate/core/dist/domain/documents/upd/vo/good/Name';import GoodNum from'@distate/core/dist/domain/documents/upd/vo/good/Num';import Measurement from'@distate/core/dist/domain/documents/upd/vo/measurement/Measurement';import PricePerUnit from'@distate/core/dist/domain/documents/upd/vo/good/PricePerUnit';import Excise from'@distate/core/dist/domain/documents/upd/vo/good/Excise';import TaxRate from'@distate/core/dist/domain/common/document/TaxRate';import CostBeforeTax from'@distate/core/dist/domain/documents/upd/vo/good/CostBeforeTax';import TotalCostBeforeTax from'@distate/core/dist/domain/documents/upd/vo/total/TotalCostBeforeTax';import CostAfterTax from'@distate/core/dist/domain/documents/upd/vo/good/CostAfterTax';import TotalCostAfterTax from'@distate/core/dist/domain/documents/upd/vo/total/TotalCostAfterTax';import AmountOfTax from'@distate/core/dist/domain/documents/upd/vo/good/AmountOfTax';import TotalAmountOfTax from'@distate/core/dist/domain/documents/upd/vo/total/TotalAmountOfTax';import GoodInformation from'@distate/core/dist/domain/documents/upd/vo/good/GoodInformation';import Behavior from'./parameters/Behavior';import MeasurementCode from'@distate/core/dist/domain/documents/upd/vo/measurement/Code';import InfoFieldFact2 from'@distate/core/dist/domain/documents/upd/vo/good/InfoFieldFact2';import Appearance from'./parameters/Appearance';import{debounce}from'throttle-debounce';import get from'get-value';import{format as formatMoney}from'../../utils/MoneyUtil';import InfoFieldModal from'../../pages/upd/forms/InfoFieldModal';import GoodTraceabilityInfo from'@distate/core/dist/domain/documents/upd/vo/good/GoodTraceabilityInfo';import GoodTraceabilityInfoModal from'../../pages/upd/forms/GoodTraceabilityInfoModal';import GoodInformationModal from'../../pages/upd/forms/GoodInformationModal';var InvoiceTableForm=/*#__PURE__*/function(){function InvoiceTableForm(){_classCallCheck(this,InvoiceTableForm);}_createClass(InvoiceTableForm,null,[{key:\"build\",value:function build(builder,serverResponse,responsePathEntry){var _behaviors,_appearance;var elementsMap={};var createTableRow=function createTableRow(elementsMap,builder){return function(DomainVO,buildFn){var aggregatedBy=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;elementsMap[DomainVO.field]={build:buildFn.bind(builder)};if(aggregatedBy){elementsMap[DomainVO.field].aggregatedBy=aggregatedBy;}};};var createRow=createTableRow(elementsMap,builder);createRow(GoodName,builder.buildArrayGroupInput);createRow(GoodNum,builder.buildArrayGroupInput);createRow(Measurement,builder.buildArrayGroupAutocomplete);createRow(PricePerUnit,builder.buildArrayGroupInput);createRow(Excise,builder.buildArrayGroupInput);createRow(TaxRate,builder.buildArrayGroupSelect);createRow(CostBeforeTax,builder.buildArrayGroupInput,{build:builder.buildTableInput.bind(builder),domain:TotalCostBeforeTax});createRow(CostAfterTax,builder.buildArrayGroupInput,{build:builder.buildTableInput.bind(builder),domain:TotalCostAfterTax});createRow(AmountOfTax,builder.buildArrayGroupInput,{build:builder.buildTableInput.bind(builder),domain:TotalAmountOfTax});createRow(GoodInformation,builder.buildArrayGroupComponent(/*#__PURE__*/React.createElement(GoodInformationModal,{setDataToComponentState:builder.setDataToComponentState})));createRow(InfoFieldFact2,builder.buildArrayGroupComponent(/*#__PURE__*/React.createElement(InfoFieldModal,{setDataToComponentState:builder.setDataToComponentState})));createRow(GoodTraceabilityInfo,builder.buildArrayGroupComponent(/*#__PURE__*/React.createElement(GoodTraceabilityInfoModal,{setDataToComponentState:builder.setDataToComponentState})));var footerConfig={labels:['Итого:'],initialFieldDomain:{value:get(serverResponse,\"\".concat(responsePathEntry,\".table.total\"))}};var defaultTableFieldBehavior=new Behavior({showErrorMsg:false});var recalculate=function recalculate(index){var isRemove=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;debounce(50,true,function(){var prefix=\"\".concat(Good.field,\"[\").concat(index,\"]\");var num=builder.formApi.getValue(\"\".concat(prefix,\".\").concat(GoodNum.field));var price=builder.formApi.getValue(\"\".concat(prefix,\".\").concat(PricePerUnit.field));var taxRate=builder.formApi.getValue(\"\".concat(prefix,\".\").concat(TaxRate.field));var calculateTax=TaxRate.getCalculate(taxRate);var cost=num*price;var amountOfTax=calculateTax?calculateTax(cost):0;var costAfterTax=cost+amountOfTax;builder.formApi.setValue(\"\".concat(prefix,\".\").concat(CostBeforeTax.field),cost);builder.formApi.setValue(\"\".concat(prefix,\".\").concat(AmountOfTax.field),amountOfTax);builder.formApi.setValue(\"\".concat(prefix,\".\").concat(CostAfterTax.field),costAfterTax);var goods=builder.formApi.getValue(Good.field);var sumCostBeforeTax=function sumCostBeforeTax(acc,good){return acc+Number(good.costBeforeTax);};var sumCostAfterTax=function sumCostAfterTax(acc,good){return acc+Number(good.costAfterTax);};var sumAmountOfTax=function sumAmountOfTax(acc,good){return acc+Number(good.amountOfTax);};if(isRemove===true){goods=goods.filter(function(good,ind){return ind!==index;});}var totalCostBeforeTax=formatMoney(goods.reduce(sumCostBeforeTax,0));var totalCostAfterTax=formatMoney(goods.reduce(sumCostAfterTax,0));var totalAmountOfTax=formatMoney(goods.reduce(sumAmountOfTax,0));builder.formApi.setValue(\"\".concat(TotalCostBeforeTax.field),totalCostBeforeTax);builder.formApi.setValue(\"\".concat(TotalCostAfterTax.field),totalCostAfterTax);builder.formApi.setValue(\"\".concat(TotalAmountOfTax.field),totalAmountOfTax);})();};var recalcBehavior=Behavior.mixin(defaultTableFieldBehavior,{onChange:recalculate});var measurementBehavior=Behavior.mixin(defaultTableFieldBehavior,{scope:MeasurementCode.field,componentStateAdditionalDataConfig:[{objectPath:'measurementCode',acSelector:'code'},{objectPath:'information.measurementTitle',acSelector:'title'}]});var behaviors=(_behaviors={},_defineProperty(_behaviors,GoodName.field,defaultTableFieldBehavior),_defineProperty(_behaviors,GoodNum.field,recalcBehavior),_defineProperty(_behaviors,Measurement.field,measurementBehavior),_defineProperty(_behaviors,PricePerUnit.field,recalcBehavior),_defineProperty(_behaviors,Excise.field,defaultTableFieldBehavior),_defineProperty(_behaviors,TaxRate.field,recalcBehavior),_defineProperty(_behaviors,CostBeforeTax.field,defaultTableFieldBehavior),_defineProperty(_behaviors,CostAfterTax.field,defaultTableFieldBehavior),_defineProperty(_behaviors,AmountOfTax.field,defaultTableFieldBehavior),_defineProperty(_behaviors,GoodTraceabilityInfo.field,new Behavior({customFieldName:'information'})),_behaviors);var appearance=(_appearance={},_defineProperty(_appearance,GoodName.field,new Appearance({width:300})),_defineProperty(_appearance,Measurement.field,new Appearance({width:140})),_defineProperty(_appearance,GoodNum.field,new Appearance({width:60})),_defineProperty(_appearance,Excise.field,new Appearance({width:60})),_defineProperty(_appearance,TaxRate.field,new Appearance({width:100})),_defineProperty(_appearance,GoodInformation.field,new Appearance({width:30,noCaption:true})),_defineProperty(_appearance,InfoFieldFact2.field,new Appearance({width:30,noCaption:true})),_defineProperty(_appearance,GoodTraceabilityInfo.field,new Appearance({width:30,noCaption:true})),_appearance);builder.buildTable(Good,elementsMap,footerConfig,behaviors,appearance,Behavior.mixin(recalcBehavior,{initialFieldDomain:{value:get(serverResponse,\"\".concat(responsePathEntry,\".table\"))}}));}}]);return InvoiceTableForm;}();export default InvoiceTableForm;","map":{"version":3,"sources":["C:/Users/Hovsep/Desktop/local/diflow_react/packages/app/src/common/form/InvoiceTableForm.js"],"names":["React","Good","GoodName","GoodNum","Measurement","PricePerUnit","Excise","TaxRate","CostBeforeTax","TotalCostBeforeTax","CostAfterTax","TotalCostAfterTax","AmountOfTax","TotalAmountOfTax","GoodInformation","Behavior","MeasurementCode","InfoFieldFact2","Appearance","debounce","get","format","formatMoney","InfoFieldModal","GoodTraceabilityInfo","GoodTraceabilityInfoModal","GoodInformationModal","InvoiceTableForm","builder","serverResponse","responsePathEntry","elementsMap","createTableRow","DomainVO","buildFn","aggregatedBy","field","build","bind","createRow","buildArrayGroupInput","buildArrayGroupAutocomplete","buildArrayGroupSelect","buildTableInput","domain","buildArrayGroupComponent","setDataToComponentState","footerConfig","labels","initialFieldDomain","value","defaultTableFieldBehavior","showErrorMsg","recalculate","index","isRemove","prefix","num","formApi","getValue","price","taxRate","calculateTax","getCalculate","cost","amountOfTax","costAfterTax","setValue","goods","sumCostBeforeTax","acc","good","Number","costBeforeTax","sumCostAfterTax","sumAmountOfTax","filter","ind","totalCostBeforeTax","reduce","totalCostAfterTax","totalAmountOfTax","recalcBehavior","mixin","onChange","measurementBehavior","scope","componentStateAdditionalDataConfig","objectPath","acSelector","behaviors","customFieldName","appearance","width","noCaption","buildTable"],"mappings":"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","sourcesContent":["import React from 'react';\r\n// TODO в import-ax ccылки на upd (хотя та же самая форма используется для счёта фактуры invoice_utd)\r\nimport Good from '@distate/core/dist/domain/documents/upd/vo/Good';\r\nimport GoodName from '@distate/core/dist/domain/documents/upd/vo/good/Name';\r\nimport GoodNum from '@distate/core/dist/domain/documents/upd/vo/good/Num';\r\nimport Measurement from '@distate/core/dist/domain/documents/upd/vo/measurement/Measurement';\r\nimport PricePerUnit from '@distate/core/dist/domain/documents/upd/vo/good/PricePerUnit';\r\nimport Excise from '@distate/core/dist/domain/documents/upd/vo/good/Excise';\r\nimport TaxRate from '@distate/core/dist/domain/common/document/TaxRate';\r\nimport CostBeforeTax from '@distate/core/dist/domain/documents/upd/vo/good/CostBeforeTax';\r\nimport TotalCostBeforeTax from '@distate/core/dist/domain/documents/upd/vo/total/TotalCostBeforeTax';\r\nimport CostAfterTax from '@distate/core/dist/domain/documents/upd/vo/good/CostAfterTax';\r\nimport TotalCostAfterTax from '@distate/core/dist/domain/documents/upd/vo/total/TotalCostAfterTax';\r\nimport AmountOfTax from '@distate/core/dist/domain/documents/upd/vo/good/AmountOfTax';\r\nimport TotalAmountOfTax from '@distate/core/dist/domain/documents/upd/vo/total/TotalAmountOfTax';\r\nimport GoodInformation from '@distate/core/dist/domain/documents/upd/vo/good/GoodInformation';\r\nimport Behavior from './parameters/Behavior';\r\nimport MeasurementCode from '@distate/core/dist/domain/documents/upd/vo/measurement/Code';\r\nimport InfoFieldFact2 from '@distate/core/dist/domain/documents/upd/vo/good/InfoFieldFact2';\r\nimport Appearance from './parameters/Appearance';\r\nimport { debounce } from 'throttle-debounce';\r\nimport get from 'get-value';\r\nimport { format as formatMoney } from '../../utils/MoneyUtil';\r\nimport InfoFieldModal from '../../pages/upd/forms/InfoFieldModal';\r\nimport GoodTraceabilityInfo from '@distate/core/dist/domain/documents/upd/vo/good/GoodTraceabilityInfo';\r\nimport GoodTraceabilityInfoModal from '../../pages/upd/forms/GoodTraceabilityInfoModal';\r\nimport GoodInformationModal from '../../pages/upd/forms/GoodInformationModal';\r\n\r\nclass InvoiceTableForm {\r\n  static build(builder, serverResponse, responsePathEntry) {\r\n    const elementsMap = {};\r\n    const createTableRow = (elementsMap, builder) => (DomainVO, buildFn, aggregatedBy = null) => {\r\n      elementsMap[DomainVO.field] = { build: buildFn.bind(builder) };\r\n      if (aggregatedBy) {\r\n        elementsMap[DomainVO.field].aggregatedBy = aggregatedBy;\r\n      }\r\n    };\r\n    const createRow = createTableRow(elementsMap, builder);\r\n    createRow(GoodName, builder.buildArrayGroupInput);\r\n    createRow(GoodNum, builder.buildArrayGroupInput);\r\n    createRow(Measurement, builder.buildArrayGroupAutocomplete);\r\n    createRow(PricePerUnit, builder.buildArrayGroupInput);\r\n    createRow(Excise, builder.buildArrayGroupInput);\r\n    createRow(TaxRate, builder.buildArrayGroupSelect);\r\n    createRow(CostBeforeTax, builder.buildArrayGroupInput, {\r\n      build: builder.buildTableInput.bind(builder),\r\n      domain: TotalCostBeforeTax\r\n    });\r\n    createRow(CostAfterTax, builder.buildArrayGroupInput, {\r\n      build: builder.buildTableInput.bind(builder),\r\n      domain: TotalCostAfterTax\r\n    });\r\n    createRow(AmountOfTax, builder.buildArrayGroupInput, {\r\n      build: builder.buildTableInput.bind(builder),\r\n      domain: TotalAmountOfTax\r\n    });\r\n\r\n    createRow(\r\n      GoodInformation,\r\n      builder.buildArrayGroupComponent(\r\n        <GoodInformationModal setDataToComponentState={builder.setDataToComponentState} />\r\n      )\r\n    );\r\n\r\n    createRow(\r\n      InfoFieldFact2,\r\n      builder.buildArrayGroupComponent(\r\n        <InfoFieldModal setDataToComponentState={builder.setDataToComponentState} />\r\n      )\r\n    );\r\n\r\n    createRow(\r\n      GoodTraceabilityInfo,\r\n      builder.buildArrayGroupComponent(\r\n        <GoodTraceabilityInfoModal setDataToComponentState={builder.setDataToComponentState} />\r\n      )\r\n    );\r\n\r\n    const footerConfig = {\r\n      labels: ['Итого:'],\r\n      initialFieldDomain: {\r\n        value: get(serverResponse, `${responsePathEntry}.table.total`)\r\n      }\r\n    };\r\n    const defaultTableFieldBehavior = new Behavior({ showErrorMsg: false });\r\n\r\n    const recalculate = (index, isRemove = false) => {\r\n      debounce(50, true, () => {\r\n        const prefix = `${Good.field}[${index}]`;\r\n        const num = builder.formApi.getValue(`${prefix}.${GoodNum.field}`);\r\n        const price = builder.formApi.getValue(`${prefix}.${PricePerUnit.field}`);\r\n        const taxRate = builder.formApi.getValue(`${prefix}.${TaxRate.field}`);\r\n        const calculateTax = TaxRate.getCalculate(taxRate);\r\n\r\n        const cost = num * price;\r\n        const amountOfTax = calculateTax ? calculateTax(cost) : 0;\r\n        const costAfterTax = cost + amountOfTax;\r\n        builder.formApi.setValue(`${prefix}.${CostBeforeTax.field}`, cost);\r\n        builder.formApi.setValue(`${prefix}.${AmountOfTax.field}`, amountOfTax);\r\n        builder.formApi.setValue(`${prefix}.${CostAfterTax.field}`, costAfterTax);\r\n\r\n        let goods = builder.formApi.getValue(Good.field);\r\n        const sumCostBeforeTax = (acc, good) => acc + Number(good.costBeforeTax);\r\n        const sumCostAfterTax = (acc, good) => acc + Number(good.costAfterTax);\r\n        const sumAmountOfTax = (acc, good) => acc + Number(good.amountOfTax);\r\n\r\n        if (isRemove === true) {\r\n          goods = goods.filter((good, ind) => ind !== index);\r\n        }\r\n\r\n        const totalCostBeforeTax = formatMoney(goods.reduce(sumCostBeforeTax, 0));\r\n        const totalCostAfterTax = formatMoney(goods.reduce(sumCostAfterTax, 0));\r\n        const totalAmountOfTax = formatMoney(goods.reduce(sumAmountOfTax, 0));\r\n\r\n        builder.formApi.setValue(`${TotalCostBeforeTax.field}`, totalCostBeforeTax);\r\n        builder.formApi.setValue(`${TotalCostAfterTax.field}`, totalCostAfterTax);\r\n        builder.formApi.setValue(`${TotalAmountOfTax.field}`, totalAmountOfTax);\r\n      })();\r\n    };\r\n\r\n    const recalcBehavior = Behavior.mixin(defaultTableFieldBehavior, { onChange: recalculate });\r\n\r\n    const measurementBehavior = Behavior.mixin(defaultTableFieldBehavior, {\r\n      scope: MeasurementCode.field,\r\n      componentStateAdditionalDataConfig: [\r\n        {\r\n          objectPath: 'measurementCode',\r\n          acSelector: 'code'\r\n        },\r\n        {\r\n          objectPath: 'information.measurementTitle',\r\n          acSelector: 'title'\r\n        }\r\n      ]\r\n    });\r\n    const behaviors = {\r\n      [GoodName.field]: defaultTableFieldBehavior,\r\n      [GoodNum.field]: recalcBehavior,\r\n      [Measurement.field]: measurementBehavior,\r\n      [PricePerUnit.field]: recalcBehavior,\r\n      [Excise.field]: defaultTableFieldBehavior,\r\n      [TaxRate.field]: recalcBehavior,\r\n      [CostBeforeTax.field]: defaultTableFieldBehavior,\r\n      [CostAfterTax.field]: defaultTableFieldBehavior,\r\n      [AmountOfTax.field]: defaultTableFieldBehavior,\r\n      [GoodTraceabilityInfo.field]: new Behavior({\r\n        customFieldName: 'information'\r\n      })\r\n    };\r\n    const appearance = {\r\n      [GoodName.field]: new Appearance({ width: 300 }),\r\n      [Measurement.field]: new Appearance({ width: 140 }),\r\n      [GoodNum.field]: new Appearance({ width: 60 }),\r\n      [Excise.field]: new Appearance({ width: 60 }),\r\n      [TaxRate.field]: new Appearance({ width: 100 }),\r\n      [GoodInformation.field]: new Appearance({ width: 30, noCaption: true }),\r\n      [InfoFieldFact2.field]: new Appearance({ width: 30, noCaption: true }),\r\n      [GoodTraceabilityInfo.field]: new Appearance({ width: 30, noCaption: true })\r\n    };\r\n    builder.buildTable(\r\n      Good,\r\n      elementsMap,\r\n      footerConfig,\r\n      behaviors,\r\n      appearance,\r\n      Behavior.mixin(recalcBehavior, {\r\n        initialFieldDomain: {\r\n          value: get(serverResponse, `${responsePathEntry}.table`)\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n\r\nexport default InvoiceTableForm;\r\n"]},"metadata":{},"sourceType":"module"}