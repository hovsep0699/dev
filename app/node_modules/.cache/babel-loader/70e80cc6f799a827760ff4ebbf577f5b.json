{"ast":null,"code":"import DN from './DN';\nvar oids = [{\n  oid: '1.2.643.3.131.1.1',\n  short: 'INN',\n  full: 'ИНН'\n}, {\n  oid: '1.2.643.100.1',\n  short: 'OGRN',\n  full: 'ОГРН'\n}, {\n  oid: '1.2.643.100.5',\n  short: 'OGRNIP',\n  full: 'ОГРНИП'\n}, {\n  oid: '1.2.643.100.3',\n  short: 'SNILS',\n  full: 'СНИЛС'\n}, {\n  oid: '1.2.840.113549.1.9.1',\n  short: 'E',\n  full: 'emailAddress'\n}, {\n  oid: '2.5.4.3',\n  short: 'CN',\n  full: 'commonName'\n}, {\n  oid: '2.5.4.4',\n  short: 'SN',\n  full: 'surname'\n}, {\n  oid: '2.5.4.42',\n  short: 'G',\n  full: 'givenName'\n}, {\n  oid: '2.5.4.6',\n  short: 'C',\n  full: 'countryName'\n}, {\n  oid: '2.5.4.7',\n  short: 'L',\n  full: 'localityName'\n}, {\n  oid: '2.5.4.8',\n  short: 'S',\n  full: 'stateOrProvinceName'\n}, {\n  oid: '2.5.4.9',\n  short: 'STREET',\n  full: 'streetAddress'\n}, {\n  oid: '2.5.4.10',\n  short: 'O',\n  full: 'organizationName'\n}, {\n  oid: '2.5.4.11',\n  short: 'OU',\n  full: 'organizationalUnitName'\n}, {\n  oid: '2.5.4.12',\n  short: 'T',\n  full: 'title'\n} //  { oid: '2.5.4.16',             short: '?',      full: 'postalAddress' },\n];\n/**\n * Перевод кирилицы в латиницу в ключах объекта с информацией о сертификате\n * @param {DN} dn \n * @returns {DN}\n */\n\nexport function convertDN(dn) {\n  var result = new DN();\n\n  var _loop = function _loop() {\n    var field = _Object$keys[_i];\n    var oid = oids.find(function (item) {\n      return item.oid == field || item.full == field;\n    });\n\n    if (oid) {\n      result[oid.short] = dn[field];\n    } else {\n      result[field] = dn[field];\n    }\n  };\n\n  for (var _i = 0, _Object$keys = Object.keys(dn); _i < _Object$keys.length; _i++) {\n    _loop();\n  }\n\n  return result;\n}","map":{"version":3,"sources":["C:/Users/Hovsep/Desktop/local/diflow_react/node_modules/ruscryptojs/src/helpers.js"],"names":["DN","oids","oid","short","full","convertDN","dn","result","field","find","item","Object","keys"],"mappings":"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","sourcesContent":["import DN from './DN';\n\nconst oids = [\n  { oid: '1.2.643.3.131.1.1',    short: 'INN',    full: 'ИНН' },\n  { oid: '1.2.643.100.1',        short: 'OGRN',   full: 'ОГРН' },\n  { oid: '1.2.643.100.5',        short: 'OGRNIP', full: 'ОГРНИП' },\n  { oid: '1.2.643.100.3',        short: 'SNILS',  full: 'СНИЛС' },\n  { oid: '1.2.840.113549.1.9.1', short: 'E',      full: 'emailAddress' },\n  { oid: '2.5.4.3',              short: 'CN',     full: 'commonName' },\n  { oid: '2.5.4.4',              short: 'SN',     full: 'surname' },\n  { oid: '2.5.4.42',             short: 'G',      full: 'givenName' },\n  { oid: '2.5.4.6',              short: 'C',      full: 'countryName' },\n  { oid: '2.5.4.7',              short: 'L',      full: 'localityName' },\n  { oid: '2.5.4.8',              short: 'S',      full: 'stateOrProvinceName' },\n  { oid: '2.5.4.9',              short: 'STREET', full: 'streetAddress' },\n  { oid: '2.5.4.10',             short: 'O',      full: 'organizationName' },\n  { oid: '2.5.4.11',             short: 'OU',     full: 'organizationalUnitName' },\n  { oid: '2.5.4.12',             short: 'T',      full: 'title' },\n//  { oid: '2.5.4.16',             short: '?',      full: 'postalAddress' },\n];\n\n/**\n * Перевод кирилицы в латиницу в ключах объекта с информацией о сертификате\n * @param {DN} dn \n * @returns {DN}\n */\nexport function convertDN(dn) {\n  const result = new DN;  \n  for (const field of Object.keys(dn)) {\n    const oid = oids.find(item => item.oid == field || item.full == field);\n    if (oid) {\n      result[oid.short] = dn[field];\n    }\n    else {\n      result[field] = dn[field];\n    }\n  }\n  return result;\n}"]},"metadata":{},"sourceType":"module"}