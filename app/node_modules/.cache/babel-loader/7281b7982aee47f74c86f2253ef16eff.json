{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(getGroupInfoEffect),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(getGroupInfoWorker);import{takeLatest,put}from'redux-saga/effects';import{getGroupContractorsInfo,setGroupContractorsInfo}from'../actions';import{Flash}from'../../../../common/flash/Flash';import{ContractorApiServices}from'../../services/contractors.api';export function getGroupInfoEffect(){return _regeneratorRuntime.wrap(function getGroupInfoEffect$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return takeLatest(getGroupContractorsInfo,getGroupInfoWorker);case 2:case\"end\":return _context.stop();}}},_marked);}/** Получение информации о группе контрагентов */function getGroupInfoWorker(_ref){var id,legalEntityInfo,naturalEntityInfo,employeeInfo,message;return _regeneratorRuntime.wrap(function getGroupInfoWorker$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:id=_ref.payload;_context2.prev=1;_context2.next=4;return ContractorApiServices.getLegalEntityGroup({id:id,inverseJoin:true});case 4:legalEntityInfo=_context2.sent;_context2.next=7;return ContractorApiServices.getNaturalEntityGroup({id:id,inverseJoin:true});case 7:naturalEntityInfo=_context2.sent;_context2.next=10;return ContractorApiServices.getEmployeeGroup({id:id,inverseJoin:true});case 10:employeeInfo=_context2.sent;_context2.next=13;return put(setGroupContractorsInfo({groupInfo:{legalEntityInfo:legalEntityInfo,naturalEntityInfo:naturalEntityInfo,employeeInfo:employeeInfo}}));case 13:_context2.next=20;break;case 15:_context2.prev=15;_context2.t0=_context2[\"catch\"](1);message=_context2.t0.message;_context2.next=20;return Flash.error(message||'Возникла ошибка');case 20:case\"end\":return _context2.stop();}}},_marked2,null,[[1,15]]);}","map":{"version":3,"sources":["C:/Users/Hovsep/Desktop/local/diflow_react/packages/app/src/pages/contractors/store/sagas/getGroupInfo.effect.ts"],"names":["getGroupInfoEffect","getGroupInfoWorker","takeLatest","put","getGroupContractorsInfo","setGroupContractorsInfo","Flash","ContractorApiServices","id","payload","getLegalEntityGroup","inverseJoin","legalEntityInfo","getNaturalEntityGroup","naturalEntityInfo","getEmployeeGroup","employeeInfo","groupInfo","message","error"],"mappings":"oNAMiBA,kB,iDAKPC,kB,EAXV,OAASC,UAAT,CAAqBC,GAArB,KAAgC,oBAAhC,CAEA,OAASC,uBAAT,CAAkCC,uBAAlC,KAAiE,YAAjE,CACA,OAASC,KAAT,KAAsB,gCAAtB,CACA,OAASC,qBAAT,KAAsC,gCAAtC,CAEA,MAAO,SAAUP,CAAAA,kBAAV,8IACL,MAAME,CAAAA,UAAU,CAACE,uBAAD,CAA0BH,kBAA1B,CAAhB,CADK,sDAIP,iDACA,QAAUA,CAAAA,kBAAV,mMAAwCO,EAAxC,MAA+BC,OAA/B,mCAE4B,MAAMF,CAAAA,qBAAqB,CAACG,mBAAtB,CAA0C,CACtEF,EAAE,CAAFA,EADsE,CAEtEG,WAAW,CAAE,IAFyD,CAA1C,CAAN,CAF5B,OAEUC,eAFV,iCAM8B,MAAML,CAAAA,qBAAqB,CAACM,qBAAtB,CAA4C,CAC1EL,EAAE,CAAFA,EAD0E,CAE1EG,WAAW,CAAE,IAF6D,CAA5C,CAAN,CAN9B,OAMUG,iBANV,kCAUyB,MAAMP,CAAAA,qBAAqB,CAACQ,gBAAtB,CAAuC,CAAEP,EAAE,CAAFA,EAAF,CAAMG,WAAW,CAAE,IAAnB,CAAvC,CAAN,CAVzB,QAUUK,YAVV,kCAWI,MAAMb,CAAAA,GAAG,CACPE,uBAAuB,CAAC,CACtBY,SAAS,CAAE,CACTL,eAAe,CAAEA,eADR,CAETE,iBAAiB,CAAEA,iBAFV,CAGTE,YAAY,CAAEA,YAHL,CADW,CAAD,CADhB,CAAT,CAXJ,6FAoBaE,OApBb,cAoBaA,OApBb,mBAqBI,MAAMZ,CAAAA,KAAK,CAACa,KAAN,CAAYD,OAAO,EAAI,iBAAvB,CAAN,CArBJ","sourcesContent":["import { takeLatest, put } from 'redux-saga/effects';\r\n\r\nimport { getGroupContractorsInfo, setGroupContractorsInfo } from '../actions';\r\nimport { Flash } from '../../../../common/flash/Flash';\r\nimport { ContractorApiServices } from '../../services/contractors.api';\r\n\r\nexport function* getGroupInfoEffect() {\r\n  yield takeLatest(getGroupContractorsInfo, getGroupInfoWorker);\r\n}\r\n\r\n/** Получение информации о группе контрагентов */\r\nfunction* getGroupInfoWorker({ payload: id }: { payload: number }) {\r\n  try {\r\n    const legalEntityInfo = yield ContractorApiServices.getLegalEntityGroup({\r\n      id,\r\n      inverseJoin: true\r\n    });\r\n    const naturalEntityInfo = yield ContractorApiServices.getNaturalEntityGroup({\r\n      id,\r\n      inverseJoin: true\r\n    });\r\n    const employeeInfo = yield ContractorApiServices.getEmployeeGroup({ id, inverseJoin: true });\r\n    yield put(\r\n      setGroupContractorsInfo({\r\n        groupInfo: {\r\n          legalEntityInfo: legalEntityInfo,\r\n          naturalEntityInfo: naturalEntityInfo,\r\n          employeeInfo: employeeInfo\r\n        }\r\n      })\r\n    );\r\n  } catch ({ message }) {\r\n    yield Flash.error(message || 'Возникла ошибка');\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}