{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport Environment from '../Environment';\nimport DiError, { AUTOCOMPLETE } from '../error/Error';\nimport createError from '../error/ErrorFactory';\n\nvar AutocompleteService = /*#__PURE__*/function () {\n  function AutocompleteService() {\n    _classCallCheck(this, AutocompleteService);\n  }\n\n  _createClass(AutocompleteService, [{\n    key: \"handleUserInput\",\n    value: function handleUserInput(DomainVO, callback, wrongValueMsg, notAccuratelyValueMsg, userInput) {\n      return function (data) {\n        var verifiedRows = userInput && data.rows.filter(function (item) {\n          return item.title === userInput;\n        });\n        var hasUniqueRow = data.rows.length === 1;\n        var hasVerifiedUniqueRow = verifiedRows && verifiedRows.length === 1;\n        var isUserInputWrongValue = !data.rows.length;\n        var isUserTypeValueNotAccurately = data.rows.length > 1;\n        var isUserTypeValueAccurately = hasUniqueRow || hasVerifiedUniqueRow;\n\n        if (isUserTypeValueAccurately) {\n          var rowDataToProcess = hasVerifiedUniqueRow ? verifiedRows[0] : data.rows[0];\n\n          if (callback) {\n            return callback(rowDataToProcess);\n          }\n\n          return new DomainVO(rowDataToProcess);\n        }\n\n        var messageForDeveloper = 'Неизвестная ошибка. Дополните код AutocompleteService.';\n        var messageForUser = '';\n\n        if (isUserInputWrongValue) {\n          messageForDeveloper = \"\".concat(DomainVO.field, \" - \\u041D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E \\u043D\\u0438 \\u043E\\u0434\\u043D\\u043E\\u0433\\u043E \\u0441\\u043E\\u0432\\u043F\\u0430\\u0434\\u0435\\u043D\\u0438\\u044F\");\n          if (wrongValueMsg) messageForUser = wrongValueMsg;\n        }\n\n        if (isUserTypeValueNotAccurately) {\n          messageForDeveloper = \"\".concat(DomainVO.field, \" - \\u0411\\u044B\\u043B\\u043E \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E \\u043D\\u0435\\u0441\\u043A\\u043E\\u043B\\u044C\\u043A\\u043E \\u0441\\u043E\\u0432\\u043F\\u0430\\u0434\\u0435\\u043D\\u0438\\u0439. \\u041F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044E \\u043D\\u0435\\u043E\\u0431\\u0445\\u043E\\u0434\\u0438\\u043C\\u043E \\u0443\\u0442\\u043E\\u0447\\u043D\\u0438\\u0442\\u044C \\u0437\\u0430\\u043F\\u0440\\u043E\\u0441\");\n          if (notAccuratelyValueMsg) messageForUser = notAccuratelyValueMsg;\n        }\n\n        if (messageForUser) {\n          throw new DiError(AUTOCOMPLETE, messageForUser, messageForDeveloper);\n        } else {\n          throw createError(AUTOCOMPLETE, messageForDeveloper);\n        }\n      };\n    }\n  }, {\n    key: \"currency\",\n    get: function get() {\n      return {\n        field: 'title',\n        request: function request() {\n          var currencyTitle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n          return Environment.getAutocompleteGateway().getCurrencyByTitle(currencyTitle);\n        }\n      };\n    }\n  }, {\n    key: \"currencyByCode\",\n    get: function get() {\n      return {\n        field: 'digital_code',\n        request: function request() {\n          var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n          return Environment.getAutocompleteGateway().getCurrencyByCode(code);\n        }\n      };\n    }\n  }, {\n    key: \"measurement\",\n    get: function get() {\n      return {\n        field: 'title',\n        request: function request() {\n          var measurementTitle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n          return Environment.getAutocompleteGateway().getMeasurementByTitle(measurementTitle);\n        }\n      };\n    }\n  }, {\n    key: \"measurementByCode\",\n    get: function get() {\n      return {\n        field: 'code',\n        request: function request() {\n          var measurementCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n          return Environment.getAutocompleteGateway().getMeasurementByCode(measurementCode);\n        }\n      };\n    }\n  }, {\n    key: \"country\",\n    get: function get() {\n      return {\n        field: 'title',\n        request: function request() {\n          var countryTitle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n          return Environment.getAutocompleteGateway().getCountryByTitle(countryTitle);\n        }\n      };\n    }\n  }, {\n    key: \"recipient\",\n    get: function get() {\n      var params = {\n        isActive: 1,\n        type: 'division'\n      };\n      return {\n        field: 'title',\n        request: function request() {\n          var companyInfo = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n          params.all = companyInfo;\n          return Environment.getAutocompleteGateway().getRecipient(params);\n        }\n      };\n    }\n  }, {\n    key: \"participant\",\n    get: function get() {\n      var params = {\n        isActive: 1,\n        type: 'division',\n        limit: 12\n      };\n      return {\n        field: 'name',\n        request: function request() {\n          return Environment.getAutocompleteGateway().getParticipant(params);\n        }\n      };\n    }\n  }, {\n    key: \"region\",\n    get: function get() {\n      return {\n        field: 'title',\n        request: function request() {\n          var regionStr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n          return Environment.getAddressGateway().getRegionByTitle(regionStr);\n        }\n      };\n    }\n  }, {\n    key: \"bank\",\n    get: function get() {\n      return {\n        field: 'bik',\n        request: function request() {\n          var bik = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n          return Environment.getBankGateway().getBankByBIK(bik);\n        }\n      };\n    }\n  }, {\n    key: \"ifns\",\n    get: function get() {\n      return {\n        field: 'code',\n        request: function request() {\n          var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n          return Environment.getIFNSGateway().getIFNSByCode(code);\n        }\n      };\n    }\n  }]);\n\n  return AutocompleteService;\n}();\n\nvar instance = new AutocompleteService();\nexport default instance;","map":{"version":3,"sources":["../../../src/application/autocomplete/AutocompleteService.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import Environment from '../Environment';\r\nimport DiError, { AUTOCOMPLETE } from '../error/Error';\r\nimport createError from '../error/ErrorFactory';\r\nclass AutocompleteService {\r\n    handleUserInput(DomainVO, callback, wrongValueMsg, notAccuratelyValueMsg, userInput) {\r\n        return (data) => {\r\n            const verifiedRows = userInput && data.rows.filter(item => item.title === userInput);\r\n            const hasUniqueRow = data.rows.length === 1;\r\n            const hasVerifiedUniqueRow = verifiedRows && (verifiedRows.length === 1);\r\n            const isUserInputWrongValue = !data.rows.length;\r\n            const isUserTypeValueNotAccurately = data.rows.length > 1;\r\n            const isUserTypeValueAccurately = hasUniqueRow || hasVerifiedUniqueRow;\r\n            if (isUserTypeValueAccurately) {\r\n                const rowDataToProcess = hasVerifiedUniqueRow ? verifiedRows[0] : data.rows[0];\r\n                if (callback) {\r\n                    return callback(rowDataToProcess);\r\n                }\r\n                return new DomainVO(rowDataToProcess);\r\n            }\r\n            let messageForDeveloper = 'Неизвестная ошибка. Дополните код AutocompleteService.';\r\n            let messageForUser = '';\r\n            if (isUserInputWrongValue) {\r\n                messageForDeveloper = `${DomainVO.field} - Не найдено ни одного совпадения`;\r\n                if (wrongValueMsg)\r\n                    messageForUser = wrongValueMsg;\r\n            }\r\n            if (isUserTypeValueNotAccurately) {\r\n                messageForDeveloper = `${DomainVO.field} - Было найдено несколько совпадений. Пользователю необходимо уточнить запрос`;\r\n                if (notAccuratelyValueMsg)\r\n                    messageForUser = notAccuratelyValueMsg;\r\n            }\r\n            if (messageForUser) {\r\n                throw new DiError(AUTOCOMPLETE, messageForUser, messageForDeveloper);\r\n            }\r\n            else {\r\n                throw createError(AUTOCOMPLETE, messageForDeveloper);\r\n            }\r\n        };\r\n    }\r\n    get currency() {\r\n        return {\r\n            field: 'title',\r\n            request: (currencyTitle = '') => Environment.getAutocompleteGateway().getCurrencyByTitle(currencyTitle)\r\n        };\r\n    }\r\n    get currencyByCode() {\r\n        return {\r\n            field: 'digital_code',\r\n            request: (code = '') => Environment.getAutocompleteGateway().getCurrencyByCode(code)\r\n        };\r\n    }\r\n    get measurement() {\r\n        return {\r\n            field: 'title',\r\n            request: (measurementTitle = '') => Environment.getAutocompleteGateway().getMeasurementByTitle(measurementTitle)\r\n        };\r\n    }\r\n    get measurementByCode() {\r\n        return {\r\n            field: 'code',\r\n            request: (measurementCode = '') => Environment.getAutocompleteGateway().getMeasurementByCode(measurementCode)\r\n        };\r\n    }\r\n    get country() {\r\n        return {\r\n            field: 'title',\r\n            request: (countryTitle = '') => Environment.getAutocompleteGateway().getCountryByTitle(countryTitle)\r\n        };\r\n    }\r\n    get recipient() {\r\n        const params = {\r\n            isActive: 1,\r\n            type: 'division'\r\n        };\r\n        return {\r\n            field: 'title',\r\n            request: (companyInfo = '') => {\r\n                params.all = companyInfo;\r\n                return Environment.getAutocompleteGateway()\r\n                    .getRecipient(params);\r\n            }\r\n        };\r\n    }\r\n    get participant() {\r\n        const params = {\r\n            isActive: 1,\r\n            type: 'division',\r\n            limit: 12\r\n        };\r\n        return {\r\n            field: 'name',\r\n            request: () => Environment.getAutocompleteGateway().getParticipant(params)\r\n        };\r\n    }\r\n    get region() {\r\n        return {\r\n            field: 'title',\r\n            request: (regionStr = '') => Environment.getAddressGateway().getRegionByTitle(regionStr)\r\n        };\r\n    }\r\n    get bank() {\r\n        return {\r\n            field: 'bik',\r\n            request: (bik = '') => Environment.getBankGateway().getBankByBIK(bik)\r\n        };\r\n    }\r\n    get ifns() {\r\n        return {\r\n            field: 'code',\r\n            request: (code = '') => Environment.getIFNSGateway().getIFNSByCode(code)\r\n        };\r\n    }\r\n}\r\nconst instance = new AutocompleteService();\r\nexport default instance;\r\n//# sourceMappingURL=AutocompleteService.js.map"]},"metadata":{},"sourceType":"module"}