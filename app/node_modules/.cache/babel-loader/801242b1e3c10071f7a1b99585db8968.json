{"ast":null,"code":"import _objectWithoutProperties from\"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";import React,{useCallback}from'react';import{StyledInput,InputWrapper,StyledIconAlert}from'../Form.styles';import getMaskedValue from'../utils/getMaskedValue';var TextInput=function TextInput(_ref){var _ref$type=_ref.type,type=_ref$type===void 0?'text':_ref$type,placeholder=_ref.placeholder,error=_ref.error,touched=_ref.touched,value=_ref.value,hideErrors=_ref.hideErrors,onChange=_ref.onChange,setValue=_ref.setValue,mask=_ref.mask,title=_ref.title,rest=_objectWithoutProperties(_ref,[\"type\",\"placeholder\",\"error\",\"touched\",\"value\",\"hideErrors\",\"onChange\",\"setValue\",\"mask\",\"title\"]);var onChangeInput=useCallback(function(event){return setValue(getMaskedValue(mask!==null&&mask!==void 0?mask:[],event.target.value));},[mask,setValue]);var renderPlaceholder=function renderPlaceholder(mask){if(mask){return mask.map(function(item){return item.placeholder||item.fixed;}).join('');}};return/*#__PURE__*/React.createElement(InputWrapper,null,/*#__PURE__*/React.createElement(StyledInput,Object.assign({hideErrors:hideErrors,error:error,touched:touched,placeholder:placeholder||renderPlaceholder(mask!==null&&mask!==void 0?mask:[]),type:type,value:value,title:title,onChange:mask?onChangeInput:onChange},rest)),!hideErrors&&error&&touched&&/*#__PURE__*/React.createElement(StyledIconAlert,null));};export default TextInput;","map":{"version":3,"sources":["C:/Users/Hovsep/Desktop/local/diflow_react/packages/app/src/pages/POA/MCHD_ROOT/common/Form/elements/TextInput.tsx"],"names":["React","useCallback","StyledInput","InputWrapper","StyledIconAlert","getMaskedValue","TextInput","type","placeholder","error","touched","value","hideErrors","onChange","setValue","mask","title","rest","onChangeInput","event","target","renderPlaceholder","map","item","fixed","join"],"mappings":"+LAAA,MAAOA,CAAAA,KAAP,EAAgBC,WAAhB,KAAmC,OAAnC,CACA,OAASC,WAAT,CAAsBC,YAAtB,CAAoCC,eAApC,KAA2D,gBAA3D,CAEA,MAAOC,CAAAA,cAAP,KAA2B,yBAA3B,CAiBA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,MAYI,oBAXpBC,IAWoB,CAXpBA,IAWoB,oBAXb,MAWa,WAVpBC,WAUoB,MAVpBA,WAUoB,CATpBC,KASoB,MATpBA,KASoB,CARpBC,OAQoB,MARpBA,OAQoB,CAPpBC,KAOoB,MAPpBA,KAOoB,CANpBC,UAMoB,MANpBA,UAMoB,CALpBC,QAKoB,MALpBA,QAKoB,CAJpBC,QAIoB,MAJpBA,QAIoB,CAHpBC,IAGoB,MAHpBA,IAGoB,CAFpBC,KAEoB,MAFpBA,KAEoB,CADjBC,IACiB,mIACpB,GAAMC,CAAAA,aAAa,CAAGjB,WAAW,CAAC,SAAAkB,KAAK,QAAIL,CAAAA,QAAQ,CAACT,cAAc,CAACU,IAAD,SAACA,IAAD,UAACA,IAAD,CAAS,EAAT,CAAaI,KAAK,CAACC,MAAN,CAAaT,KAA1B,CAAf,CAAZ,EAAN,CAAoE,CACnGI,IADmG,CAEnGD,QAFmG,CAApE,CAAjC,CAKA,GAAMO,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACN,IAAD,CAAmB,CAC3C,GAAIA,IAAJ,CAAU,CACR,MAAOA,CAAAA,IAAI,CAACO,GAAL,CAAS,SAACC,IAAD,QAAeA,CAAAA,IAAI,CAACf,WAAL,EAAoBe,IAAI,CAACC,KAAxC,EAAT,EAAwDC,IAAxD,CAA6D,EAA7D,CAAP,CACD,CACF,CAJD,CAMA,mBACE,oBAAC,YAAD,mBACE,oBAAC,WAAD,gBACE,UAAU,CAAEb,UADd,CAEE,KAAK,CAAEH,KAFT,CAGE,OAAO,CAAEC,OAHX,CAIE,WAAW,CAAEF,WAAW,EAAIa,iBAAiB,CAACN,IAAD,SAACA,IAAD,UAACA,IAAD,CAAS,EAAT,CAJ/C,CAKE,IAAI,CAAER,IALR,CAME,KAAK,CAAEI,KANT,CAOE,KAAK,CAAEK,KAPT,CAQE,QAAQ,CAAED,IAAI,CAAGG,aAAH,CAAmBL,QARnC,EASMI,IATN,EADF,CAYG,CAACL,UAAD,EAAeH,KAAf,EAAwBC,OAAxB,eAAmC,oBAAC,eAAD,MAZtC,CADF,CAgBD,CAxCD,CA0CA,cAAeJ,CAAAA,SAAf","sourcesContent":["import React, { useCallback } from 'react';\r\nimport { StyledInput, InputWrapper, StyledIconAlert } from '../Form.styles';\r\nimport { IMask } from '../utils/parseValue';\r\nimport getMaskedValue from '../utils/getMaskedValue';\r\n\r\nexport type TextInputProps = {\r\n  name: string;\r\n  value: string | number;\r\n  onChange?: React.FormEventHandler<HTMLInputElement>;\r\n  onBlur?: React.FormEventHandler<HTMLInputElement>;\r\n  type?: 'text' | 'email' | 'number' | 'password' | 'search' | 'tel';\r\n  placeholder?: string;\r\n  error?: boolean;\r\n  touched?: boolean;\r\n  hideErrors?: boolean;\r\n  setValue?: any;\r\n  mask?: IMask[];\r\n  title?: string;\r\n};\r\n\r\nconst TextInput = ({\r\n  type = 'text',\r\n  placeholder,\r\n  error,\r\n  touched,\r\n  value,\r\n  hideErrors,\r\n  onChange,\r\n  setValue,\r\n  mask,\r\n  title,\r\n  ...rest\r\n}: TextInputProps) => {\r\n  const onChangeInput = useCallback(event => setValue(getMaskedValue(mask ?? [], event.target.value)), [\r\n    mask,\r\n    setValue\r\n  ]);\r\n\r\n  const renderPlaceholder = (mask: IMask[]) => {\r\n    if (mask) {\r\n      return mask.map((item: any) => item.placeholder || item.fixed).join('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <InputWrapper>\r\n      <StyledInput\r\n        hideErrors={hideErrors}\r\n        error={error}\r\n        touched={touched}\r\n        placeholder={placeholder || renderPlaceholder(mask ?? [])}\r\n        type={type}\r\n        value={value}\r\n        title={title}\r\n        onChange={mask ? onChangeInput : onChange}\r\n        {...rest}\r\n      />\r\n      {!hideErrors && error && touched && <StyledIconAlert />}\r\n    </InputWrapper>\r\n  );\r\n};\r\n\r\nexport default TextInput;\r\n"]},"metadata":{},"sourceType":"module"}