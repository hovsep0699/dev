{"ast":null,"code":"import React from'react';import Autocomplete from'../../../common/autocomplete/Autocomplete';import FieldWrap from'../../../common/form/components/FieldWrap';import TextInput from'../../../common/form/components/TextInput';import AutocompleteService from'@distate/core/dist/application/autocomplete/AutocompleteService';import Measurement from'@distate/core/dist/domain/documents/upd/vo/measurement/Measurement';import classNames from'classnames';var MeasurementAutocomplete=function MeasurementAutocomplete(_ref){var initialValue=_ref.initialValue,onValueChange=_ref.onValueChange,hasLabel=_ref.hasLabel,labelAlign=_ref.labelAlign,isRequired=_ref.isRequired,wrapperClasses=_ref.wrapperClasses,errorMsg=_ref.errorMsg;var acService=AutocompleteService[Measurement.field];var handleItemSelect=function handleItemSelect(ajaxResponseValues){return function(selectedValue){if(selectedValue!==''){var selectedItem=ajaxResponseValues.rows.find(function(item){return item[acService.field]===selectedValue;});onValueChange(selectedItem);}else{onValueChange('');}};};return/*#__PURE__*/React.createElement(FieldWrap,{label:Measurement.name,labelAlign:labelAlign,hasLabel:hasLabel,errorMsg:errorMsg,isRequired:isRequired,customClasses:wrapperClasses},/*#__PURE__*/React.createElement(Autocomplete,{doAjax:acService.request,formatAjaxRes:function formatAjaxRes(res){return res.rows.map(function(row){return row[acService.field];});},handleItemSelect:handleItemSelect,width:240},/*#__PURE__*/React.createElement(TextInput,{DomainVO:Measurement,initialValue:initialValue,customClasses:classNames({error:errorMsg})})));};export default MeasurementAutocomplete;","map":{"version":3,"sources":["C:/Users/Hovsep/Desktop/local/diflow_react/packages/app/src/pages/upd/fields/MeasurementAutocomplete.js"],"names":["React","Autocomplete","FieldWrap","TextInput","AutocompleteService","Measurement","classNames","MeasurementAutocomplete","initialValue","onValueChange","hasLabel","labelAlign","isRequired","wrapperClasses","errorMsg","acService","field","handleItemSelect","ajaxResponseValues","selectedValue","selectedItem","rows","find","item","name","request","res","map","row","error"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,YAAP,KAAyB,2CAAzB,CACA,MAAOC,CAAAA,SAAP,KAAsB,2CAAtB,CACA,MAAOC,CAAAA,SAAP,KAAsB,2CAAtB,CACA,MAAOC,CAAAA,mBAAP,KAAgC,iEAAhC,CACA,MAAOC,CAAAA,WAAP,KAAwB,oEAAxB,CACA,MAAOC,CAAAA,UAAP,KAAuB,YAAvB,CAEA,GAAMC,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,MAQ1B,IAPJC,CAAAA,YAOI,MAPJA,YAOI,CANJC,aAMI,MANJA,aAMI,CALJC,QAKI,MALJA,QAKI,CAJJC,UAII,MAJJA,UAII,CAHJC,UAGI,MAHJA,UAGI,CAFJC,cAEI,MAFJA,cAEI,CADJC,QACI,MADJA,QACI,CACJ,GAAMC,CAAAA,SAAS,CAAGX,mBAAmB,CAACC,WAAW,CAACW,KAAb,CAArC,CAEA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAAAC,kBAAkB,QAAI,UAAAC,aAAa,CAAI,CAC9D,GAAIA,aAAa,GAAK,EAAtB,CAA0B,CACxB,GAAMC,CAAAA,YAAY,CAAGF,kBAAkB,CAACG,IAAnB,CAAwBC,IAAxB,CACnB,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACR,SAAS,CAACC,KAAX,CAAJ,GAA0BG,aAA9B,EADe,CAArB,CAGAV,aAAa,CAACW,YAAD,CAAb,CACD,CALD,IAKO,CACLX,aAAa,CAAC,EAAD,CAAb,CACD,CACF,CAT0C,EAA3C,CAWA,mBACE,oBAAC,SAAD,EACE,KAAK,CAAEJ,WAAW,CAACmB,IADrB,CAEE,UAAU,CAAEb,UAFd,CAGE,QAAQ,CAAED,QAHZ,CAIE,QAAQ,CAAEI,QAJZ,CAKE,UAAU,CAAEF,UALd,CAME,aAAa,CAAEC,cANjB,eAQE,oBAAC,YAAD,EACE,MAAM,CAAEE,SAAS,CAACU,OADpB,CAEE,aAAa,CAAE,uBAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACL,IAAJ,CAASM,GAAT,CAAa,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACb,SAAS,CAACC,KAAX,CAAP,EAAhB,CAAJ,EAFpB,CAGE,gBAAgB,CAAEC,gBAHpB,CAIE,KAAK,CAAE,GAJT,eAME,oBAAC,SAAD,EACE,QAAQ,CAAEZ,WADZ,CAEE,YAAY,CAAEG,YAFhB,CAGE,aAAa,CAAEF,UAAU,CAAC,CACxBuB,KAAK,CAAEf,QADiB,CAAD,CAH3B,EANF,CARF,CADF,CAyBD,CA/CD,CAiDA,cAAeP,CAAAA,uBAAf","sourcesContent":["import React from 'react';\r\nimport Autocomplete from '../../../common/autocomplete/Autocomplete';\r\nimport FieldWrap from '../../../common/form/components/FieldWrap';\r\nimport TextInput from '../../../common/form/components/TextInput';\r\nimport AutocompleteService from '@distate/core/dist/application/autocomplete/AutocompleteService';\r\nimport Measurement from '@distate/core/dist/domain/documents/upd/vo/measurement/Measurement';\r\nimport classNames from 'classnames';\r\n\r\nconst MeasurementAutocomplete = ({\r\n  initialValue,\r\n  onValueChange,\r\n  hasLabel,\r\n  labelAlign,\r\n  isRequired,\r\n  wrapperClasses,\r\n  errorMsg\r\n}) => {\r\n  const acService = AutocompleteService[Measurement.field];\r\n\r\n  const handleItemSelect = ajaxResponseValues => selectedValue => {\r\n    if (selectedValue !== '') {\r\n      const selectedItem = ajaxResponseValues.rows.find(\r\n        item => item[acService.field] === selectedValue\r\n      );\r\n      onValueChange(selectedItem);\r\n    } else {\r\n      onValueChange('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FieldWrap\r\n      label={Measurement.name}\r\n      labelAlign={labelAlign}\r\n      hasLabel={hasLabel}\r\n      errorMsg={errorMsg}\r\n      isRequired={isRequired}\r\n      customClasses={wrapperClasses}\r\n    >\r\n      <Autocomplete\r\n        doAjax={acService.request}\r\n        formatAjaxRes={res => res.rows.map(row => row[acService.field])}\r\n        handleItemSelect={handleItemSelect}\r\n        width={240}\r\n      >\r\n        <TextInput\r\n          DomainVO={Measurement}\r\n          initialValue={initialValue}\r\n          customClasses={classNames({\r\n            error: errorMsg\r\n          })}\r\n        />\r\n      </Autocomplete>\r\n    </FieldWrap>\r\n  );\r\n};\r\n\r\nexport default MeasurementAutocomplete;\r\n"]},"metadata":{},"sourceType":"module"}