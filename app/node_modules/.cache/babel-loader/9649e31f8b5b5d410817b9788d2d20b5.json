{"ast":null,"code":"import*as Yup from\"yup\";import{AddressType}from\"@distate/app/src/pages/POA/MCHD_ROOT/presentation/constants/SelectionConstants\";export var AddressValidationScheme={regionCode:Yup.string().when(['type','addressType','Index','Province','city','settlement','street','house','block','flat','fiasId','fiasText'],{is:function is(type,addressType,Index,Province,city,settlement,street,house,block,flat){return addressType===AddressType.normal.toString()&&(type==='UL'||[Index,city,street,house,Province,settlement,block,flat].some(function(field){return field;}));},then:Yup.string().required('Введите код региона'),otherwise:Yup.string().when(['type','addressType','fiasId','fiasText'],{is:function is(type,addressType,fiasId,fiasText){return addressType===AddressType.fias.toString()&&type==='UL'||fiasId||fiasText;},then:Yup.string().required('Введите код региона')})}),Index:Yup.string().when(['type','addressType'],{is:function is(type,addressType){return addressType===AddressType.normal.toString()&&type==='UL';},then:Yup.string().required('Введите индекс')}),city:Yup.string().when(['type','addressType'],{is:function is(type,addressType){return addressType===AddressType.normal.toString()&&type==='UL';},then:Yup.string().required('Поле обязательно для ввода')}),street:Yup.string().when(['type','addressType'],{is:function is(type,addressType){return addressType===AddressType.normal.toString()&&type==='UL';},then:Yup.string().required('Поле обязательно для ввода')}),house:Yup.string().when(['type','addressType'],{is:function is(type,addressType){return addressType===AddressType.normal.toString()&&type==='UL';},then:Yup.string().required('Поле обязательно для ввода')}),flat:Yup.string().when(['type','addressType'],{is:function is(type,addressType){return addressType===AddressType.normal.toString()&&type==='UL';},then:Yup.string().required('Поле обязательно для ввода')}),fiasId:Yup.string().when(['type','addressType'],{is:function is(type,addressType){return type==='UL'&&addressType===AddressType.fias.toString();},then:Yup.string().required('Введите идентификатор адреса ФИАС')}),fiasText:Yup.string().when(['type','addressType'],{is:function is(type,addressType){return type==='UL'&&addressType===AddressType.fias.toString();},then:Yup.string().required('Поле обязательно для ввода')})};","map":{"version":3,"sources":["C:/Users/Hovsep/Desktop/local/diflow_react/packages/app/src/pages/POA/MCHD_ROOT/presentation/constants/ValidationScheme/AddressValidationScheme.ts"],"names":["Yup","AddressType","AddressValidationScheme","regionCode","string","when","is","type","addressType","Index","Province","city","settlement","street","house","block","flat","normal","toString","some","field","then","required","otherwise","fiasId","fiasText","fias"],"mappings":"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","sourcesContent":["import * as Yup from \"yup\";\r\nimport {AddressType} from \"@distate/app/src/pages/POA/MCHD_ROOT/presentation/constants/SelectionConstants\";\r\n\r\nexport const AddressValidationScheme = {\r\n    regionCode: Yup.string().when(['type', 'addressType', 'Index', 'Province', 'city', 'settlement', 'street', 'house', 'block', 'flat', 'fiasId', 'fiasText'], {\r\n        is: (type, addressType, Index, Province, city, settlement, street, house, block, flat) =>\r\n            addressType === AddressType.normal.toString() &&\r\n            (type === 'UL' ||\r\n            [Index, city, street, house, Province, settlement, block, flat].some(field => field)),\r\n        then: Yup.string().required('Введите код региона'),\r\n        otherwise: Yup.string().when(['type', 'addressType', 'fiasId', 'fiasText'], {\r\n            is: (type, addressType, fiasId, fiasText) =>\r\n                (addressType === AddressType.fias.toString() &&\r\n                type === 'UL') ||\r\n                (fiasId || fiasText),\r\n            then: Yup.string().required('Введите код региона'),\r\n        }),\r\n    }),\r\n    Index: Yup.string().when(['type', 'addressType'], {\r\n        is: (type, addressType) => addressType === AddressType.normal.toString() && type === 'UL',\r\n        then: Yup.string().required('Введите индекс'),\r\n    }),\r\n    city: Yup.string().when(['type', 'addressType'], {\r\n        is: (type, addressType) => addressType === AddressType.normal.toString() && type === 'UL',\r\n        then: Yup.string().required('Поле обязательно для ввода'),\r\n    }),\r\n    street: Yup.string().when(['type', 'addressType'], {\r\n        is: (type, addressType) => addressType === AddressType.normal.toString() && type === 'UL',\r\n        then: Yup.string().required('Поле обязательно для ввода'),\r\n    }),\r\n    house: Yup.string().when(['type', 'addressType'], {\r\n        is: (type, addressType) => addressType === AddressType.normal.toString() && type === 'UL',\r\n        then: Yup.string().required('Поле обязательно для ввода'),\r\n    }),\r\n    flat: Yup.string().when(['type', 'addressType'], {\r\n        is: (type, addressType) => addressType === AddressType.normal.toString() && type === 'UL',\r\n        then: Yup.string().required('Поле обязательно для ввода'),\r\n    }),\r\n    fiasId: Yup.string().when(['type', 'addressType'], {\r\n        is: (type, addressType) => type === 'UL' && addressType === AddressType.fias.toString(),\r\n        then: Yup.string().required('Введите идентификатор адреса ФИАС'),\r\n    }),\r\n    fiasText: Yup.string().when(['type', 'addressType'], {\r\n        is: (type, addressType) => type === 'UL' && addressType === AddressType.fias.toString(),\r\n        then: Yup.string().required('Поле обязательно для ввода'),\r\n    }),\r\n};"]},"metadata":{},"sourceType":"module"}