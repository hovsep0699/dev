{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nvar SignEventManager = /*#__PURE__*/function () {\n  function SignEventManager() {\n    _classCallCheck(this, SignEventManager);\n\n    this.channels = new Map();\n  }\n\n  _createClass(SignEventManager, [{\n    key: \"subscribe\",\n    value: function subscribe(eventType, listener) {\n      var listeners = [];\n\n      if (this.channels.has(eventType)) {\n        listeners = this.channels.get(eventType);\n      }\n\n      listeners.push(listener);\n      this.channels.set(eventType, listeners);\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(eventType, listener) {\n      //TODO unsubscribe doesnt work :(\n      //make listener object with cb inside\n      if (!this.channels.has(eventType)) return;\n      if (!listener) this.channels.delete(eventType);\n      var listeners = this.channels.get(eventType);\n      var listenerIndex = listeners.indexOf(listener);\n      if (listenerIndex === -1) return;\n      listeners.splice(listenerIndex, 1);\n\n      if (listeners.length) {\n        this.channels.set(eventType, listeners);\n      } else {\n        this.channels.delete(eventType);\n      }\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(eventType, data) {\n      if (!this.channels.has(eventType)) return;\n      var listeners = this.channels.get(eventType);\n      listeners.forEach(function (listener) {\n        return listener(data);\n      });\n    }\n  }]);\n\n  return SignEventManager;\n}();\n\nexport default SignEventManager;","map":{"version":3,"sources":["../../../src/application/sign/SignEventManager.ts"],"names":[],"mappings":";;;IAEM,gB;AAGJ,8BAAA;AAAA;;AACE,SAAK,QAAL,GAAgB,IAAI,GAAJ,EAAhB;AACD;;;;8BAES,S,EAAmB,Q,EAAqC;AAChE,UAAI,SAAS,GAAQ,EAArB;;AACA,UAAI,KAAK,QAAL,CAAc,GAAd,CAAkB,SAAlB,CAAJ,EAAkC;AAChC,QAAA,SAAS,GAAG,KAAK,QAAL,CAAc,GAAd,CAAkB,SAAlB,CAAZ;AACD;;AACD,MAAA,SAAS,CAAC,IAAV,CAAe,QAAf;AACA,WAAK,QAAL,CAAc,GAAd,CAAkB,SAAlB,EAA6B,SAA7B;AACD;;;gCAEW,S,EAAmB,Q,EAAsC;AACnE;AACA;AACA,UAAI,CAAC,KAAK,QAAL,CAAc,GAAd,CAAkB,SAAlB,CAAL,EAAmC;AACnC,UAAI,CAAC,QAAL,EAAe,KAAK,QAAL,CAAc,MAAd,CAAqB,SAArB;AAEf,UAAM,SAAS,GAAG,KAAK,QAAL,CAAc,GAAd,CAAkB,SAAlB,CAAlB;AACA,UAAM,aAAa,GAAG,SAAS,CAAC,OAAV,CAAkB,QAAlB,CAAtB;AACA,UAAI,aAAa,KAAK,CAAC,CAAvB,EAA0B;AAE1B,MAAA,SAAS,CAAC,MAAV,CAAiB,aAAjB,EAAgC,CAAhC;;AACA,UAAI,SAAS,CAAC,MAAd,EAAsB;AACpB,aAAK,QAAL,CAAc,GAAd,CAAkB,SAAlB,EAA6B,SAA7B;AACD,OAFD,MAEO;AACL,aAAK,QAAL,CAAc,MAAd,CAAqB,SAArB;AACD;AACF;;;2BAEM,S,EAAmB,I,EAAiB;AACzC,UAAI,CAAC,KAAK,QAAL,CAAc,GAAd,CAAkB,SAAlB,CAAL,EAAmC;AACnC,UAAM,SAAS,GAAG,KAAK,QAAL,CAAc,GAAd,CAAkB,SAAlB,CAAlB;AACA,MAAA,SAAS,CAAC,OAAV,CAAkB,UAAC,QAAD;AAAA,eAA2C,QAAQ,CAAC,IAAD,CAAnD;AAAA,OAAlB;AACD;;;;;;AAGH,eAAe,gBAAf","sourceRoot":"","sourcesContent":["class SignEventManager {\r\n    constructor() {\r\n        this.channels = new Map();\r\n    }\r\n    subscribe(eventType, listener) {\r\n        let listeners = [];\r\n        if (this.channels.has(eventType)) {\r\n            listeners = this.channels.get(eventType);\r\n        }\r\n        listeners.push(listener);\r\n        this.channels.set(eventType, listeners);\r\n    }\r\n    unsubscribe(eventType, listener) {\r\n        //TODO unsubscribe doesnt work :(\r\n        //make listener object with cb inside\r\n        if (!this.channels.has(eventType))\r\n            return;\r\n        if (!listener)\r\n            this.channels.delete(eventType);\r\n        const listeners = this.channels.get(eventType);\r\n        const listenerIndex = listeners.indexOf(listener);\r\n        if (listenerIndex === -1)\r\n            return;\r\n        listeners.splice(listenerIndex, 1);\r\n        if (listeners.length) {\r\n            this.channels.set(eventType, listeners);\r\n        }\r\n        else {\r\n            this.channels.delete(eventType);\r\n        }\r\n    }\r\n    notify(eventType, data) {\r\n        if (!this.channels.has(eventType))\r\n            return;\r\n        const listeners = this.channels.get(eventType);\r\n        listeners.forEach((listener) => listener(data));\r\n    }\r\n}\r\nexport default SignEventManager;\r\n//# sourceMappingURL=SignEventManager.js.map"]},"metadata":{},"sourceType":"module"}