{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{useDispatch,useSelector}from'react-redux';import{Accordion,AccordionPanel,Box}from'grommet';import{Button,Icons,ButtonKinds}from'@distate/components';import{getDocumentFlowRoles,saveDocumentFlowRoles}from'../../../store/actions';import{selectDocumentFlowRoles}from'../../../store/selectors';import{FlowCheckBox}from'./FlowCheckBox';import{DeletionConfirmation}from'./DeletionConfirmation';/** Документооборот - карточка роли */export var DocumentFlow=function DocumentFlow(props){var id=props.id,roleCardHide=props.roleCardHide;var dispatch=useDispatch();var flow=useSelector(selectDocumentFlowRoles);var _useState=useState([]),_useState2=_slicedToArray(_useState,2),checked=_useState2[0],setChecked=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isVisibleConfirm=_useState4[0],setIsVisibleConfirm=_useState4[1];/** возвращает список всех отмеченных id */var getAllChecked=function getAllChecked(flow){var allChecked=[];for(var key in flow){flow[key].forEach(function(item){(item===null||item===void 0?void 0:item.enabled)&&allChecked.push(item.role.id);});}return allChecked;};/** получение всех отмеченных id */useEffect(function(){var allChecked=getAllChecked(flow);setChecked(allChecked);},[flow,id]);useEffect(function(){id&&dispatch(getDocumentFlowRoles({groupId:id}));},[dispatch,id]);var accordions=[];/** Возвращает строку - первая буква заглавная */var firstLetter=function firstLetter(text){var textArr=text.split('');textArr[0]=textArr[0].toUpperCase();return textArr.join('');};for(var key in flow){accordions.push(/*#__PURE__*/React.createElement(Accordion,{key:key,multiple:false,focusIndicator:false},/*#__PURE__*/React.createElement(AccordionPanel,{label:/*#__PURE__*/React.createElement(Box,null,firstLetter(key)),style:{background:'#f3f3f3'}},flow[key].map(function(item){var enabled=item.enabled,role=item.role;var title=role.title,id=role.id;return/*#__PURE__*/React.createElement(FlowCheckBox,{key:id,enabled:enabled,title:title,id:id,checked:checked,setChecked:setChecked});}))));}/** сохранить изменения */var onSave=function onSave(){dispatch(saveDocumentFlowRoles({groupId:id,roolsId:checked}));};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h3\",{className:\"header\"},\"\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u043E\\u043E\\u0431\\u043E\\u0440\\u043E\\u0442\"),accordions.map(function(item){return item;}),/*#__PURE__*/React.createElement(\"div\",{style:{display:'flex',justifyContent:'space-between',marginTop:15}},/*#__PURE__*/React.createElement(Button,{icon:/*#__PURE__*/React.createElement(Icons.IconTrash,{fill:\"currentColor\"}),kind:ButtonKinds.Danger,onClick:function onClick(){return setIsVisibleConfirm(true);}},\"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C \\u0440\\u043E\\u043B\\u044C\"),/*#__PURE__*/React.createElement(Button,{icon:/*#__PURE__*/React.createElement(Icons.IconSave,{fill:\"currentColor\"}),kind:ButtonKinds.LightGreen,onClick:onSave},\"\\u041E\\u0431\\u043D\\u043E\\u0432\\u0438\\u0442\\u044C \\u0440\\u043E\\u043B\\u044C\")),/*#__PURE__*/React.createElement(DeletionConfirmation,{isVisible:isVisibleConfirm,hide:function hide(){return setIsVisibleConfirm(false);},id:id,roleCardHide:roleCardHide}));};","map":{"version":3,"sources":["C:/Users/Hovsep/Desktop/local/diflow_react/packages/app/src/pages/company/components/roles/modal-role-card/DocumentFlow.tsx"],"names":["React","useEffect","useState","useDispatch","useSelector","Accordion","AccordionPanel","Box","Button","Icons","ButtonKinds","getDocumentFlowRoles","saveDocumentFlowRoles","selectDocumentFlowRoles","FlowCheckBox","DeletionConfirmation","DocumentFlow","props","id","roleCardHide","dispatch","flow","checked","setChecked","isVisibleConfirm","setIsVisibleConfirm","getAllChecked","allChecked","key","forEach","item","enabled","push","role","groupId","accordions","firstLetter","text","textArr","split","toUpperCase","join","background","map","title","onSave","roolsId","display","justifyContent","marginTop","Danger","LightGreen"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, ReactElement } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Accordion, AccordionPanel, Box } from 'grommet';\r\nimport { Button, Icons, ButtonKinds } from '@distate/components';\r\nimport { getDocumentFlowRoles, saveDocumentFlowRoles } from '../../../store/actions';\r\nimport { selectDocumentFlowRoles } from '../../../store/selectors';\r\nimport { FlowCheckBox } from './FlowCheckBox';\r\nimport { DeletionConfirmation } from './DeletionConfirmation';\r\n\r\ntype FlowElement = {\r\n  enabled: boolean;\r\n  role: {\r\n    description: string;\r\n    id: number;\r\n    systemName: string;\r\n    title: string;\r\n  };\r\n};\r\n\r\ntype Props = {\r\n  id: number;\r\n  roleCardHide: Function;\r\n};\r\n/** Документооборот - карточка роли */\r\nexport const DocumentFlow = (props: Props) => {\r\n  const { id, roleCardHide } = props;\r\n\r\n  const dispatch = useDispatch();\r\n  const flow: any = useSelector(selectDocumentFlowRoles);\r\n  const [checked, setChecked] = useState<number[]>([]);\r\n  const [isVisibleConfirm, setIsVisibleConfirm] = useState(false);\r\n\r\n  /** возвращает список всех отмеченных id */\r\n  const getAllChecked = (flow: any): number[] => {\r\n    const allChecked: number[] = [];\r\n    for (let key in flow) {\r\n      flow[key].forEach((item: FlowElement) => {\r\n        item?.enabled && allChecked.push(item.role.id);\r\n      });\r\n    }\r\n    return allChecked;\r\n  };\r\n\r\n  /** получение всех отмеченных id */\r\n  useEffect(() => {\r\n    const allChecked = getAllChecked(flow);\r\n    setChecked(allChecked);\r\n  }, [flow, id]);\r\n\r\n  useEffect(() => {\r\n    id && dispatch(getDocumentFlowRoles({ groupId: id }));\r\n  }, [dispatch, id]);\r\n\r\n  const accordions: ReactElement[] = [];\r\n\r\n  /** Возвращает строку - первая буква заглавная */\r\n  const firstLetter = (text: string): string => {\r\n    const textArr = text.split('');\r\n    textArr[0] = textArr[0].toUpperCase();\r\n    return textArr.join('');\r\n  };\r\n\r\n  for (let key in flow) {\r\n    accordions.push(\r\n      <Accordion key={key} multiple={false} focusIndicator={false}>\r\n        <AccordionPanel label={<Box>{firstLetter(key)}</Box>} style={{ background: '#f3f3f3' }}>\r\n          {flow[key].map((item: FlowElement) => {\r\n            const { enabled, role } = item;\r\n            const { title, id } = role;\r\n            return (\r\n              <FlowCheckBox\r\n                key={id}\r\n                enabled={enabled}\r\n                title={title}\r\n                id={id}\r\n                checked={checked}\r\n                setChecked={setChecked}\r\n              />\r\n            );\r\n          })}\r\n        </AccordionPanel>\r\n      </Accordion>\r\n    );\r\n  }\r\n\r\n  /** сохранить изменения */\r\n  const onSave = () => {\r\n    dispatch(saveDocumentFlowRoles({ groupId: id, roolsId: checked }));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3 className=\"header\">Документооборот</h3>\r\n      {accordions.map((item: ReactElement) => item)}\r\n      <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: 15 }}>\r\n        <Button\r\n          icon={<Icons.IconTrash fill=\"currentColor\" />}\r\n          kind={ButtonKinds.Danger}\r\n          onClick={() => setIsVisibleConfirm(true)}\r\n        >\r\n          Удалить роль\r\n        </Button>\r\n        <Button\r\n          icon={<Icons.IconSave fill=\"currentColor\" />}\r\n          kind={ButtonKinds.LightGreen}\r\n          onClick={onSave}\r\n        >\r\n          Обновить роль\r\n        </Button>\r\n      </div>\r\n      <DeletionConfirmation\r\n        isVisible={isVisibleConfirm}\r\n        hide={() => setIsVisibleConfirm(false)}\r\n        id={id}\r\n        roleCardHide={roleCardHide}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}