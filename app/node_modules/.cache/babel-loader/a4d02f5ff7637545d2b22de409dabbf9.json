{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/*\r\n  Контактные данные (КонтактТип)\r\n */\nimport Phone from './Phone';\nimport Email from './Email';\n\nvar ContactType = /*#__PURE__*/function () {\n  _createClass(ContactType, null, [{\n    key: \"validate\",\n    value: function validate(value) {\n      var errorMsgs = [];\n      ContactType.VOs.forEach(function (DomainVO) {\n        var msg = DomainVO.validate(value && value[DomainVO.field]);\n\n        if (msg !== undefined) {\n          errorMsgs.push(msg);\n        }\n      });\n      return errorMsgs.length > 0 ? 'Контактные данные заполнены неверно' : undefined;\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid(value) {\n      return !ContactType.validate(value);\n    }\n  }, {\n    key: \"hint\",\n    get: function get() {\n      return 'Введите контакты';\n    }\n  }, {\n    key: \"placeholder\",\n    get: function get() {\n      return 'Введите контакты';\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'Контактные данные';\n    }\n  }, {\n    key: \"field\",\n    get: function get() {\n      return 'contact';\n    }\n  }, {\n    key: \"VOs\",\n    get: function get() {\n      return [Phone, Email];\n    }\n  }]);\n\n  function ContactType(phone, email) {\n    _classCallCheck(this, ContactType);\n\n    this.phone = phone;\n    this.email = email;\n  }\n\n  _createClass(ContactType, [{\n    key: \"clone\",\n    value: function clone() {\n      return new ContactType(this.phone, this.email);\n    }\n  }, {\n    key: \"phone\",\n    get: function get() {\n      return this._phone;\n    },\n    set: function set(value) {\n      this._phone = new Phone(value);\n    }\n  }, {\n    key: \"email\",\n    set: function set(value) {\n      this._email = new Email(value);\n    },\n    get: function get() {\n      return this._email;\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      var _ref;\n\n      return _ref = {}, _defineProperty(_ref, Phone.field, this.phone), _defineProperty(_ref, Email.field, this.email), _ref;\n    }\n  }]);\n\n  return ContactType;\n}();\n\nexport default ContactType;","map":{"version":3,"sources":["../../../../../../src/domain/documents/upd/standard_element/contact/ContactType.js"],"names":[],"mappings":";;;;AAAA;;;AAGA,OAAO,KAAP,MAAkB,SAAlB;AACA,OAAO,KAAP,MAAkB,SAAlB;;IAEM,W;;;6BACY,K,EAAK;AACnB,UAAM,SAAS,GAAG,EAAlB;AACA,MAAA,WAAW,CAAC,GAAZ,CAAgB,OAAhB,CAAwB,UAAC,QAAD,EAAa;AACnC,YAAM,GAAG,GAAG,QAAQ,CAAC,QAAT,CAAkB,KAAK,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAV,CAAhC,CAAZ;;AACA,YAAI,GAAG,KAAK,SAAZ,EAAuB;AACrB,UAAA,SAAS,CAAC,IAAV,CAAe,GAAf;AACD;AACF,OALD;AAMA,aAAQ,SAAS,CAAC,MAAV,GAAmB,CAApB,GAAyB,qCAAzB,GAAiE,SAAxE;AACD;;;4BAEc,K,EAAK;AAClB,aAAO,CAAC,WAAW,CAAC,QAAZ,CAAqB,KAArB,CAAR;AACD;;;wBAEc;AACb,aAAO,kBAAP;AACD;;;wBAEqB;AACpB,aAAO,kBAAP;AACD;;;wBAEc;AACb,aAAO,mBAAP;AACD;;;wBAEe;AACd,aAAO,SAAP;AACD;;;wBAEa;AACZ,aAAO,CAAC,KAAD,EAAQ,KAAR,CAAP;AACD;;;AAED,uBAAY,KAAZ,EAAmB,KAAnB,EAAwB;AAAA;;AACtB,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,KAAL,GAAa,KAAb;AACD;;;;4BAEI;AACH,aAAO,IAAI,WAAJ,CAAgB,KAAK,KAArB,EAA4B,KAAK,KAAjC,CAAP;AACD;;;wBAEQ;AACP,aAAO,KAAK,MAAZ;AACD,K;sBAES,K,EAAK;AACb,WAAK,MAAL,GAAc,IAAI,KAAJ,CAAU,KAAV,CAAd;AACD;;;sBAES,K,EAAK;AACb,WAAK,MAAL,GAAc,IAAI,KAAJ,CAAU,KAAV,CAAd;AACD,K;wBAEQ;AACP,aAAO,KAAK,MAAZ;AACD;;;wBAEQ;AAAA;;AACP,8CACG,KAAK,CAAC,KADT,EACiB,KAAK,KADtB,yBAEG,KAAK,CAAC,KAFT,EAEiB,KAAK,KAFtB;AAID;;;;;;AAGH,eAAe,WAAf","sourceRoot":"","sourcesContent":["/*\r\n  Контактные данные (КонтактТип)\r\n */\r\nimport Phone from './Phone';\r\nimport Email from './Email';\r\nclass ContactType {\r\n    static validate(value) {\r\n        const errorMsgs = [];\r\n        ContactType.VOs.forEach((DomainVO) => {\r\n            const msg = DomainVO.validate(value && value[DomainVO.field]);\r\n            if (msg !== undefined) {\r\n                errorMsgs.push(msg);\r\n            }\r\n        });\r\n        return (errorMsgs.length > 0) ? 'Контактные данные заполнены неверно' : undefined;\r\n    }\r\n    static isValid(value) {\r\n        return !ContactType.validate(value);\r\n    }\r\n    static get hint() {\r\n        return 'Введите контакты';\r\n    }\r\n    static get placeholder() {\r\n        return 'Введите контакты';\r\n    }\r\n    static get name() {\r\n        return 'Контактные данные';\r\n    }\r\n    static get field() {\r\n        return 'contact';\r\n    }\r\n    static get VOs() {\r\n        return [Phone, Email];\r\n    }\r\n    constructor(phone, email) {\r\n        this.phone = phone;\r\n        this.email = email;\r\n    }\r\n    clone() {\r\n        return new ContactType(this.phone, this.email);\r\n    }\r\n    get phone() {\r\n        return this._phone;\r\n    }\r\n    set phone(value) {\r\n        this._phone = new Phone(value);\r\n    }\r\n    set email(value) {\r\n        this._email = new Email(value);\r\n    }\r\n    get email() {\r\n        return this._email;\r\n    }\r\n    get value() {\r\n        return {\r\n            [Phone.field]: this.phone,\r\n            [Email.field]: this.email\r\n        };\r\n    }\r\n}\r\nexport default ContactType;\r\n//# sourceMappingURL=ContactType.js.map"]},"metadata":{},"sourceType":"module"}