{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _regeneratorRuntime from\"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(ducumentChecked),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(sagaDocumentChecked);import{takeLatest,put,select}from'redux-saga/effects';import{actionDocumentUpdate,actionDocumentChecked,actionDocumentSetSelected,actionDocumentTools}from'../actions';import{switchCheckDocuments}from'../../helpers/documnets.helpers';import{selectSelected,selectList}from'../selects';export function ducumentChecked(){return _regeneratorRuntime.wrap(function ducumentChecked$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return takeLatest(actionDocumentChecked,sagaDocumentChecked);case 2:case\"end\":return _context.stop();}}},_marked);}function sagaDocumentChecked(action){var _action$payload,type,_action$payload$value,values,check,selected,documents,stateSelected,stateDocuments;return _regeneratorRuntime.wrap(function sagaDocumentChecked$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_action$payload=action.payload,type=_action$payload.type,_action$payload$value=_action$payload.values,values=_action$payload$value===void 0?[]:_action$payload$value;check=false;selected=values;documents=[];_context2.next=6;return select(selectSelected);case 6:stateSelected=_context2.sent;_context2.next=9;return select(selectList);case 9:stateDocuments=_context2.sent;if(type==='append'){check=true;selected=[].concat(_toConsumableArray(stateSelected),_toConsumableArray(values));}else if(type==='remove'){check=false;selected=_toConsumableArray(stateSelected.filter(function(item){return!values.includes(item);}));}else{check=!(stateDocuments.length&&stateDocuments.length===stateSelected.length);values=stateDocuments.map(function(_ref){var packageId=_ref.packageId;return packageId;});selected=check?values:[];}documents=switchCheckDocuments(check,stateDocuments,values);_context2.next=14;return put(actionDocumentSetSelected({selected:selected}));case 14:_context2.next=16;return put(actionDocumentUpdate({list:documents}));case 16:_context2.next=18;return put(actionDocumentTools());case 18:case\"end\":return _context2.stop();}}},_marked2);}","map":{"version":3,"sources":["C:/Users/Hovsep/Desktop/local/diflow_react/packages/app/src/pages/documents/store/sagas/checked.effect.ts"],"names":["ducumentChecked","sagaDocumentChecked","takeLatest","put","select","actionDocumentUpdate","actionDocumentChecked","actionDocumentSetSelected","actionDocumentTools","switchCheckDocuments","selectSelected","selectList","action","payload","type","values","check","selected","documents","stateSelected","stateDocuments","filter","item","includes","length","map","packageId","list"],"mappings":"uYAgBiBA,e,iDAMPC,mB,EAtBV,OAASC,UAAT,CAAqBC,GAArB,CAA0BC,MAA1B,KAAwC,oBAAxC,CAEA,OACEC,oBADF,CAEEC,qBAFF,CAGEC,yBAHF,CAIEC,mBAJF,KAKO,YALP,CAWA,OAASC,oBAAT,KAAqC,iCAArC,CACA,OAASC,cAAT,CAAyBC,UAAzB,KAA2C,YAA3C,CAEA,MAAO,SAAUX,CAAAA,eAAV,2IACL,MAAME,CAAAA,UAAU,CAACI,qBAAD,CAAwBL,mBAAxB,CAAhB,CADK,sDAMP,QAAUA,CAAAA,mBAAV,CAA8BW,MAA9B,6PAGMA,MAHN,CAEIC,OAFJ,CAEeC,IAFf,iBAEeA,IAFf,uCAEqBC,MAFrB,CAEqBA,MAFrB,gCAE8B,EAF9B,uBAKMC,KALN,CAKuB,KALvB,CAMMC,QANN,CAM4BF,MAN5B,CAOMG,SAPN,CAOkC,EAPlC,kBASmC,MAAMd,CAAAA,MAAM,CAACM,cAAD,CAAZ,CATnC,OASQS,aATR,iCAUyC,MAAMf,CAAAA,MAAM,CAACO,UAAD,CAAZ,CAVzC,OAUQS,cAVR,gBAYE,GAAIN,IAAI,GAAK,QAAb,CAAuB,CACrBE,KAAK,CAAG,IAAR,CACAC,QAAQ,8BAAOE,aAAP,qBAAyBJ,MAAzB,EAAR,CACD,CAHD,IAGO,IAAID,IAAI,GAAK,QAAb,CAAuB,CAC5BE,KAAK,CAAG,KAAR,CACAC,QAAQ,oBAAOE,aAAa,CAACE,MAAd,CAAqB,SAAAC,IAAI,QAAI,CAACP,MAAM,CAACQ,QAAP,CAAgBD,IAAhB,CAAL,EAAzB,CAAP,CAAR,CACD,CAHM,IAGA,CACLN,KAAK,CAAG,EAAEI,cAAc,CAACI,MAAf,EAAyBJ,cAAc,CAACI,MAAf,GAA0BL,aAAa,CAACK,MAAnE,CAAR,CACAT,MAAM,CAAGK,cAAc,CAACK,GAAf,CAAmB,kBAAGC,CAAAA,SAAH,MAAGA,SAAH,OAAmBA,CAAAA,SAAnB,EAAnB,CAAT,CACAT,QAAQ,CAAGD,KAAK,CAAGD,MAAH,CAAY,EAA5B,CACD,CAEDG,SAAS,CAAGT,oBAAoB,CAACO,KAAD,CAAQI,cAAR,CAAwBL,MAAxB,CAAhC,CAxBF,kBA0BE,MAAMZ,CAAAA,GAAG,CAACI,yBAAyB,CAAC,CAAEU,QAAQ,CAARA,QAAF,CAAD,CAA1B,CAAT,CA1BF,0BA2BE,MAAMd,CAAAA,GAAG,CAACE,oBAAoB,CAAC,CAAEsB,IAAI,CAAET,SAAR,CAAD,CAArB,CAAT,CA3BF,0BA4BE,MAAMf,CAAAA,GAAG,CAACK,mBAAmB,EAApB,CAAT,CA5BF","sourcesContent":["import { takeLatest, put, select } from 'redux-saga/effects';\r\n\r\nimport {\r\n  actionDocumentUpdate,\r\n  actionDocumentChecked,\r\n  actionDocumentSetSelected,\r\n  actionDocumentTools\r\n} from '../actions';\r\nimport {\r\n  ADocumentCheckedPayload,\r\n  DocumentType,\r\n  DefaultState\r\n} from '../../helpers/documents.typings';\r\nimport { switchCheckDocuments } from '../../helpers/documnets.helpers';\r\nimport { selectSelected, selectList } from '../selects';\r\n\r\nexport function* ducumentChecked() {\r\n  yield takeLatest(actionDocumentChecked, sagaDocumentChecked);\r\n}\r\n\r\ntype ISelected = Pick<DefaultState, 'selected'>['selected'];\r\n\r\nfunction* sagaDocumentChecked(action: ADocumentCheckedPayload) {\r\n  let {\r\n    payload: { type, values = [] }\r\n  } = action;\r\n\r\n  let check: boolean = false;\r\n  let selected: ISelected = values;\r\n  let documents: DocumentType[] = [];\r\n\r\n  const stateSelected: ISelected = yield select(selectSelected);\r\n  const stateDocuments: DocumentType[] = yield select(selectList);\r\n\r\n  if (type === 'append') {\r\n    check = true;\r\n    selected = [...stateSelected, ...values];\r\n  } else if (type === 'remove') {\r\n    check = false;\r\n    selected = [...stateSelected.filter(item => !values.includes(item))];\r\n  } else {\r\n    check = !(stateDocuments.length && stateDocuments.length === stateSelected.length);\r\n    values = stateDocuments.map(({ packageId }) => packageId);\r\n    selected = check ? values : [];\r\n  }\r\n\r\n  documents = switchCheckDocuments(check, stateDocuments, values);\r\n\r\n  yield put(actionDocumentSetSelected({ selected }));\r\n  yield put(actionDocumentUpdate({ list: documents }));\r\n  yield put(actionDocumentTools());\r\n}\r\n"]},"metadata":{},"sourceType":"module"}