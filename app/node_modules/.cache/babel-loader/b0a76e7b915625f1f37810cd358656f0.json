{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{Autocomplete}from'@distate/components/dist/Autocomplete';import FieldWrap from'../../../common/form/components/FieldWrap';import AutocompleteGateway from'@distate/core/dist/application/autocomplete/AutocompleteGateway';import{getExternalTypeToString}from'../../../helpers/heplers';var ParticipantAC=function ParticipantAC(props){var handleACSelectedItem=props.handleACSelectedItem,handleCompanyInfo=props.handleCompanyInfo;var errorMsg='';var showErrorMsg=!errorMsg;var autocompleteGateway=new AutocompleteGateway();/** для сохранения значения текущего типа пользователя ЮЛ\\ФЛ */var _useState=useState([]),_useState2=_slicedToArray(_useState,2),contractorRows=_useState2[0],setContractorRows=_useState2[1];/** контрагент, для отображения в селекте */var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),contractorValue=_useState4[0],setContractorValue=_useState4[1];/** преобразование ответа сервера в массив для опций селекта контрагента */var contractorDataToOptions=function contractorDataToOptions(data){setContractorRows(data);return data.map(function(item){var companyExternalType=item.companyExternalType,companyExternalOperator=item.companyExternalOperator,companyNetwork=item.companyNetwork,id=item.id,name=item.name,type=item.type;/** получение типа контрагента */var contractorTypeStr=getExternalTypeToString(companyExternalType,companyExternalOperator,companyNetwork);/** если это компания */if(type==='division'){return{value:id,label:name+contractorTypeStr};}/** если это ФЛ */return{value:id,label:\"\".concat(name)};});};/** загрузка подходящих контрагентов в автокомплите */var contractorLoad=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(str,callback){var res,_res$rows,rows;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return autocompleteGateway.getParticipant({recipient:str});case 2:res=_context.sent;handleCompanyInfo(res);_res$rows=res.rows,rows=_res$rows===void 0?[]:_res$rows;callback(contractorDataToOptions(rows));case 6:case\"end\":return _context.stop();}}},_callee);}));return function contractorLoad(_x,_x2){return _ref.apply(this,arguments);};}();var onContractorChange=function onContractorChange(e){setContractorValue(e);/** получение информации о выбранном контрагенте */var currentPersonInfo=contractorRows.find(function(item){return item.id===(e===null||e===void 0?void 0:e.value);});handleACSelectedItem(currentPersonInfo);handleCompanyInfo(currentPersonInfo);};return/*#__PURE__*/React.createElement(FieldWrap,{errorMsg:errorMsg},/*#__PURE__*/React.createElement(Autocomplete,{value:contractorValue,loadOptions:contractorLoad,onChange:function onChange(e){return onContractorChange(e);},placeholder:\"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0441\\u0432\\u0435\\u0434\\u0435\\u043D\\u0438\\u044F \\u043E\\u0431 \\u0443\\u0447\\u0430\\u0441\\u0442\\u043D\\u0438\\u043A\\u0435\",width:320}),showErrorMsg&&/*#__PURE__*/React.createElement(\"span\",{className:\"ds-field-name bottom error\"},errorMsg));};export default ParticipantAC;","map":{"version":3,"sources":["C:/Users/Hovsep/Desktop/local/diflow_react/packages/app/src/pages/upd/fields/ParticipantAutocomplete.js"],"names":["React","useState","Autocomplete","FieldWrap","AutocompleteGateway","getExternalTypeToString","ParticipantAC","props","handleACSelectedItem","handleCompanyInfo","errorMsg","showErrorMsg","autocompleteGateway","contractorRows","setContractorRows","contractorValue","setContractorValue","contractorDataToOptions","data","map","item","companyExternalType","companyExternalOperator","companyNetwork","id","name","type","contractorTypeStr","value","label","contractorLoad","str","callback","getParticipant","recipient","res","rows","onContractorChange","e","currentPersonInfo","find"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { Autocomplete } from '@distate/components/dist/Autocomplete';\r\nimport FieldWrap from '../../../common/form/components/FieldWrap';\r\nimport AutocompleteGateway from '@distate/core/dist/application/autocomplete/AutocompleteGateway';\r\nimport { getExternalTypeToString } from '../../../helpers/heplers'\r\n\r\nconst ParticipantAC = props => {\r\n  const { handleACSelectedItem, handleCompanyInfo } = props;\r\n  const errorMsg = '';\r\n  const showErrorMsg = !errorMsg;\r\n\r\n  const autocompleteGateway = new AutocompleteGateway();\r\n\r\n  /** для сохранения значения текущего типа пользователя ЮЛ\\ФЛ */\r\n  const [contractorRows, setContractorRows] = useState([]);\r\n  /** контрагент, для отображения в селекте */\r\n  const [contractorValue, setContractorValue] = useState();\r\n   \r\n  /** преобразование ответа сервера в массив для опций селекта контрагента */\r\n  const contractorDataToOptions = (data) => {\r\n    setContractorRows(data);\r\n\r\n    return data.map(item => {\r\n      const {companyExternalType, companyExternalOperator, companyNetwork, id, name, type} = item;\r\n      /** получение типа контрагента */\r\n      const contractorTypeStr = getExternalTypeToString(companyExternalType, companyExternalOperator, companyNetwork);\r\n      /** если это компания */\r\n      if (type === 'division') {\r\n        return { value: id, label: name + contractorTypeStr };\r\n      }\r\n      /** если это ФЛ */\r\n      return {\r\n        value: id,\r\n        label: `${name}`\r\n      };\r\n    });\r\n  };\r\n\r\n  /** загрузка подходящих контрагентов в автокомплите */\r\n  const contractorLoad = async (str, callback) => {\r\n    const res = await autocompleteGateway.getParticipant({ recipient: str });\r\n    handleCompanyInfo(res)\r\n    const { rows = [] } = res;\r\n    callback(contractorDataToOptions(rows));\r\n  };\r\n\r\n  const onContractorChange = (e) => {\r\n    setContractorValue(e);\r\n    /** получение информации о выбранном контрагенте */\r\n    const currentPersonInfo = contractorRows.find(item => item.id === e?.value);\r\n    handleACSelectedItem(currentPersonInfo)\r\n    handleCompanyInfo(currentPersonInfo)\r\n  };\r\n\r\n  return (\r\n    <FieldWrap errorMsg={errorMsg}>\r\n      <Autocomplete\r\n        value={contractorValue}\r\n        loadOptions={contractorLoad}\r\n        onChange={(e) => onContractorChange(e)}\r\n        placeholder=\"Введите сведения об участнике\"\r\n        width={320}\r\n      />\r\n      {showErrorMsg && <span className=\"ds-field-name bottom error\">{errorMsg}</span>}\r\n    </FieldWrap>\r\n  );\r\n};\r\n\r\nexport default ParticipantAC;\r\n"]},"metadata":{},"sourceType":"module"}