{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/*\r\n  ДатаТип\r\n*/\nimport { parse } from 'date-fns';\nimport { assert } from 'chai';\n\nvar DateType = /*#__PURE__*/function () {\n  _createClass(DateType, null, [{\n    key: \"validate\",\n    value: function validate(value) {\n      try {\n        assert.exists(value, 'Параметр не должен быть пустым');\n        assert.equal(value.length, 10, 'Должно быть 10 символов в дате xx.xx.xxxx');\n        var res = parse(value, 'dd.MM.yyyy', new Date()).toString();\n        assert.notEqual(res, 'Invalid Date');\n        return undefined;\n      } catch (error) {\n        return 'Введите дату в формате dd.mm.yyyy';\n      }\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid(value) {\n      return !DateType.validate(value);\n    }\n  }, {\n    key: \"placeholder\",\n    get: function get() {\n      return 'Дата';\n    }\n  }, {\n    key: \"hint\",\n    get: function get() {\n      return 'Введите дату в формате dd.mm.yyyy';\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'Дата';\n    }\n  }, {\n    key: \"field\",\n    get: function get() {\n      return 'date';\n    }\n  }]);\n\n  function DateType(date) {\n    _classCallCheck(this, DateType);\n\n    if (!DateType.isValid(\"\".concat(date))) {\n      this._error = new Error('Невозможно создать дату. Формат не верен.');\n    } else {\n      this._error = null;\n    }\n\n    this._value = \"\".concat(date);\n  }\n\n  _createClass(DateType, [{\n    key: \"clone\",\n    value: function clone() {\n      return new DateType(this.value);\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n  }, {\n    key: \"error\",\n    get: function get() {\n      return this._error;\n    }\n  }]);\n\n  return DateType;\n}();\n\nexport default DateType;","map":{"version":3,"sources":["../../../../../../src/domain/documents/upd/standard_element/date/DateType.js"],"names":[],"mappings":";;;AAAA;;;AAGA,SAAS,KAAT,QAAsB,UAAtB;AACA,SAAS,MAAT,QAAuB,MAAvB;;IAEM,Q;;;6BACY,K,EAAK;AACnB,UAAI;AACF,QAAA,MAAM,CAAC,MAAP,CAAc,KAAd,EAAqB,gCAArB;AACA,QAAA,MAAM,CAAC,KAAP,CAAa,KAAK,CAAC,MAAnB,EAA2B,EAA3B,EAA+B,2CAA/B;AACA,YAAM,GAAG,GAAG,KAAK,CAAC,KAAD,EAAQ,YAAR,EAAsB,IAAI,IAAJ,EAAtB,CAAL,CAAuC,QAAvC,EAAZ;AACA,QAAA,MAAM,CAAC,QAAP,CAAgB,GAAhB,EAAqB,cAArB;AACA,eAAO,SAAP;AACD,OAND,CAME,OAAO,KAAP,EAAc;AACd,eAAO,mCAAP;AACD;AACF;;;4BAEc,K,EAAK;AAClB,aAAO,CAAC,QAAQ,CAAC,QAAT,CAAkB,KAAlB,CAAR;AACD;;;wBAEqB;AACpB,aAAO,MAAP;AACD;;;wBAEc;AACb,aAAO,mCAAP;AACD;;;wBAEc;AACb,aAAO,MAAP;AACD;;;wBAEe;AACd,aAAO,MAAP;AACD;;;AAED,oBAAY,IAAZ,EAAgB;AAAA;;AACd,QAAI,CAAC,QAAQ,CAAC,OAAT,WAAoB,IAApB,EAAL,EAAkC;AAChC,WAAK,MAAL,GAAc,IAAI,KAAJ,CAAU,2CAAV,CAAd;AACD,KAFD,MAEO;AACL,WAAK,MAAL,GAAc,IAAd;AACD;;AACD,SAAK,MAAL,aAAiB,IAAjB;AACD;;;;4BAEI;AACH,aAAO,IAAI,QAAJ,CAAa,KAAK,KAAlB,CAAP;AACD;;;wBAEQ;AACP,aAAO,KAAK,MAAZ;AACD;;;wBAEQ;AACP,aAAO,KAAK,MAAZ;AACD;;;;;;AAGH,eAAe,QAAf","sourceRoot":"","sourcesContent":["/*\r\n  ДатаТип\r\n*/\r\nimport { parse } from 'date-fns';\r\nimport { assert } from 'chai';\r\nclass DateType {\r\n    static validate(value) {\r\n        try {\r\n            assert.exists(value, 'Параметр не должен быть пустым');\r\n            assert.equal(value.length, 10, 'Должно быть 10 символов в дате xx.xx.xxxx');\r\n            const res = parse(value, 'dd.MM.yyyy', new Date()).toString();\r\n            assert.notEqual(res, 'Invalid Date');\r\n            return undefined;\r\n        }\r\n        catch (error) {\r\n            return 'Введите дату в формате dd.mm.yyyy';\r\n        }\r\n    }\r\n    static isValid(value) {\r\n        return !DateType.validate(value);\r\n    }\r\n    static get placeholder() {\r\n        return 'Дата';\r\n    }\r\n    static get hint() {\r\n        return 'Введите дату в формате dd.mm.yyyy';\r\n    }\r\n    static get name() {\r\n        return 'Дата';\r\n    }\r\n    static get field() {\r\n        return 'date';\r\n    }\r\n    constructor(date) {\r\n        if (!DateType.isValid(`${date}`)) {\r\n            this._error = new Error('Невозможно создать дату. Формат не верен.');\r\n        }\r\n        else {\r\n            this._error = null;\r\n        }\r\n        this._value = `${date}`;\r\n    }\r\n    clone() {\r\n        return new DateType(this.value);\r\n    }\r\n    get value() {\r\n        return this._value;\r\n    }\r\n    get error() {\r\n        return this._error;\r\n    }\r\n}\r\nexport default DateType;\r\n//# sourceMappingURL=DateType.js.map"]},"metadata":{},"sourceType":"module"}