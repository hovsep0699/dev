{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport { IconCheck, IconNa } from '@distate/components/dist/icons';\nimport set from 'lodash.set';\nimport get from 'lodash.get';\nimport Modal from '../../Modal';\nimport Button from '../../Button';\nimport { widgets } from '../widgets';\nimport { Context } from '../context';\nimport { SchemaDefinition } from './index';\nimport { isObject, retrieveSchema, optionsMuliList, hasWidget } from '../utils';\nimport { HTMLFooter, HTMLButtonTrue, HTMLButtonClear } from '../form-schema.style';\nimport { HTMLMulti, HTMLMultiBody, HTMLMultiLabel, HTMLMultiPopup, HTMLMultiHeader, HTMLMultiPopupTitle } from '../styled/schema.multi.styled';\nvar SCHEMA_TYPE = '__type__';\nvar FIELD_SELECT_NAME = '__active__';\nexport var SchemaMulty = function SchemaMulty(_ref) {\n  var schemaPath = _ref.schemaPath,\n      schema = _ref.schema,\n      uiSchema = _ref.uiSchema,\n      schemaName = _ref.schemaName,\n      _ref$formData = _ref.formData,\n      formData = _ref$formData === void 0 ? {} : _ref$formData;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOpen = _useState2[0],\n      setOpen = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      popupLabel = _useState4[0],\n      setPopupLabel = _useState4[1];\n\n  var _useContext = useContext(Context),\n      rootFormData = _useContext.formData,\n      rootSchema = _useContext.rootSchema,\n      onChange = _useContext.onChange; // UI\n\n\n  var uiPopup = get(uiSchema, 'ui:popup');\n  var widget = get(uiSchema, 'ui:widget', 'select');\n\n  if (!hasWidget(widget)) {\n    throw new Error(\"Could not find widgte \".concat(widget, \".\"));\n  }\n\n  var child = [];\n  var multiSchema = {};\n  var multiShemas = schema.anyOf || schema.oneOf || schema.allOf || [];\n  var enumOptions = optionsMuliList(schema);\n  var isArraySchema = Array.isArray(multiShemas);\n\n  if (enumOptions.length === 0) {\n    throw new Error(\"Could not find options in schema \\\"\".concat(schemaName, \"\\\"\"));\n  }\n\n  var active = isArraySchema ? get(rootFormData, [].concat(_toConsumableArray(schemaPath), [FIELD_SELECT_NAME]), enumOptions[0].value) : Object.keys(formData).reduce(function (prev, key) {\n    if (formData && formData[key]) {\n      return key;\n    }\n\n    return prev;\n  }, enumOptions[0].value);\n  var Widget = widgets[widget];\n  var isOne = schema.hasOwnProperty('oneOf');\n  var allOf = schema.hasOwnProperty('allOf');\n  useEffect(function () {\n    var field = uiPopup.field;\n\n    var path = _toConsumableArray(schemaPath);\n\n    if (!field) return;\n    if (!isArraySchema) path.push(active);\n    path.push(field);\n    var data = get(rootFormData, path);\n\n    if (isObject(data) && data.hasOwnProperty('label')) {\n      setPopupLabel(data.label);\n    }\n  }, [uiPopup, rootFormData, schemaPath, isArraySchema, active]); // Очищаем объект со значенниями\n\n  var getClearFormData = function getClearFormData() {\n    var currentSchemaPath = _toConsumableArray(schemaPath);\n\n    currentSchemaPath.pop();\n    var currentFormData = currentSchemaPath.length ? get(rootFormData, currentSchemaPath, {}) : rootFormData;\n\n    if (currentFormData[schemaName]) {\n      currentFormData[schemaName] = Object.entries(currentFormData[schemaName]).reduce(function (prev, _ref2) {\n        var _ref3 = _slicedToArray(_ref2, 2),\n            key = _ref3[0],\n            value = _ref3[1];\n\n        if (key === FIELD_SELECT_NAME) {\n          prev[key] = value;\n        }\n\n        return prev;\n      }, {});\n    }\n\n    return Object.assign({}, rootFormData);\n  };\n\n  var handleOnClear = function handleOnClear() {\n    setPopupLabel(undefined);\n    onChange(getClearFormData());\n  };\n\n  var handleOnSubmit = function handleOnSubmit() {\n    setOpen(false);\n  };\n\n  var onClickOpenPopup = function onClickOpenPopup() {\n    return setOpen(true);\n  };\n\n  var onClickClosePopup = function onClickClosePopup() {\n    return setOpen(false);\n  };\n\n  var onChangeWidget = function onChangeWidget(widgetName, value) {\n    var formData = getClearFormData();\n\n    if (isArraySchema) {\n      set(formData, [].concat(_toConsumableArray(schemaPath), [FIELD_SELECT_NAME]), value);\n    } else {\n      set(formData, [].concat(_toConsumableArray(schemaPath), [value]), true);\n    }\n\n    onChange(formData);\n  };\n\n  if (isOne) {\n    multiSchema = retrieveSchema(multiShemas[active], rootSchema) || {};\n    var path = isArraySchema ? schemaPath : [].concat(_toConsumableArray(schemaPath), [active]);\n    child = React.createElement(SchemaDefinition, {\n      schema: multiSchema,\n      schemaPath: path,\n      uiSchema: uiSchema[active] || uiSchema,\n      formData: formData\n    });\n  } else if (allOf) {\n    child = multiShemas.map(function (schema, index) {\n      return React.createElement(SchemaDefinition, {\n        key: index,\n        schema: schema,\n        schemaPath: schemaPath,\n        uiSchema: uiSchema,\n        formData: formData\n      });\n    });\n  }\n\n  var content = React.createElement(HTMLMulti, null, React.createElement(HTMLMultiHeader, null, React.createElement(Widget, {\n    name: schemaName,\n    label: schema.title,\n    formValue: active,\n    options: {\n      enumOptions: enumOptions\n    },\n    onChange: onChangeWidget,\n    uiSchema: uiSchema\n  })), child && React.createElement(HTMLMultiBody, null, child));\n\n  if (isObject(uiPopup)) {\n    var title = uiPopup.title,\n        width = uiPopup.width;\n    return React.createElement(HTMLMultiPopup, null, popupLabel && React.createElement(HTMLMultiLabel, null, popupLabel), React.createElement(Button, {\n      onClick: onClickOpenPopup\n    }, \"\\u0418\\u0437\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C\"), React.createElement(Modal, {\n      isVisible: isOpen,\n      hide: onClickClosePopup,\n      width: width\n    }, title && React.createElement(HTMLMultiPopupTitle, null, title), content, React.createElement(HTMLFooter, null, React.createElement(HTMLButtonTrue, {\n      onClick: handleOnSubmit\n    }, React.createElement(IconCheck, {\n      style: {\n        fill: 'currentcolor'\n      }\n    }), \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"), React.createElement(HTMLButtonClear, {\n      onClick: handleOnClear\n    }, React.createElement(IconNa, null), \"\\u041E\\u0447\\u0438\\u0441\\u0442\\u0438\\u0442\\u044C\"))));\n  }\n\n  return content;\n};","map":{"version":3,"sources":["../../../src/FormSchema/schema/schema.multi.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\r\nimport { IconCheck, IconNa } from '@distate/components/dist/icons';\r\nimport set from 'lodash.set';\r\nimport get from 'lodash.get';\r\nimport Modal from '../../Modal';\r\nimport Button from '../../Button';\r\nimport { widgets } from '../widgets';\r\nimport { Context } from '../context';\r\nimport { SchemaDefinition } from './index';\r\nimport { isObject, retrieveSchema, optionsMuliList, hasWidget } from '../utils';\r\nimport { HTMLFooter, HTMLButtonTrue, HTMLButtonClear } from '../form-schema.style';\r\nimport { HTMLMulti, HTMLMultiBody, HTMLMultiLabel, HTMLMultiPopup, HTMLMultiHeader, HTMLMultiPopupTitle } from '../styled/schema.multi.styled';\r\nconst SCHEMA_TYPE = '__type__';\r\nconst FIELD_SELECT_NAME = '__active__';\r\nexport const SchemaMulty = ({ schemaPath, schema, uiSchema, schemaName, formData = {} }) => {\r\n    const [isOpen, setOpen] = useState(false);\r\n    const [popupLabel, setPopupLabel] = useState();\r\n    const { formData: rootFormData, rootSchema, onChange } = useContext(Context);\r\n    // UI\r\n    const uiPopup = get(uiSchema, 'ui:popup');\r\n    const widget = get(uiSchema, 'ui:widget', 'select');\r\n    if (!hasWidget(widget)) {\r\n        throw new Error(`Could not find widgte ${widget}.`);\r\n    }\r\n    let child = [];\r\n    let multiSchema = {};\r\n    const multiShemas = schema.anyOf || schema.oneOf || schema.allOf || [];\r\n    const enumOptions = optionsMuliList(schema);\r\n    const isArraySchema = Array.isArray(multiShemas);\r\n    if (enumOptions.length === 0) {\r\n        throw new Error(`Could not find options in schema \"${schemaName}\"`);\r\n    }\r\n    const active = isArraySchema\r\n        ? get(rootFormData, [...schemaPath, FIELD_SELECT_NAME], enumOptions[0].value)\r\n        : Object.keys(formData).reduce((prev, key) => {\r\n            if (formData && formData[key]) {\r\n                return key;\r\n            }\r\n            return prev;\r\n        }, enumOptions[0].value);\r\n    const Widget = widgets[widget];\r\n    const isOne = schema.hasOwnProperty('oneOf');\r\n    const allOf = schema.hasOwnProperty('allOf');\r\n    useEffect(() => {\r\n        const { field } = uiPopup;\r\n        const path = [...schemaPath];\r\n        if (!field)\r\n            return;\r\n        if (!isArraySchema)\r\n            path.push(active);\r\n        path.push(field);\r\n        const data = get(rootFormData, path);\r\n        if (isObject(data) && data.hasOwnProperty('label')) {\r\n            setPopupLabel(data.label);\r\n        }\r\n    }, [uiPopup, rootFormData, schemaPath, isArraySchema, active]);\r\n    // Очищаем объект со значенниями\r\n    const getClearFormData = () => {\r\n        const currentSchemaPath = [...schemaPath];\r\n        currentSchemaPath.pop();\r\n        const currentFormData = currentSchemaPath.length\r\n            ? get(rootFormData, currentSchemaPath, {})\r\n            : rootFormData;\r\n        if (currentFormData[schemaName]) {\r\n            currentFormData[schemaName] = Object.entries(currentFormData[schemaName]).reduce((prev, [key, value]) => {\r\n                if (key === FIELD_SELECT_NAME) {\r\n                    prev[key] = value;\r\n                }\r\n                return prev;\r\n            }, {});\r\n        }\r\n        return Object.assign({}, rootFormData);\r\n    };\r\n    const handleOnClear = () => {\r\n        setPopupLabel(undefined);\r\n        onChange(getClearFormData());\r\n    };\r\n    const handleOnSubmit = () => {\r\n        setOpen(false);\r\n    };\r\n    const onClickOpenPopup = () => setOpen(true);\r\n    const onClickClosePopup = () => setOpen(false);\r\n    const onChangeWidget = (widgetName, value) => {\r\n        const formData = getClearFormData();\r\n        if (isArraySchema) {\r\n            set(formData, [...schemaPath, FIELD_SELECT_NAME], value);\r\n        }\r\n        else {\r\n            set(formData, [...schemaPath, value], true);\r\n        }\r\n        onChange(formData);\r\n    };\r\n    if (isOne) {\r\n        multiSchema = retrieveSchema(multiShemas[active], rootSchema) || {};\r\n        const path = isArraySchema ? schemaPath : [...schemaPath, active];\r\n        child = (React.createElement(SchemaDefinition, { schema: multiSchema, schemaPath: path, uiSchema: uiSchema[active] || uiSchema, formData: formData }));\r\n    }\r\n    else if (allOf) {\r\n        child = multiShemas.map((schema, index) => (React.createElement(SchemaDefinition, { key: index, schema: schema, schemaPath: schemaPath, uiSchema: uiSchema, formData: formData })));\r\n    }\r\n    const content = (React.createElement(HTMLMulti, null,\r\n        React.createElement(HTMLMultiHeader, null,\r\n            React.createElement(Widget, { name: schemaName, label: schema.title, formValue: active, options: { enumOptions }, onChange: onChangeWidget, uiSchema: uiSchema })),\r\n        child && React.createElement(HTMLMultiBody, null, child)));\r\n    if (isObject(uiPopup)) {\r\n        const { title, width } = uiPopup;\r\n        return (React.createElement(HTMLMultiPopup, null,\r\n            popupLabel && React.createElement(HTMLMultiLabel, null, popupLabel),\r\n            React.createElement(Button, { onClick: onClickOpenPopup }, \"\\u0418\\u0437\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C\"),\r\n            React.createElement(Modal, { isVisible: isOpen, hide: onClickClosePopup, width: width },\r\n                title && React.createElement(HTMLMultiPopupTitle, null, title),\r\n                content,\r\n                React.createElement(HTMLFooter, null,\r\n                    React.createElement(HTMLButtonTrue, { onClick: handleOnSubmit },\r\n                        React.createElement(IconCheck, { style: { fill: 'currentcolor' } }),\r\n                        \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"),\r\n                    React.createElement(HTMLButtonClear, { onClick: handleOnClear },\r\n                        React.createElement(IconNa, null),\r\n                        \"\\u041E\\u0447\\u0438\\u0441\\u0442\\u0438\\u0442\\u044C\")))));\r\n    }\r\n    return content;\r\n};\r\n//# sourceMappingURL=schema.multi.js.map"]},"metadata":{},"sourceType":"module"}