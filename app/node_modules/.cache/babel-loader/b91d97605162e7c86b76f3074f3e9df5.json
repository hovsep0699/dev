{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nvar RecoverRequest = /*#__PURE__*/function () {\n  function RecoverRequest(parameters) {\n    _classCallCheck(this, RecoverRequest);\n\n    if (!parameters) return;\n    if (parameters.email) this.email = parameters.email;\n    if (parameters.captcha) this.captcha = parameters.captcha;\n  }\n\n  _createClass(RecoverRequest, [{\n    key: \"email\",\n    set: function set(value) {\n      this._email = value;\n    },\n    get: function get() {\n      return this._email;\n    }\n  }, {\n    key: \"captcha\",\n    set: function set(value) {\n      this._captcha = value;\n    },\n    get: function get() {\n      return this._captcha;\n    }\n  }, {\n    key: \"error\",\n    set: function set(value) {\n      this._error = value;\n    },\n    get: function get() {\n      return this._error;\n    }\n  }], [{\n    key: \"clone\",\n    value: function clone(request) {\n      if (request === null || request === undefined) throw new Error('Следует передать запрос для восстановления пароля(RecoverRequest)');\n      if (!(request instanceof RecoverRequest)) throw new Error('Параметр должен быть подклассом RecoverRequest');\n      var newReq = new RecoverRequest();\n      newReq.email = request.email;\n      newReq.captcha = request.captcha;\n      newReq.error = request.error;\n      return newReq;\n    }\n  }]);\n\n  return RecoverRequest;\n}();\n\nexport default RecoverRequest;","map":{"version":3,"sources":["../../../src/application/auth/RecoverRequest.js"],"names":[],"mappings":";;;IAAM,c;AACJ,0BAAY,UAAZ,EAAsB;AAAA;;AACpB,QAAI,CAAC,UAAL,EAAiB;AACjB,QAAI,UAAU,CAAC,KAAf,EAAsB,KAAK,KAAL,GAAa,UAAU,CAAC,KAAxB;AACtB,QAAI,UAAU,CAAC,OAAf,EAAwB,KAAK,OAAL,GAAe,UAAU,CAAC,OAA1B;AACzB;;;;sBAYS,K,EAAK;AACb,WAAK,MAAL,GAAc,KAAd;AACD,K;wBAEQ;AACP,aAAO,KAAK,MAAZ;AACD;;;sBAEW,K,EAAK;AACf,WAAK,QAAL,GAAgB,KAAhB;AACD,K;wBAEU;AACT,aAAO,KAAK,QAAZ;AACD;;;sBAES,K,EAAK;AACb,WAAK,MAAL,GAAc,KAAd;AACD,K;wBAEQ;AACP,aAAO,KAAK,MAAZ;AACD;;;0BAhCY,O,EAAO;AAClB,UAAI,OAAO,KAAK,IAAZ,IAAoB,OAAO,KAAK,SAApC,EAA+C,MAAM,IAAI,KAAJ,CAAU,mEAAV,CAAN;AAC/C,UAAI,EAAE,OAAO,YAAY,cAArB,CAAJ,EAA0C,MAAM,IAAI,KAAJ,CAAU,gDAAV,CAAN;AAC1C,UAAM,MAAM,GAAG,IAAI,cAAJ,EAAf;AACA,MAAA,MAAM,CAAC,KAAP,GAAe,OAAO,CAAC,KAAvB;AACA,MAAA,MAAM,CAAC,OAAP,GAAiB,OAAO,CAAC,OAAzB;AACA,MAAA,MAAM,CAAC,KAAP,GAAe,OAAO,CAAC,KAAvB;AACA,aAAO,MAAP;AACD;;;;;;AA2BH,eAAe,cAAf","sourceRoot":"","sourcesContent":["class RecoverRequest {\r\n    constructor(parameters) {\r\n        if (!parameters)\r\n            return;\r\n        if (parameters.email)\r\n            this.email = parameters.email;\r\n        if (parameters.captcha)\r\n            this.captcha = parameters.captcha;\r\n    }\r\n    static clone(request) {\r\n        if (request === null || request === undefined)\r\n            throw new Error('Следует передать запрос для восстановления пароля(RecoverRequest)');\r\n        if (!(request instanceof RecoverRequest))\r\n            throw new Error('Параметр должен быть подклассом RecoverRequest');\r\n        const newReq = new RecoverRequest();\r\n        newReq.email = request.email;\r\n        newReq.captcha = request.captcha;\r\n        newReq.error = request.error;\r\n        return newReq;\r\n    }\r\n    set email(value) {\r\n        this._email = value;\r\n    }\r\n    get email() {\r\n        return this._email;\r\n    }\r\n    set captcha(value) {\r\n        this._captcha = value;\r\n    }\r\n    get captcha() {\r\n        return this._captcha;\r\n    }\r\n    set error(value) {\r\n        this._error = value;\r\n    }\r\n    get error() {\r\n        return this._error;\r\n    }\r\n}\r\nexport default RecoverRequest;\r\n//# sourceMappingURL=RecoverRequest.js.map"]},"metadata":{},"sourceType":"module"}