{"ast":null,"code":"export var cleanObject=function cleanObject(obj){// If obj is not an object or is null, return it\nif(obj===null||typeof obj!=='object'){return obj;}// Create a new object to hold cleaned data\nvar cleaned=Array.isArray(obj)?[]:{};// Iterate over each key in the object\nfor(var key in obj){if(obj.hasOwnProperty(key)){var value=cleanObject(obj[key]);// Recursively clean the value\n// Only add non-null and non-empty values to the cleaned object\nif(value!==null){cleaned[key]=value;}}}// If the cleaned object is empty, return null\nreturn Object.keys(cleaned).length===0?null:cleaned;};export var deepEqual=function deepEqual(obj1,obj2){if(obj1===obj2)return true;if(obj1==null||obj2==null||typeof obj1!=='object'||typeof obj2!=='object'){return false;}var keys1=Object.keys(obj1);var keys2=Object.keys(obj2);if(keys1.length!==keys2.length)return false;for(var _i=0,_keys=keys1;_i<_keys.length;_i++){var key=_keys[_i];if(!keys2.includes(key)||!deepEqual(obj1[key],obj2[key])){return false;}}return true;};export function compareArrays(arr,arr2){// Check if both arrays are null or undefined\nif(arr==null&&arr2==null)return true;// Check if one of the arrays is null or undefined\nif(arr==null||arr2==null)return false;// Check if both are arrays and of the same length\nif(!Array.isArray(arr)||!Array.isArray(arr2)||arr.length!==arr2.length){return false;}// Compare each element in both arrays\nfor(var i=0;i<arr.length;i++){if(!arr[i].compare(arr2[i])){return false;// Early return on first mismatch\n}}return true;// All elements matched\n}export function compareArraysBase(arr,arr2){// Check if both arrays are null or undefined\nif(arr==null&&arr2==null)return true;// Check if one of the arrays is null or undefined\nif(arr==null||arr2==null)return false;// Check if both are arrays and of the same length\nif(!Array.isArray(arr)||!Array.isArray(arr2)||arr.length!==arr2.length){return false;}// Compare each element in both arrays\nfor(var i=0;i<arr.length;i++){if(!arr[i].compare(arr2[i])){return false;// Early return on first mismatch\n}}return true;// All elements matched\n}","map":{"version":3,"sources":["C:/Users/Hovsep/Desktop/local/diflow_react/packages/app/src/pages/POA/MCHD_ROOT/utils/json_hepler.ts"],"names":["cleanObject","obj","cleaned","Array","isArray","key","hasOwnProperty","value","Object","keys","length","deepEqual","obj1","obj2","keys1","keys2","includes","compareArrays","arr","arr2","i","compare","compareArraysBase"],"mappings":"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","sourcesContent":["import {IModel, IModelBase} from \"../domain/model/IModel\";\r\n\r\nexport const cleanObject = (obj: Record<string, any>): Record<string, any> | null => {\r\n    // If obj is not an object or is null, return it\r\n    if (obj === null || typeof obj !== 'object') {\r\n        return obj;\r\n    }\r\n\r\n    // Create a new object to hold cleaned data\r\n    const cleaned: any = Array.isArray(obj) ? [] : {};\r\n\r\n    // Iterate over each key in the object\r\n    for (const key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            const value = cleanObject(obj[key]); // Recursively clean the value\r\n\r\n            // Only add non-null and non-empty values to the cleaned object\r\n            if (value !== null) {\r\n                cleaned[key] = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    // If the cleaned object is empty, return null\r\n    return Object.keys(cleaned).length === 0 ? null : cleaned;\r\n}\r\n\r\n\r\nexport const deepEqual = (obj1: any, obj2: any) => {\r\n    if (obj1 === obj2) return true;\r\n\r\n    if (obj1 == null || obj2 == null || typeof obj1 !== 'object' || typeof obj2 !== 'object') {\r\n        return false;\r\n    }\r\n\r\n    const keys1 = Object.keys(obj1);\r\n    const keys2 = Object.keys(obj2);\r\n\r\n    if (keys1.length !== keys2.length) return false;\r\n\r\n    for (const key of keys1) {\r\n        if (!keys2.includes(key) || !deepEqual(obj1[key], obj2[key])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function compareArrays<T extends IModel<T, any>>(arr: T[], arr2: T[]) {\r\n    // Check if both arrays are null or undefined\r\n    if (arr == null && arr2 == null) return true;\r\n    // Check if one of the arrays is null or undefined\r\n    if (arr == null || arr2 == null) return false;\r\n    // Check if both are arrays and of the same length\r\n    if (!Array.isArray(arr) || !Array.isArray(arr2) || arr.length !== arr2.length) {\r\n        return false;\r\n    }\r\n\r\n    // Compare each element in both arrays\r\n    for (let i = 0; i < arr.length; i++) {\r\n        if (!arr[i].compare(arr2[i])) {\r\n            return false; // Early return on first mismatch\r\n        }\r\n    }\r\n\r\n    return true; // All elements matched\r\n}\r\n\r\nexport function compareArraysBase<T extends IModelBase<T, any>>(arr: T[], arr2: T[]) {\r\n    // Check if both arrays are null or undefined\r\n    if (arr == null && arr2 == null) return true;\r\n    // Check if one of the arrays is null or undefined\r\n    if (arr == null || arr2 == null) return false;\r\n    // Check if both are arrays and of the same length\r\n    if (!Array.isArray(arr) || !Array.isArray(arr2) || arr.length !== arr2.length) {\r\n        return false;\r\n    }\r\n\r\n    // Compare each element in both arrays\r\n    for (let i = 0; i < arr.length; i++) {\r\n        if (!(arr[i] as T).compare(arr2[i])) {\r\n            return false; // Early return on first mismatch\r\n        }\r\n    }\r\n\r\n    return true; // All elements matched\r\n}"]},"metadata":{},"sourceType":"module"}