{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _objectSpread from\"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import React from'react';import AutocompleteGateway from'@distate/core/dist/application/autocomplete/AutocompleteGateway';import{AutocompleteDownshift}from'../../../../common/autocomplete-downshift';import{getExternalTypeToString}from'../../../../helpers/heplers';/** Автокомплит - Получатели */export var AutocompleteRecipient=function AutocompleteRecipient(props){var item=props.item,setItem=props.setItem,error=props.error,errors=props.errors,qParams=props.qParams,placeholder=props.placeholder;/** преобразование ответа сервера в массив для опций селекта контрагента */var divisionDataToOptions=function divisionDataToOptions(data){return data.map(function(item){var name=item===null||item===void 0?void 0:item.companyName;var inn=(item===null||item===void 0?void 0:item.companyInn)&&\"\\u0418\\u041D\\u041D: \".concat(item.companyInn);var ogrn=(item===null||item===void 0?void 0:item.companyOgrn)&&\"\\u041E\\u0413\\u0420\\u041D: \".concat(item===null||item===void 0?void 0:item.companyOgrn);var kpp=(item===null||item===void 0?void 0:item.companyKpp)&&\"\\u041A\\u041F\\u041F: \".concat(item===null||item===void 0?void 0:item.companyKpp);var externalType=getExternalTypeToString(item===null||item===void 0?void 0:item.companyExternalType,item===null||item===void 0?void 0:item.companyExternalOperator,item===null||item===void 0?void 0:item.companyNetwork);var label=[name,inn,ogrn,kpp,externalType].filter(Boolean).join(', ');return{value:item===null||item===void 0?void 0:item.id,label:label};});};var autocompleteGateway=new AutocompleteGateway();/** загрузка подходящих получателей в автокомплите */var toDivisionLoad=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(str){var _yield$autocompleteGa,_yield$autocompleteGa2,rows;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return autocompleteGateway.getRecipient(_objectSpread({all:str},qParams));case 2:_yield$autocompleteGa=_context.sent;_yield$autocompleteGa2=_yield$autocompleteGa.rows;rows=_yield$autocompleteGa2===void 0?[]:_yield$autocompleteGa2;return _context.abrupt(\"return\",rows);case 6:case\"end\":return _context.stop();}}},_callee);}));return function toDivisionLoad(_x){return _ref.apply(this,arguments);};}();return/*#__PURE__*/React.createElement(AutocompleteDownshift,{loadOptions:toDivisionLoad,onChange:setItem,mapData:divisionDataToOptions,initialInputValue:item===null||item===void 0?void 0:item.label,error:error,errors:errors,placeholder:placeholder,hasArrow:true});};","map":{"version":3,"sources":["C:/Users/Hovsep/Desktop/local/diflow_react/packages/app/src/pages/create-document/components/common/AutocompleteRecipient.tsx"],"names":["React","AutocompleteGateway","AutocompleteDownshift","getExternalTypeToString","AutocompleteRecipient","props","item","setItem","error","errors","qParams","placeholder","divisionDataToOptions","data","map","name","companyName","inn","companyInn","ogrn","companyOgrn","kpp","companyKpp","externalType","companyExternalType","companyExternalOperator","companyNetwork","label","filter","Boolean","join","value","id","autocompleteGateway","toDivisionLoad","str","getRecipient","all","rows"],"mappings":"6fAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,mBAAP,KAAgC,iEAAhC,CACA,OAASC,qBAAT,KAAsC,2CAAtC,CACA,OAASC,uBAAT,KAAwC,6BAAxC,CAeA,+BACA,MAAO,IAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAACC,KAAD,CAAkB,IAC7CC,CAAAA,IAD6C,CACUD,KADV,CAC7CC,IAD6C,CACvCC,OADuC,CACUF,KADV,CACvCE,OADuC,CAC9BC,KAD8B,CACUH,KADV,CAC9BG,KAD8B,CACvBC,MADuB,CACUJ,KADV,CACvBI,MADuB,CACfC,OADe,CACUL,KADV,CACfK,OADe,CACNC,WADM,CACUN,KADV,CACNM,WADM,CAGrD,2EACA,GAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAACC,IAAD,CAAiB,CAC7C,MAAOA,CAAAA,IAAI,CAACC,GAAL,CAAS,SAAAR,IAAI,CAAI,CACtB,GAAMS,CAAAA,IAAI,CAAGT,IAAH,SAAGA,IAAH,iBAAGA,IAAI,CAAEU,WAAnB,CACA,GAAMC,CAAAA,GAAG,CAAG,CAAAX,IAAI,OAAJ,EAAAA,IAAI,SAAJ,QAAAA,IAAI,CAAEY,UAAN,iCAA4BZ,IAAI,CAACY,UAAjC,CAAZ,CACA,GAAMC,CAAAA,IAAI,CAAG,CAAAb,IAAI,OAAJ,EAAAA,IAAI,SAAJ,QAAAA,IAAI,CAAEc,WAAN,uCAA8Bd,IAA9B,SAA8BA,IAA9B,iBAA8BA,IAAI,CAAEc,WAApC,CAAb,CACA,GAAMC,CAAAA,GAAG,CAAG,CAAAf,IAAI,OAAJ,EAAAA,IAAI,SAAJ,QAAAA,IAAI,CAAEgB,UAAN,iCAA4BhB,IAA5B,SAA4BA,IAA5B,iBAA4BA,IAAI,CAAEgB,UAAlC,CAAZ,CACA,GAAMC,CAAAA,YAAY,CAAGpB,uBAAuB,CAC1CG,IAD0C,SAC1CA,IAD0C,iBAC1CA,IAAI,CAAEkB,mBADoC,CAE1ClB,IAF0C,SAE1CA,IAF0C,iBAE1CA,IAAI,CAAEmB,uBAFoC,CAG1CnB,IAH0C,SAG1CA,IAH0C,iBAG1CA,IAAI,CAAEoB,cAHoC,CAA5C,CAMA,GAAMC,CAAAA,KAAK,CAAG,CAACZ,IAAD,CAAOE,GAAP,CAAYE,IAAZ,CAAkBE,GAAlB,CAAuBE,YAAvB,EAAqCK,MAArC,CAA4CC,OAA5C,EAAqDC,IAArD,CAA0D,IAA1D,CAAd,CACA,MAAO,CACLC,KAAK,CAAEzB,IAAF,SAAEA,IAAF,iBAAEA,IAAI,CAAE0B,EADR,CAELL,KAAK,CAALA,KAFK,CAAP,CAID,CAhBM,CAAP,CAiBD,CAlBD,CAoBA,GAAMM,CAAAA,mBAAmB,CAAG,GAAIhC,CAAAA,mBAAJ,EAA5B,CACA,qDACA,GAAMiC,CAAAA,cAAc,0FAAG,iBAAOC,GAAP,8LACOF,CAAAA,mBAAmB,CAACG,YAApB,gBAC1BC,GAAG,CAAEF,GADqB,EAEvBzB,OAFuB,EADP,yFACb4B,IADa,CACbA,IADa,iCACN,EADM,wDAKdA,IALc,wDAAH,kBAAdJ,CAAAA,cAAc,4CAApB,CAQA,mBACE,oBAAC,qBAAD,EACE,WAAW,CAAEA,cADf,CAEE,QAAQ,CAAE3B,OAFZ,CAGE,OAAO,CAAEK,qBAHX,CAIE,iBAAiB,CAAEN,IAAF,SAAEA,IAAF,iBAAEA,IAAI,CAAEqB,KAJ3B,CAKE,KAAK,CAAEnB,KALT,CAME,MAAM,CAAEC,MANV,CAOE,WAAW,CAAEE,WAPf,CAQE,QAAQ,KARV,EADF,CAYD,CA9CM","sourcesContent":["import React from 'react';\r\nimport AutocompleteGateway from '@distate/core/dist/application/autocomplete/AutocompleteGateway';\r\nimport { AutocompleteDownshift } from '../../../../common/autocomplete-downshift';\r\nimport { getExternalTypeToString } from '../../../../helpers/heplers';\r\n\r\ntype Props = {\r\n  item?: {\r\n    value: number;\r\n    label: string;\r\n  };\r\n  setItem: Function;\r\n  error?: boolean;\r\n  errors?: [];\r\n  /** query-параметры (кроме all) */\r\n  qParams?: Object;\r\n  placeholder?: string;\r\n};\r\n\r\n/** Автокомплит - Получатели */\r\nexport const AutocompleteRecipient = (props: Props) => {\r\n  const { item, setItem, error, errors, qParams, placeholder } = props;\r\n\r\n  /** преобразование ответа сервера в массив для опций селекта контрагента */\r\n  const divisionDataToOptions = (data: any[]) => {\r\n    return data.map(item => {\r\n      const name = item?.companyName;\r\n      const inn = item?.companyInn && `ИНН: ${item.companyInn}`;\r\n      const ogrn = item?.companyOgrn && `ОГРН: ${item?.companyOgrn}`;\r\n      const kpp = item?.companyKpp && `КПП: ${item?.companyKpp}`;\r\n      const externalType = getExternalTypeToString(\r\n        item?.companyExternalType,\r\n        item?.companyExternalOperator,\r\n        item?.companyNetwork\r\n      );\r\n\r\n      const label = [name, inn, ogrn, kpp, externalType].filter(Boolean).join(', ');\r\n      return {\r\n        value: item?.id,\r\n        label\r\n      };\r\n    });\r\n  };\r\n\r\n  const autocompleteGateway = new AutocompleteGateway();\r\n  /** загрузка подходящих получателей в автокомплите */\r\n  const toDivisionLoad = async (str: string) => {\r\n    const { rows = [] } = await autocompleteGateway.getRecipient({\r\n      all: str,\r\n      ...qParams\r\n    });\r\n    return rows;\r\n  };\r\n\r\n  return (\r\n    <AutocompleteDownshift\r\n      loadOptions={toDivisionLoad}\r\n      onChange={setItem}\r\n      mapData={divisionDataToOptions}\r\n      initialInputValue={item?.label}\r\n      error={error}\r\n      errors={errors}\r\n      placeholder={placeholder}\r\n      hasArrow\r\n    />\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}