{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { assert } from 'chai';\nimport AJAX from '../../infrastructure/AJAX';\nimport errFactory from '../error/ErrorFactory';\nimport { CHANGE_SETTINGS } from '../error/Error';\nimport Setting from '../../domain/settings/Setting';\nimport Environment from '../Environment';\n\nvar mapToSettings = function mapToSettings(_ref) {\n  var rows = _ref.rows;\n  return rows.map(function (_ref2) {\n    var type_id = _ref2.type_id,\n        systemName = _ref2.systemName,\n        title = _ref2.title,\n        comment = _ref2.comment,\n        email = _ref2.email;\n    return [systemName, new Setting(type_id, systemName, title, comment, email)];\n  });\n};\n\nvar handleResponse = function handleResponse(data) {\n  if (!data.rows) return {\n    rows: []\n  };\n  return data;\n};\n\nvar SettingsService = /*#__PURE__*/function () {\n  function SettingsService() {\n    _classCallCheck(this, SettingsService);\n\n    this._settings = new Map();\n    this._isAlreadyGetNofificationSettings = false;\n  }\n\n  _createClass(SettingsService, [{\n    key: \"getNotifications\",\n    value: function getNotifications() {\n      var _this = this;\n\n      if (this._isAlreadyGetNofificationSettings) {\n        return this._settings;\n      }\n\n      return Environment.getAuthGateway().notificationSettings().then(handleResponse).then(mapToSettings).then(function (settings) {\n        _this._settings = new Map(settings);\n        _this._isAlreadyGetNofificationSettings = true;\n      });\n    }\n  }, {\n    key: \"updateNotifications\",\n    value: function updateNotifications(settings) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var promises;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                promises = [];\n                settings.forEach(function (setting) {\n                  return promises.push(_this2.updateNotification(setting));\n                });\n                return _context.abrupt(\"return\", Promise.all(promises));\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    }\n  }, {\n    key: \"updateNotification\",\n    value: function updateNotification(setting) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var id, field, title, description, value, url, formData;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                assert.instanceOf(setting, Setting);\n                id = setting.id, field = setting.field, title = setting.title, description = setting.description, value = setting.value;\n                url = \"/front/notification/setting/\".concat(id);\n                formData = new FormData();\n                formData.append('email', value ? 1 : 0); // TODO когда будут готовы задачи RCT-61, RCT-62, эта строка измениться\n\n                _context2.next = 8;\n                return AJAX.postFormData(url, formData);\n\n              case 8:\n                this._settings.set(field, new Setting(id, field, title, description, value));\n\n                return _context2.abrupt(\"return\", this._settings);\n\n              case 12:\n                _context2.prev = 12;\n                _context2.t0 = _context2[\"catch\"](0);\n                throw errFactory(CHANGE_SETTINGS, \"\\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u043E\\u0431\\u043D\\u043E\\u0432\\u0438\\u0442\\u044C \\u043D\\u0430\\u0441\\u0442\\u0440\\u043E\\u0439\\u043A\\u0443 \".concat(setting.name), _context2.t0);\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 12]]);\n      }));\n    }\n  }]);\n\n  return SettingsService;\n}();\n\nvar instance = new SettingsService();\nexport default instance;","map":{"version":3,"sources":["../../../src/application/settings/SettingsService.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,MAAT,QAAuB,MAAvB;AACA,OAAO,IAAP,MAAiB,2BAAjB;AACA,OAAO,UAAP,MAAuB,uBAAvB;AACA,SAAS,eAAT,QAAgC,gBAAhC;AACA,OAAO,OAAP,MAAoB,+BAApB;AACA,OAAO,WAAP,MAAwB,gBAAxB;;AAEA,IAAM,aAAa,GAAG,SAAhB,aAAgB;AAAA,MAAG,IAAH,QAAG,IAAH;AAAA,SACpB,IAAI,CAAC,GAAL,CAAS;AAAA,QAAG,OAAH,SAAG,OAAH;AAAA,QAAY,UAAZ,SAAY,UAAZ;AAAA,QAAwB,KAAxB,SAAwB,KAAxB;AAAA,QAA+B,OAA/B,SAA+B,OAA/B;AAAA,QAAwC,KAAxC,SAAwC,KAAxC;AAAA,WAAoD,CAC3D,UAD2D,EAE3D,IAAI,OAAJ,CAAY,OAAZ,EAAqB,UAArB,EAAiC,KAAjC,EAAwC,OAAxC,EAAiD,KAAjD,CAF2D,CAApD;AAAA,GAAT,CADoB;AAAA,CAAtB;;AAMA,IAAM,cAAc,GAAG,SAAjB,cAAiB,CAAA,IAAI,EAAG;AAC5B,MAAI,CAAC,IAAI,CAAC,IAAV,EAAgB,OAAO;AAAE,IAAA,IAAI,EAAE;AAAR,GAAP;AAChB,SAAO,IAAP;AACD,CAHD;;IAKM,e;AACJ,6BAAA;AAAA;;AACE,SAAK,SAAL,GAAiB,IAAI,GAAJ,EAAjB;AACA,SAAK,iCAAL,GAAyC,KAAzC;AACD;;;;uCAEe;AAAA;;AACd,UAAI,KAAK,iCAAT,EAA4C;AAC1C,eAAO,KAAK,SAAZ;AACD;;AACD,aAAO,WAAW,CAAC,cAAZ,GACJ,oBADI,GAEJ,IAFI,CAEC,cAFD,EAGJ,IAHI,CAGC,aAHD,EAIJ,IAJI,CAIC,UAAA,QAAQ,EAAG;AACf,QAAA,KAAI,CAAC,SAAL,GAAiB,IAAI,GAAJ,CAAQ,QAAR,CAAjB;AACA,QAAA,KAAI,CAAC,iCAAL,GAAyC,IAAzC;AACD,OAPI,CAAP;AAQD;;;wCAEyB,Q,EAAQ;;;;;;;;;AAC1B,gBAAA,Q,GAAW,E;AACjB,gBAAA,QAAQ,CAAC,OAAT,CAAiB,UAAA,OAAO;AAAA,yBAAI,QAAQ,CAAC,IAAT,CAAc,MAAI,CAAC,kBAAL,CAAwB,OAAxB,CAAd,CAAJ;AAAA,iBAAxB;iDACO,OAAO,CAAC,GAAR,CAAY,QAAZ,C;;;;;;;;;AACR;;;uCAEwB,O,EAAO;;;;;;;;AAE5B,gBAAA,MAAM,CAAC,UAAP,CAAkB,OAAlB,EAA2B,OAA3B;AAEQ,gBAAA,E,GAAyC,O,CAAzC,E,EAAI,K,GAAqC,O,CAArC,K,EAAO,K,GAA8B,O,CAA9B,K,EAAO,W,GAAuB,O,CAAvB,W,EAAa,K,GAAU,O,CAAV,K;AAEjC,gBAAA,G,yCAAqC,E;AACrC,gBAAA,Q,GAAW,IAAI,QAAJ,E;AACjB,gBAAA,QAAQ,CAAC,MAAT,CAAgB,OAAhB,EAAyB,KAAK,GAAG,CAAH,GAAO,CAArC,E,CAAyC;;;AAEzC,uBAAM,IAAI,CAAC,YAAL,CAAkB,GAAlB,EAAuB,QAAvB,CAAN;;;AAEA,qBAAK,SAAL,CAAe,GAAf,CAAmB,KAAnB,EAA0B,IAAI,OAAJ,CAAY,EAAZ,EAAgB,KAAhB,EAAuB,KAAvB,EAA8B,WAA9B,EAA2C,KAA3C,CAA1B;;kDACO,KAAK,S;;;;;sBAEN,UAAU,CAAC,eAAD,4KAAmD,OAAO,CAAC,IAA3D,gB;;;;;;;;;AAEnB;;;;;;AAGH,IAAM,QAAQ,GAAG,IAAI,eAAJ,EAAjB;AACA,eAAe,QAAf","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { assert } from 'chai';\r\nimport AJAX from '../../infrastructure/AJAX';\r\nimport errFactory from '../error/ErrorFactory';\r\nimport { CHANGE_SETTINGS } from '../error/Error';\r\nimport Setting from '../../domain/settings/Setting';\r\nimport Environment from '../Environment';\r\nconst mapToSettings = ({ rows }) => rows.map(({ type_id, systemName, title, comment, email }) => [\r\n    systemName,\r\n    new Setting(type_id, systemName, title, comment, email)\r\n]);\r\nconst handleResponse = data => {\r\n    if (!data.rows)\r\n        return { rows: [] };\r\n    return data;\r\n};\r\nclass SettingsService {\r\n    constructor() {\r\n        this._settings = new Map();\r\n        this._isAlreadyGetNofificationSettings = false;\r\n    }\r\n    getNotifications() {\r\n        if (this._isAlreadyGetNofificationSettings) {\r\n            return this._settings;\r\n        }\r\n        return Environment.getAuthGateway()\r\n            .notificationSettings()\r\n            .then(handleResponse)\r\n            .then(mapToSettings)\r\n            .then(settings => {\r\n            this._settings = new Map(settings);\r\n            this._isAlreadyGetNofificationSettings = true;\r\n        });\r\n    }\r\n    updateNotifications(settings) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const promises = [];\r\n            settings.forEach(setting => promises.push(this.updateNotification(setting)));\r\n            return Promise.all(promises);\r\n        });\r\n    }\r\n    updateNotification(setting) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                assert.instanceOf(setting, Setting);\r\n                const { id, field, title, description, value } = setting;\r\n                const url = `/front/notification/setting/${id}`;\r\n                const formData = new FormData();\r\n                formData.append('email', value ? 1 : 0); // TODO когда будут готовы задачи RCT-61, RCT-62, эта строка измениться\r\n                yield AJAX.postFormData(url, formData);\r\n                this._settings.set(field, new Setting(id, field, title, description, value));\r\n                return this._settings;\r\n            }\r\n            catch (error) {\r\n                throw errFactory(CHANGE_SETTINGS, `Не удалось обновить настройку ${setting.name}`, error);\r\n            }\r\n        });\r\n    }\r\n}\r\nconst instance = new SettingsService();\r\nexport default instance;\r\n//# sourceMappingURL=SettingsService.js.map"]},"metadata":{},"sourceType":"module"}