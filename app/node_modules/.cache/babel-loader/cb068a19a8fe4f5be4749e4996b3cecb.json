{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport IndependentDepartmentAddress from './IndependentDepartmentAddress';\nimport Employee from './Employee';\nimport EmployeeCertificateForSigningDocuments from './EmployeeCertificateForSigningDocuments';\nimport EmployeeCertificateForEnterSystem from './EmployeeCertificateForEnterSystem';\n/* Обособленное подразделение (Филиал или Представительство) */\n\nvar IndependentDepartment = /*#__PURE__*/function () {\n  function IndependentDepartment(data) {\n    _classCallCheck(this, IndependentDepartment);\n\n    this._id = data.id;\n    this._kpp = data.kpp;\n    this._okpo = data.okpo; // у компании тоже есть, но он будет другой!!! (используется в накладной)\n\n    this._title = data.title;\n\n    if (data.address && !(data.address instanceof IndependentDepartmentAddress)) {\n      throw new Error('Адрес в подразделении должен быть экземпляром типа IndependentDepartmentAddress');\n    }\n\n    this._address = data.address;\n    this._employees = new Map();\n  }\n\n  _createClass(IndependentDepartment, [{\n    key: \"addEmployee\",\n    value: function addEmployee(employee) {\n      if (!(employee instanceof Employee)) {\n        throw new Error('Параметр должен быть экземпляром класса legal_entity/Employee');\n      }\n\n      this._employees.set(employee.id, employee);\n    }\n  }, {\n    key: \"assignCertificateForSigningDocumentToEmployee\",\n    value: function assignCertificateForSigningDocumentToEmployee(employeeId, certificate) {\n      if (!(certificate instanceof EmployeeCertificateForSigningDocuments)) {\n        throw new Error('Параметр должен быть экземпляром типа EmployeeCertificateForEnterSystem');\n      }\n\n      var employee = this._employees.get(employeeId);\n\n      if (!employee) {\n        throw new Error('Невозможно добавить сертификат сотруднику, поскольку такого сотрудника не существует');\n      }\n\n      employee.assignCertificateToSignDocument(certificate);\n    }\n  }, {\n    key: \"addCertificateForEnterSystemToEmployee\",\n    value: function addCertificateForEnterSystemToEmployee(employeeId, certificate) {\n      if (!(certificate instanceof EmployeeCertificateForEnterSystem)) {\n        throw new Error('Параметр должен быть экземпляром типа EmployeeCertificateForEnterSystem');\n      }\n\n      var employee = this._employees.get(employeeId);\n\n      if (!employee) {\n        throw new Error('Невозможно добавить сертификат сотруднику, поскольку такого сотрудника не существует');\n      }\n\n      employee.addCertificateToEnterSystem(certificate);\n    }\n  }, {\n    key: \"kpp\",\n    get: function get() {\n      return this._kpp;\n    },\n    set: function set(value) {\n      this._kpp = value;\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._id;\n    }\n  }]);\n\n  return IndependentDepartment;\n}();\n\nexport { IndependentDepartment as default };","map":{"version":3,"sources":["../../../src/domain/legal_entity/IndependentDepartment.js"],"names":[],"mappings":";;AAAA,OAAO,4BAAP,MAAyC,gCAAzC;AACA,OAAO,QAAP,MAAqB,YAArB;AACA,OAAO,sCAAP,MAAmD,0CAAnD;AACA,OAAO,iCAAP,MAA8C,qCAA9C;AAEA;;IACqB,qB;AACnB,iCAAY,IAAZ,EAAgB;AAAA;;AACd,SAAK,GAAL,GAAW,IAAI,CAAC,EAAhB;AACA,SAAK,IAAL,GAAY,IAAI,CAAC,GAAjB;AACA,SAAK,KAAL,GAAa,IAAI,CAAC,IAAlB,CAHc,CAGU;;AACxB,SAAK,MAAL,GAAc,IAAI,CAAC,KAAnB;;AACA,QAAI,IAAI,CAAC,OAAL,IAAgB,EAAE,IAAI,CAAC,OAAL,YAAwB,4BAA1B,CAApB,EAA6E;AAC3E,YAAM,IAAI,KAAJ,CAAU,iFAAV,CAAN;AACD;;AACD,SAAK,QAAL,GAAgB,IAAI,CAAC,OAArB;AACA,SAAK,UAAL,GAAkB,IAAI,GAAJ,EAAlB;AACD;;;;gCAEW,Q,EAAQ;AAClB,UAAI,EAAE,QAAQ,YAAY,QAAtB,CAAJ,EAAqC;AACnC,cAAM,IAAI,KAAJ,CAAU,+DAAV,CAAN;AACD;;AACD,WAAK,UAAL,CAAgB,GAAhB,CAAoB,QAAQ,CAAC,EAA7B,EAAiC,QAAjC;AACD;;;kEAE6C,U,EAAY,W,EAAW;AACnE,UAAI,EAAE,WAAW,YAAY,sCAAzB,CAAJ,EAAsE;AACpE,cAAM,IAAI,KAAJ,CAAU,yEAAV,CAAN;AACD;;AACD,UAAM,QAAQ,GAAG,KAAK,UAAL,CAAgB,GAAhB,CAAoB,UAApB,CAAjB;;AACA,UAAI,CAAC,QAAL,EAAe;AACb,cAAM,IAAI,KAAJ,CAAU,sFAAV,CAAN;AACD;;AACD,MAAA,QAAQ,CAAC,+BAAT,CAAyC,WAAzC;AACD;;;2DAEsC,U,EAAY,W,EAAW;AAC5D,UAAI,EAAE,WAAW,YAAY,iCAAzB,CAAJ,EAAiE;AAC/D,cAAM,IAAI,KAAJ,CAAU,yEAAV,CAAN;AACD;;AAED,UAAM,QAAQ,GAAG,KAAK,UAAL,CAAgB,GAAhB,CAAoB,UAApB,CAAjB;;AACA,UAAI,CAAC,QAAL,EAAe;AACb,cAAM,IAAI,KAAJ,CAAU,sFAAV,CAAN;AACD;;AAED,MAAA,QAAQ,CAAC,2BAAT,CAAqC,WAArC;AACD;;;wBAEM;AACL,aAAO,KAAK,IAAZ;AACD,K;sBAEO,K,EAAK;AACX,WAAK,IAAL,GAAY,KAAZ;AACD;;;wBAEK;AACJ,aAAO,KAAK,GAAZ;AACD;;;;;;SAtDkB,qB","sourceRoot":"","sourcesContent":["import IndependentDepartmentAddress from './IndependentDepartmentAddress';\r\nimport Employee from './Employee';\r\nimport EmployeeCertificateForSigningDocuments from './EmployeeCertificateForSigningDocuments';\r\nimport EmployeeCertificateForEnterSystem from './EmployeeCertificateForEnterSystem';\r\n/* Обособленное подразделение (Филиал или Представительство) */\r\nexport default class IndependentDepartment {\r\n    constructor(data) {\r\n        this._id = data.id;\r\n        this._kpp = data.kpp;\r\n        this._okpo = data.okpo; // у компании тоже есть, но он будет другой!!! (используется в накладной)\r\n        this._title = data.title;\r\n        if (data.address && !(data.address instanceof IndependentDepartmentAddress)) {\r\n            throw new Error('Адрес в подразделении должен быть экземпляром типа IndependentDepartmentAddress');\r\n        }\r\n        this._address = data.address;\r\n        this._employees = new Map();\r\n    }\r\n    addEmployee(employee) {\r\n        if (!(employee instanceof Employee)) {\r\n            throw new Error('Параметр должен быть экземпляром класса legal_entity/Employee');\r\n        }\r\n        this._employees.set(employee.id, employee);\r\n    }\r\n    assignCertificateForSigningDocumentToEmployee(employeeId, certificate) {\r\n        if (!(certificate instanceof EmployeeCertificateForSigningDocuments)) {\r\n            throw new Error('Параметр должен быть экземпляром типа EmployeeCertificateForEnterSystem');\r\n        }\r\n        const employee = this._employees.get(employeeId);\r\n        if (!employee) {\r\n            throw new Error('Невозможно добавить сертификат сотруднику, поскольку такого сотрудника не существует');\r\n        }\r\n        employee.assignCertificateToSignDocument(certificate);\r\n    }\r\n    addCertificateForEnterSystemToEmployee(employeeId, certificate) {\r\n        if (!(certificate instanceof EmployeeCertificateForEnterSystem)) {\r\n            throw new Error('Параметр должен быть экземпляром типа EmployeeCertificateForEnterSystem');\r\n        }\r\n        const employee = this._employees.get(employeeId);\r\n        if (!employee) {\r\n            throw new Error('Невозможно добавить сертификат сотруднику, поскольку такого сотрудника не существует');\r\n        }\r\n        employee.addCertificateToEnterSystem(certificate);\r\n    }\r\n    get kpp() {\r\n        return this._kpp;\r\n    }\r\n    set kpp(value) {\r\n        this._kpp = value;\r\n    }\r\n    get id() {\r\n        return this._id;\r\n    }\r\n}\r\n//# sourceMappingURL=IndependentDepartment.js.map"]},"metadata":{},"sourceType":"module"}