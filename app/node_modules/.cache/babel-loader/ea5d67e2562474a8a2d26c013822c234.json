{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport DomainCertificate from '../../domain/common/Certificate';\n\nvar RegisterRequest = /*#__PURE__*/function () {\n  function RegisterRequest(parameters) {\n    _classCallCheck(this, RegisterRequest);\n\n    if (!parameters) return;\n    if (parameters.certificate) this.certificate = parameters.certificate;\n    if (parameters.ogrn) this.ogrn = parameters.ogrn;\n    if (parameters.email) this.email = parameters.email;\n    if (parameters.surname) this.surname = parameters.surname;\n    if (parameters.name) this.name = parameters.name;\n    if (parameters.patronymic) this.patronymic = parameters.patronymic;\n    if (parameters.position) this.position = parameters.position;\n    if (parameters.password) this.password = parameters.password;\n    if (parameters.captcha) this.captcha = parameters.captcha;\n    if (parameters.isNaturalCreated) this.isNaturalCreated = parameters.isNaturalCreated;\n    if (parameters.isCompanyCreated) this.isCompanyCreated = parameters.isCompanyCreated;\n  }\n\n  _createClass(RegisterRequest, [{\n    key: \"ogrn\",\n    set: function set(value) {\n      this._ogrn = value;\n    },\n    get: function get() {\n      return this._ogrn;\n    }\n  }, {\n    key: \"email\",\n    set: function set(value) {\n      this._email = value;\n    },\n    get: function get() {\n      return this._email;\n    }\n  }, {\n    key: \"surname\",\n    set: function set(value) {\n      this._surname = value;\n    },\n    get: function get() {\n      return this._surname;\n    }\n  }, {\n    key: \"name\",\n    set: function set(value) {\n      this._name = value;\n    },\n    get: function get() {\n      return this._name;\n    }\n  }, {\n    key: \"patronymic\",\n    set: function set(value) {\n      this._patronymic = value;\n    },\n    get: function get() {\n      return this._patronymic;\n    }\n  }, {\n    key: \"position\",\n    set: function set(value) {\n      this._position = value;\n    },\n    get: function get() {\n      return this._position;\n    }\n  }, {\n    key: \"password\",\n    set: function set(value) {\n      this._password = value;\n    },\n    get: function get() {\n      return this._password;\n    }\n  }, {\n    key: \"captcha\",\n    set: function set(value) {\n      this._captcha = value;\n    },\n    get: function get() {\n      return this._captcha;\n    }\n  }, {\n    key: \"certificate\",\n    set: function set(value) {\n      if (!(value instanceof DomainCertificate)) {\n        throw new Error('Неверный тип certificate. Должен быть DomainCertificate');\n      }\n\n      this._certificate = value;\n    },\n    get: function get() {\n      return this._certificate;\n    }\n  }, {\n    key: \"loginString\",\n    set: function set(value) {\n      this._loginString = value;\n    },\n    get: function get() {\n      return this._loginString;\n    }\n  }, {\n    key: \"loginStringSignedData\",\n    set: function set(value) {\n      this._loginStringSignedData = value;\n    },\n    get: function get() {\n      return this._loginStringSignedData;\n    }\n  }, {\n    key: \"parameters\",\n    set: function set(value) {\n      this._parameters = value;\n    },\n    get: function get() {\n      return this._parameters;\n    }\n  }, {\n    key: \"error\",\n    set: function set(value) {\n      this._error = value;\n    },\n    get: function get() {\n      return this._error;\n    }\n  }, {\n    key: \"isCompanyCreated\",\n    set: function set(value) {\n      this._isCompanyCreated = value;\n    },\n    get: function get() {\n      return this._isCompanyCreated;\n    }\n  }, {\n    key: \"isNaturalCreated\",\n    set: function set(value) {\n      this._isNaturalCreated = value;\n    },\n    get: function get() {\n      return this._isNaturalCreated;\n    }\n  }], [{\n    key: \"clone\",\n    value: function clone(request) {\n      if (request === null || request === undefined) throw new Error('Следует передать запрос для авторизации(RegisterRequest)');\n      if (!(request instanceof RegisterRequest)) throw new Error('Параметр должен быть подклассом RegisterRequest');\n      var newReq = new RegisterRequest();\n      newReq.ogrn = request.ogrn;\n      newReq.email = request.email;\n      newReq.surname = request.surname;\n      newReq.name = request.name;\n      newReq.patronymic = request.patronymic;\n      newReq.position = request.position;\n      newReq.password = request.password;\n      newReq.captcha = request.captcha;\n      newReq.parameters = request.parameters;\n\n      if (request.certificate) {\n        newReq.certificate = request.certificate.clone();\n      }\n\n      newReq.loginString = request.loginString;\n      newReq.loginStringSignedData = request.loginStringSignedData;\n      newReq.error = request.error;\n      newReq.isCompanyCreated = request.isCompanyCreated;\n      newReq.isNaturalCreated = request.isNaturalCreated;\n      return newReq;\n    }\n  }]);\n\n  return RegisterRequest;\n}();\n\nexport default RegisterRequest;","map":{"version":3,"sources":["../../../src/application/register/RegisterRequest.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import DomainCertificate from '../../domain/common/Certificate';\r\nclass RegisterRequest {\r\n    constructor(parameters) {\r\n        if (!parameters)\r\n            return;\r\n        if (parameters.certificate)\r\n            this.certificate = parameters.certificate;\r\n        if (parameters.ogrn)\r\n            this.ogrn = parameters.ogrn;\r\n        if (parameters.email)\r\n            this.email = parameters.email;\r\n        if (parameters.surname)\r\n            this.surname = parameters.surname;\r\n        if (parameters.name)\r\n            this.name = parameters.name;\r\n        if (parameters.patronymic)\r\n            this.patronymic = parameters.patronymic;\r\n        if (parameters.position)\r\n            this.position = parameters.position;\r\n        if (parameters.password)\r\n            this.password = parameters.password;\r\n        if (parameters.captcha)\r\n            this.captcha = parameters.captcha;\r\n        if (parameters.isNaturalCreated)\r\n            this.isNaturalCreated = parameters.isNaturalCreated;\r\n        if (parameters.isCompanyCreated)\r\n            this.isCompanyCreated = parameters.isCompanyCreated;\r\n    }\r\n    static clone(request) {\r\n        if (request === null || request === undefined)\r\n            throw new Error('Следует передать запрос для авторизации(RegisterRequest)');\r\n        if (!(request instanceof RegisterRequest))\r\n            throw new Error('Параметр должен быть подклассом RegisterRequest');\r\n        const newReq = new RegisterRequest();\r\n        newReq.ogrn = request.ogrn;\r\n        newReq.email = request.email;\r\n        newReq.surname = request.surname;\r\n        newReq.name = request.name;\r\n        newReq.patronymic = request.patronymic;\r\n        newReq.position = request.position;\r\n        newReq.password = request.password;\r\n        newReq.captcha = request.captcha;\r\n        newReq.parameters = request.parameters;\r\n        if (request.certificate) {\r\n            newReq.certificate = request.certificate.clone();\r\n        }\r\n        newReq.loginString = request.loginString;\r\n        newReq.loginStringSignedData = request.loginStringSignedData;\r\n        newReq.error = request.error;\r\n        newReq.isCompanyCreated = request.isCompanyCreated;\r\n        newReq.isNaturalCreated = request.isNaturalCreated;\r\n        return newReq;\r\n    }\r\n    set ogrn(value) {\r\n        this._ogrn = value;\r\n    }\r\n    get ogrn() {\r\n        return this._ogrn;\r\n    }\r\n    set email(value) {\r\n        this._email = value;\r\n    }\r\n    get email() {\r\n        return this._email;\r\n    }\r\n    set surname(value) {\r\n        this._surname = value;\r\n    }\r\n    get surname() {\r\n        return this._surname;\r\n    }\r\n    set name(value) {\r\n        this._name = value;\r\n    }\r\n    get name() {\r\n        return this._name;\r\n    }\r\n    set patronymic(value) {\r\n        this._patronymic = value;\r\n    }\r\n    get patronymic() {\r\n        return this._patronymic;\r\n    }\r\n    set position(value) {\r\n        this._position = value;\r\n    }\r\n    get position() {\r\n        return this._position;\r\n    }\r\n    set password(value) {\r\n        this._password = value;\r\n    }\r\n    get password() {\r\n        return this._password;\r\n    }\r\n    set captcha(value) {\r\n        this._captcha = value;\r\n    }\r\n    get captcha() {\r\n        return this._captcha;\r\n    }\r\n    set certificate(value) {\r\n        if (!(value instanceof DomainCertificate)) {\r\n            throw new Error('Неверный тип certificate. Должен быть DomainCertificate');\r\n        }\r\n        this._certificate = value;\r\n    }\r\n    get certificate() {\r\n        return this._certificate;\r\n    }\r\n    set loginString(value) {\r\n        this._loginString = value;\r\n    }\r\n    get loginString() {\r\n        return this._loginString;\r\n    }\r\n    set loginStringSignedData(value) {\r\n        this._loginStringSignedData = value;\r\n    }\r\n    get loginStringSignedData() {\r\n        return this._loginStringSignedData;\r\n    }\r\n    set parameters(value) {\r\n        this._parameters = value;\r\n    }\r\n    get parameters() {\r\n        return this._parameters;\r\n    }\r\n    set error(value) {\r\n        this._error = value;\r\n    }\r\n    get error() {\r\n        return this._error;\r\n    }\r\n    set isCompanyCreated(value) {\r\n        this._isCompanyCreated = value;\r\n    }\r\n    get isCompanyCreated() {\r\n        return this._isCompanyCreated;\r\n    }\r\n    set isNaturalCreated(value) {\r\n        this._isNaturalCreated = value;\r\n    }\r\n    get isNaturalCreated() {\r\n        return this._isNaturalCreated;\r\n    }\r\n}\r\nexport default RegisterRequest;\r\n//# sourceMappingURL=RegisterRequest.js.map"]},"metadata":{},"sourceType":"module"}