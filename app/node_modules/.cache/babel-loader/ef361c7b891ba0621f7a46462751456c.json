{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _get from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport HasAuthHandlerBase from '../HasAuthHandlerBase';\nimport IPCompany from '../../../../domain/individual_entrepreneur/Company';\nimport ULCompany from '../../../../domain/legal_entity/Company';\nimport NoLegalAddress from '../../../../domain/common/NoLegalAddress';\nimport NoIFNS from '../../../../domain/ifns/NoIFNS';\nimport AuthRequest from '../../AuthRequest';\nimport LegalAddress from '../../../../domain/common/LegalAddress';\nimport PostIndex from '../../../../domain/common/address/PostIndex';\nimport Region from '../../../../domain/common/address/Region';\nimport City from '../../../../domain/common/address/City';\nimport Settlement from '../../../../domain/common/address/Settlement';\nimport District from '../../../../domain/common/address/District';\nimport Street from '../../../../domain/common/address/Street';\nimport Building from '../../../../domain/common/address/Building';\nimport House from '../../../../domain/common/address/House';\nimport Room from '../../../../domain/common/address/Room';\nimport IFNS from '../../../../domain/ifns/IFNS';\nimport IndependentDepartment from '../../../../domain/legal_entity/IndependentDepartment';\nimport IPInternalDepartment from '../../../../domain/individual_entrepreneur/InternalDepartment';\nimport KPP from '../../../../domain/legal_entity/vo/KPP';\nimport ULEmployee from '../../../../domain/legal_entity/Employee';\nimport OKPO_UL from '../../../../domain/legal_entity/vo/OKPO';\nimport OKPO_IP from '../../../../domain/individual_entrepreneur/vo/OKPO';\nimport BankDetails from '../../../../domain/bank/BankDetails';\nimport AccountNumber from '../../../../domain/bank/AccountNumber';\nimport BIK from '../../../../domain/bank/BIK';\nimport SecurityService from '../../../security/SecurityService';\nimport withCompanyState from '../../../../domain/common/company/CompanyStateDecorator';\nimport Certificate from '../../../../domain/common/Certificate';\n\nvar MergeUserAndCompanyDataHandler = /*#__PURE__*/function (_HasAuthHandlerBase) {\n  _inherits(MergeUserAndCompanyDataHandler, _HasAuthHandlerBase);\n\n  var _super = _createSuper(MergeUserAndCompanyDataHandler);\n\n  function MergeUserAndCompanyDataHandler() {\n    _classCallCheck(this, MergeUserAndCompanyDataHandler);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MergeUserAndCompanyDataHandler, [{\n    key: \"hasAuth\",\n    value: function hasAuth(request) {\n      if (this.canHandle(request)) {\n        var req = AuthRequest.clone(request);\n        req.company = this.createCompany(request);\n\n        try {\n          req.certificate = this.createCertificate(request);\n        } catch (error) {// TODO: обработка ошибки\n          // сертификат может отсутствовать если пользователь авторизовался под логином и паролем\n        }\n\n        req.isAuthed = true;\n        return this.doNextHandler(req);\n      }\n\n      return this.doNextHandler(request);\n    }\n  }, {\n    key: \"canHandle\",\n    value: function canHandle(request) {\n      _get(_getPrototypeOf(MergeUserAndCompanyDataHandler.prototype), \"canHandle\", this).call(this, request);\n\n      if (request.isAuthed === false) return false;\n      return request.rawCompany && request.rawUser;\n    }\n  }, {\n    key: \"createCompany\",\n    value: function createCompany(request) {\n      var company;\n      var rawCompany = request.rawCompany,\n          rawUser = request.rawUser;\n      var isIP = rawCompany.type.name === 'IP';\n      var isUL = rawCompany.type.name === 'UL';\n      var diServerId = rawCompany.diServerId,\n          inn = rawCompany.inn,\n          name = rawCompany.name,\n          bik = rawCompany.bik,\n          accountNumber = rawCompany.accountNumber,\n          okpo = rawCompany.division.classificationNumber;\n\n      if (isIP) {\n        var ogrnip = rawCompany.ogrn;\n        var localId = rawUser.company.id;\n        company = withCompanyState(new IPCompany(localId, diServerId, inn, ogrnip, name));\n        company.mainDepartment = this.createInternalDepartment(rawUser.company);\n        company.okpo = new OKPO_IP(okpo);\n      }\n\n      if (isUL) {\n        var ogrn = rawCompany.ogrn;\n        var _localId = rawUser.company.id;\n        company = withCompanyState(new ULCompany(_localId, diServerId, inn, ogrn, name));\n        company.mainDepartment = this.createIndependentDepartment(rawUser.company);\n        company.okpo = new OKPO_UL(okpo);\n        company.independentDepartments.set(diServerId, company.mainDepartment);\n        var rawEmployee = Object.assign(Object.assign({}, rawUser.person), rawUser.employee);\n        var employee = new ULEmployee(rawEmployee);\n        company.addEmployee(employee, true);\n      }\n\n      rawUser.roles.forEach(function (role) {\n        SecurityService.addRole(role);\n      });\n      var isCanCreateBankDetails = BIK.isValid(bik) || AccountNumber.isValid(accountNumber);\n\n      if (isCanCreateBankDetails) {\n        company.bankDetails = new BankDetails(undefined, bik, accountNumber);\n      }\n\n      company.legalAddress = this.createAddress(rawCompany);\n      company.ifns = this.createIFNS(rawCompany);\n      company.state = this.createCompanyState(company, rawCompany);\n      return company;\n    }\n  }, {\n    key: \"createAddress\",\n    value: function createAddress(raw) {\n      var legalAddress = new NoLegalAddress();\n\n      if (raw.division && raw.division.address) {\n        var rawAddress = raw.division.address;\n        var postalCode = rawAddress.postalCode,\n            region = rawAddress.region,\n            city = rawAddress.city,\n            settlement = rawAddress.settlement,\n            district = rawAddress.district,\n            street = rawAddress.street,\n            house = rawAddress.house,\n            building = rawAddress.building,\n            room = rawAddress.room;\n        legalAddress = new LegalAddress({\n          postalCode: new PostIndex(postalCode),\n          region: new Region(region.code, region.title, region.id),\n          city: city ? new City(city) : null,\n          settlement: settlement ? new Settlement(settlement) : null,\n          district: district ? new District(district) : null,\n          street: street ? new Street(street) : null,\n          house: house ? new House(house) : null,\n          building: building ? new Building(building) : null,\n          room: room ? new Room(room) : null\n        });\n      }\n\n      return legalAddress;\n    }\n  }, {\n    key: \"createIFNS\",\n    value: function createIFNS(raw) {\n      var ifns = new NoIFNS();\n\n      if (raw.taxAuthority) {\n        var rawTaxAuthority = raw.taxAuthority;\n        ifns = new IFNS(rawTaxAuthority.id, rawTaxAuthority.code, rawTaxAuthority.title);\n      }\n\n      return ifns;\n    }\n  }, {\n    key: \"createIndependentDepartment\",\n    value: function createIndependentDepartment(raw) {\n      return new IndependentDepartment({\n        id: raw.division.id,\n        kpp: KPP.isValid(raw.division.kpp) ? new KPP(raw.division.kpp) : null,\n        title: raw.division.title\n      });\n    }\n  }, {\n    key: \"createInternalDepartment\",\n    value: function createInternalDepartment(raw) {\n      return new IPInternalDepartment({\n        id: raw.division.id,\n        title: raw.division.title\n      });\n    }\n  }, {\n    key: \"createCompanyState\",\n    value: function createCompanyState(company, raw) {\n      var stepSystemName = raw.step.systemName;\n\n      switch (stepSystemName) {\n        case 'complete':\n          return raw.infsoobBeenSent ? company.completeState : company.hasAddressAndDetailsState;\n\n        case 'waiting_for_data':\n          if (raw.taxAuthority && raw.taxAuthority.code && !(raw.division && raw.division.address)) {\n            return company.hasDetailsState;\n          }\n\n          if (!(raw.taxAuthority && raw.taxAuthority.code) && raw.division && raw.division.address) {\n            return company.hasAddressState;\n          }\n\n          return company.noAddressAndDetailsState;\n\n        case 'waiting_for_infsoob':\n          return company.hasAddressAndDetailsState;\n\n        default:\n          throw new Error(\"\\u041D\\u0435\\u0432\\u0435\\u0440\\u043D\\u044B\\u0439 stepSystemName \".concat(stepSystemName));\n      }\n    }\n  }, {\n    key: \"createCertificate\",\n    value: function createCertificate(request) {\n      var _request$rawUser$cert = request.rawUser.certificate,\n          active = _request$rawUser$cert.active,\n          thumbprint = _request$rawUser$cert.thumbprint,\n          valid_from = _request$rawUser$cert.valid_from,\n          valid_until = _request$rawUser$cert.valid_until;\n      return new Certificate(null, thumbprint, valid_from, valid_until, null, active);\n    }\n  }]);\n\n  return MergeUserAndCompanyDataHandler;\n}(HasAuthHandlerBase);\n\nexport default MergeUserAndCompanyDataHandler;","map":{"version":3,"sources":["../../../../../src/application/auth/handlers/hasAuth/MergeUserAndCompanyDataHandler.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import HasAuthHandlerBase from '../HasAuthHandlerBase';\r\nimport IPCompany from '../../../../domain/individual_entrepreneur/Company';\r\nimport ULCompany from '../../../../domain/legal_entity/Company';\r\nimport NoLegalAddress from '../../../../domain/common/NoLegalAddress';\r\nimport NoIFNS from '../../../../domain/ifns/NoIFNS';\r\nimport AuthRequest from '../../AuthRequest';\r\nimport LegalAddress from '../../../../domain/common/LegalAddress';\r\nimport PostIndex from '../../../../domain/common/address/PostIndex';\r\nimport Region from '../../../../domain/common/address/Region';\r\nimport City from '../../../../domain/common/address/City';\r\nimport Settlement from '../../../../domain/common/address/Settlement';\r\nimport District from '../../../../domain/common/address/District';\r\nimport Street from '../../../../domain/common/address/Street';\r\nimport Building from '../../../../domain/common/address/Building';\r\nimport House from '../../../../domain/common/address/House';\r\nimport Room from '../../../../domain/common/address/Room';\r\nimport IFNS from '../../../../domain/ifns/IFNS';\r\nimport IndependentDepartment from '../../../../domain/legal_entity/IndependentDepartment';\r\nimport IPInternalDepartment from '../../../../domain/individual_entrepreneur/InternalDepartment';\r\nimport KPP from '../../../../domain/legal_entity/vo/KPP';\r\nimport ULEmployee from '../../../../domain/legal_entity/Employee';\r\nimport OKPO_UL from '../../../../domain/legal_entity/vo/OKPO';\r\nimport OKPO_IP from '../../../../domain/individual_entrepreneur/vo/OKPO';\r\nimport BankDetails from '../../../../domain/bank/BankDetails';\r\nimport AccountNumber from '../../../../domain/bank/AccountNumber';\r\nimport BIK from '../../../../domain/bank/BIK';\r\nimport SecurityService from '../../../security/SecurityService';\r\nimport withCompanyState from '../../../../domain/common/company/CompanyStateDecorator';\r\nimport Certificate from '../../../../domain/common/Certificate';\r\nclass MergeUserAndCompanyDataHandler extends HasAuthHandlerBase {\r\n    hasAuth(request) {\r\n        if (this.canHandle(request)) {\r\n            const req = AuthRequest.clone(request);\r\n            req.company = this.createCompany(request);\r\n            try {\r\n                req.certificate = this.createCertificate(request);\r\n            }\r\n            catch (error) {\r\n                // TODO: обработка ошибки\r\n                // сертификат может отсутствовать если пользователь авторизовался под логином и паролем\r\n            }\r\n            req.isAuthed = true;\r\n            return this.doNextHandler(req);\r\n        }\r\n        return this.doNextHandler(request);\r\n    }\r\n    canHandle(request) {\r\n        super.canHandle(request);\r\n        if (request.isAuthed === false)\r\n            return false;\r\n        return request.rawCompany && request.rawUser;\r\n    }\r\n    createCompany(request) {\r\n        let company;\r\n        const { rawCompany, rawUser } = request;\r\n        const isIP = rawCompany.type.name === 'IP';\r\n        const isUL = rawCompany.type.name === 'UL';\r\n        const { diServerId, inn, name, bik, accountNumber, division: { classificationNumber: okpo } } = rawCompany;\r\n        if (isIP) {\r\n            const { ogrn: ogrnip } = rawCompany;\r\n            const { id: localId } = rawUser.company;\r\n            company = withCompanyState(new IPCompany(localId, diServerId, inn, ogrnip, name));\r\n            company.mainDepartment = this.createInternalDepartment(rawUser.company);\r\n            company.okpo = new OKPO_IP(okpo);\r\n        }\r\n        if (isUL) {\r\n            const { ogrn } = rawCompany;\r\n            const { id: localId } = rawUser.company;\r\n            company = withCompanyState(new ULCompany(localId, diServerId, inn, ogrn, name));\r\n            company.mainDepartment = this.createIndependentDepartment(rawUser.company);\r\n            company.okpo = new OKPO_UL(okpo);\r\n            company.independentDepartments.set(diServerId, company.mainDepartment);\r\n            const rawEmployee = Object.assign(Object.assign({}, rawUser.person), rawUser.employee);\r\n            const employee = new ULEmployee(rawEmployee);\r\n            company.addEmployee(employee, true);\r\n        }\r\n        rawUser.roles.forEach(role => {\r\n            SecurityService.addRole(role);\r\n        });\r\n        const isCanCreateBankDetails = BIK.isValid(bik) || AccountNumber.isValid(accountNumber);\r\n        if (isCanCreateBankDetails) {\r\n            company.bankDetails = new BankDetails(undefined, bik, accountNumber);\r\n        }\r\n        company.legalAddress = this.createAddress(rawCompany);\r\n        company.ifns = this.createIFNS(rawCompany);\r\n        company.state = this.createCompanyState(company, rawCompany);\r\n        return company;\r\n    }\r\n    createAddress(raw) {\r\n        let legalAddress = new NoLegalAddress();\r\n        if (raw.division && raw.division.address) {\r\n            const rawAddress = raw.division.address;\r\n            const { postalCode, region, city, settlement, district, street, house, building, room } = rawAddress;\r\n            legalAddress = new LegalAddress({\r\n                postalCode: new PostIndex(postalCode),\r\n                region: new Region(region.code, region.title, region.id),\r\n                city: city ? new City(city) : null,\r\n                settlement: settlement ? new Settlement(settlement) : null,\r\n                district: district ? new District(district) : null,\r\n                street: street ? new Street(street) : null,\r\n                house: house ? new House(house) : null,\r\n                building: building ? new Building(building) : null,\r\n                room: room ? new Room(room) : null\r\n            });\r\n        }\r\n        return legalAddress;\r\n    }\r\n    createIFNS(raw) {\r\n        let ifns = new NoIFNS();\r\n        if (raw.taxAuthority) {\r\n            const rawTaxAuthority = raw.taxAuthority;\r\n            ifns = new IFNS(rawTaxAuthority.id, rawTaxAuthority.code, rawTaxAuthority.title);\r\n        }\r\n        return ifns;\r\n    }\r\n    createIndependentDepartment(raw) {\r\n        return new IndependentDepartment({\r\n            id: raw.division.id,\r\n            kpp: KPP.isValid(raw.division.kpp) ? new KPP(raw.division.kpp) : null,\r\n            title: raw.division.title\r\n        });\r\n    }\r\n    createInternalDepartment(raw) {\r\n        return new IPInternalDepartment({\r\n            id: raw.division.id,\r\n            title: raw.division.title\r\n        });\r\n    }\r\n    createCompanyState(company, raw) {\r\n        const stepSystemName = raw.step.systemName;\r\n        switch (stepSystemName) {\r\n            case 'complete':\r\n                return raw.infsoobBeenSent ? company.completeState : company.hasAddressAndDetailsState;\r\n            case 'waiting_for_data':\r\n                if (raw.taxAuthority && raw.taxAuthority.code && !(raw.division && raw.division.address)) {\r\n                    return company.hasDetailsState;\r\n                }\r\n                if (!(raw.taxAuthority && raw.taxAuthority.code) && raw.division && raw.division.address) {\r\n                    return company.hasAddressState;\r\n                }\r\n                return company.noAddressAndDetailsState;\r\n            case 'waiting_for_infsoob':\r\n                return company.hasAddressAndDetailsState;\r\n            default:\r\n                throw new Error(`Неверный stepSystemName ${stepSystemName}`);\r\n        }\r\n    }\r\n    createCertificate(request) {\r\n        const { active, thumbprint, valid_from, valid_until } = request.rawUser.certificate;\r\n        return new Certificate(null, thumbprint, valid_from, valid_until, null, active);\r\n    }\r\n}\r\nexport default MergeUserAndCompanyDataHandler;\r\n//# sourceMappingURL=MergeUserAndCompanyDataHandler.js.map"]},"metadata":{},"sourceType":"module"}