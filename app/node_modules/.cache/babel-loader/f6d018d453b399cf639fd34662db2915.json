{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport GetCertificatesStrategy from './get/GetCertificatesStrategy';\nimport SignStrategy from './sign/SignStrategy';\nimport DiffCertificatesStrategy from './diff/DiffCertificatesStrategy';\nimport DomainCertificate from '../../domain/common/Certificate';\nimport CryptoProGetCertificatesStrategy from './get/CryptoProGetCertificatesStrategy';\nimport MockDiffCertificatesStrategy from './diff/MockDiffCertificatesStrategy';\nimport diffMock from '../../mocks/200/diffs_certs_only_last_inactive.json';\nimport CryptoProSignStrategy from './sign/CryptoProSignStrategy';\nimport AJAXDiffCertificatesStrategy from './diff/AJAXDiffCertificatesStrategy';\nimport { CERT } from '../error/Error';\nimport errorFactory from '../error/ErrorFactory';\n\nvar Service = /*#__PURE__*/function () {\n  function Service() {\n    var _this = this;\n\n    _classCallCheck(this, Service);\n\n    this._getCertificatesFromUserFilesystem = function () {\n      if (!_this._getCertificatesStrategy) {\n        return Promise.reject(new Error('Необходимо задать стратегию для получения сертификатов'));\n      }\n\n      return _this._getCertificatesStrategy.get();\n    };\n\n    this._getCertificatesThumbprints = function (doSomeJob) {\n      return function (certs) {\n        doSomeJob(certs);\n        return certs.map(function (cert) {\n          return cert.Thumbprint;\n        });\n      };\n    };\n\n    this._wrapCert = function (cert) {\n      return new DomainCertificate(cert.Subject, cert.Thumbprint, cert.ValidFromDate, cert.ValidToDate, cert.SerialNumber, cert.isActive);\n    };\n\n    this._wrapProviderCertsToDomainCerts = function (certs) {\n      return certs.filter(Boolean).map(_this._wrapCert);\n    };\n\n    this._storeCertsToMap = function (certsMap) {\n      return function (certs) {\n        certs.forEach(function (cert) {\n          return certsMap.set(cert.Thumbprint, cert);\n        });\n      };\n    };\n\n    this._getCertificatesDiff = function (thumbprints) {\n      if (!_this._diffCertificatesStrategy) {\n        throw new Error('Необходимо задать стратегию для получения активных/неактивных сертификатов');\n      }\n\n      return _this._diffCertificatesStrategy.diff(thumbprints);\n    };\n\n    this._handleCertificateDiff = function (certsMap) {\n      return function (isReturnActiveCerts) {\n        return function (_ref) {\n          var thumbprints = _ref.thumbprints;\n          return thumbprints.map(function (_ref2) {\n            var thumbprint = _ref2.thumbprint,\n                is_active = _ref2.is_active,\n                isHasThumbprintInServerRes = _ref2.isHasThumbprintInServerRes;\n\n            if (isHasThumbprintInServerRes === isReturnActiveCerts) {\n              var rawCert = certsMap.get(thumbprint);\n              rawCert.isActive = is_active && isHasThumbprintInServerRes || !isReturnActiveCerts;\n              return rawCert;\n            }\n\n            return undefined;\n          });\n        };\n      };\n    };\n  }\n\n  _createClass(Service, [{\n    key: \"getAllCertificates\",\n    value: function getAllCertificates() {\n      return this._getCertificatesFromUserFilesystem().then(this._wrapProviderCertsToDomainCerts);\n    }\n  }, {\n    key: \"getLoginCertificates\",\n    value: function getLoginCertificates() {\n      var certsMap = new Map();\n      return this._getCertificatesFromUserFilesystem().then(this._getCertificatesThumbprints(this._storeCertsToMap(certsMap))).then(this._getCertificatesDiff).then(this._handleCertificateDiff(certsMap)(true)).then(this._wrapProviderCertsToDomainCerts).catch(function (error) {\n        throw errorFactory(CERT, 'Ошибка с сертификатами. Метод getLoginCertificates', error);\n      });\n    }\n  }, {\n    key: \"getRegisterCertificates\",\n    value: function getRegisterCertificates() {\n      var certsMap = new Map();\n      return this._getCertificatesFromUserFilesystem().then(this._getCertificatesThumbprints(this._storeCertsToMap(certsMap))).then(this._getCertificatesDiff).then(this._handleCertificateDiff(certsMap)(false)).then(this._wrapProviderCertsToDomainCerts).catch(function (error) {\n        throw errorFactory(CERT, 'Ошибка с сертификатами. Метод getRegisterCertificates', error);\n      });\n    }\n  }, {\n    key: \"sign\",\n    value: function sign(info, thumbprint) {\n      return this._signStrategy.sign(info, thumbprint);\n    }\n  }, {\n    key: \"getCertificatesStrategy\",\n    set: function set(strategy) {\n      if (!(strategy instanceof GetCertificatesStrategy)) {\n        throw new Error('Параметр должен быть подклассом GetCertificatesStrategy');\n      }\n\n      this._getCertificatesStrategy = strategy;\n    },\n    get: function get() {\n      if (!this._getCertificatesStrategy) {\n        throw new Error('Необходимо задать стратегию для получения сертификатов');\n      }\n\n      return this._getCertificatesStrategy;\n    }\n  }, {\n    key: \"signStrategy\",\n    set: function set(strategy) {\n      if (!(strategy instanceof SignStrategy)) {\n        throw new Error('Параметр должен быть подклассом SignStrategy');\n      }\n\n      this._signStrategy = strategy;\n    },\n    get: function get() {\n      if (!this._signStrategy) {\n        throw new Error('Необходимо задать стратегию для подписания');\n      }\n\n      return this._signStrategy;\n    }\n  }, {\n    key: \"diffCertificatesStrategy\",\n    set: function set(strategy) {\n      if (!(strategy instanceof DiffCertificatesStrategy)) {\n        throw new Error('Параметр должен быть подклассом DiffCertificatesStrategy');\n      }\n\n      this._diffCertificatesStrategy = strategy;\n    },\n    get: function get() {\n      if (!this._diffCertificatesStrategy) {\n        throw new Error('Необходимо задать стратегию для получения активных/неактивных сертификатов');\n      }\n\n      return this._diffCertificatesStrategy;\n    }\n  }]);\n\n  return Service;\n}();\n\nexport var CertificateService = new Service();\nCertificateService.getCertificatesStrategy = new CryptoProGetCertificatesStrategy();\nCertificateService.diffCertificatesStrategy = new AJAXDiffCertificatesStrategy();\nCertificateService.signStrategy = new CryptoProSignStrategy();\nexport var MockCertificateService = new Service();\nMockCertificateService.getCertificatesStrategy = new CryptoProGetCertificatesStrategy();\nMockCertificateService.diffCertificatesStrategy = new MockDiffCertificatesStrategy(diffMock);\nMockCertificateService.signStrategy = new CryptoProSignStrategy();","map":{"version":3,"sources":["../../../src/application/certificate/CertificateService.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import GetCertificatesStrategy from './get/GetCertificatesStrategy';\r\nimport SignStrategy from './sign/SignStrategy';\r\nimport DiffCertificatesStrategy from './diff/DiffCertificatesStrategy';\r\nimport DomainCertificate from '../../domain/common/Certificate';\r\nimport CryptoProGetCertificatesStrategy from './get/CryptoProGetCertificatesStrategy';\r\nimport MockDiffCertificatesStrategy from './diff/MockDiffCertificatesStrategy';\r\nimport diffMock from '../../mocks/200/diffs_certs_only_last_inactive.json';\r\nimport CryptoProSignStrategy from './sign/CryptoProSignStrategy';\r\nimport AJAXDiffCertificatesStrategy from './diff/AJAXDiffCertificatesStrategy';\r\nimport { CERT } from '../error/Error';\r\nimport errorFactory from '../error/ErrorFactory';\r\nclass Service {\r\n    constructor() {\r\n        this._getCertificatesFromUserFilesystem = () => {\r\n            if (!this._getCertificatesStrategy) {\r\n                return Promise.reject(new Error('Необходимо задать стратегию для получения сертификатов'));\r\n            }\r\n            return this._getCertificatesStrategy.get();\r\n        };\r\n        this._getCertificatesThumbprints = doSomeJob => (certs) => {\r\n            doSomeJob(certs);\r\n            return certs.map(cert => cert.Thumbprint);\r\n        };\r\n        this._wrapCert = cert => new DomainCertificate(cert.Subject, cert.Thumbprint, cert.ValidFromDate, cert.ValidToDate, cert.SerialNumber, cert.isActive);\r\n        this._wrapProviderCertsToDomainCerts = certs => certs.filter(Boolean).map(this._wrapCert);\r\n        this._storeCertsToMap = certsMap => (certs) => {\r\n            certs.forEach(cert => certsMap.set(cert.Thumbprint, cert));\r\n        };\r\n        this._getCertificatesDiff = (thumbprints) => {\r\n            if (!this._diffCertificatesStrategy) {\r\n                throw new Error('Необходимо задать стратегию для получения активных/неактивных сертификатов');\r\n            }\r\n            return this._diffCertificatesStrategy.diff(thumbprints);\r\n        };\r\n        this._handleCertificateDiff = certsMap => isReturnActiveCerts => ({ thumbprints }) => thumbprints.map(({ thumbprint, is_active, isHasThumbprintInServerRes }) => {\r\n            if (isHasThumbprintInServerRes === isReturnActiveCerts) {\r\n                const rawCert = certsMap.get(thumbprint);\r\n                rawCert.isActive = (is_active && isHasThumbprintInServerRes) || !isReturnActiveCerts;\r\n                return rawCert;\r\n            }\r\n            return undefined;\r\n        });\r\n    }\r\n    set getCertificatesStrategy(strategy) {\r\n        if (!(strategy instanceof GetCertificatesStrategy)) {\r\n            throw new Error('Параметр должен быть подклассом GetCertificatesStrategy');\r\n        }\r\n        this._getCertificatesStrategy = strategy;\r\n    }\r\n    get getCertificatesStrategy() {\r\n        if (!this._getCertificatesStrategy) {\r\n            throw new Error('Необходимо задать стратегию для получения сертификатов');\r\n        }\r\n        return this._getCertificatesStrategy;\r\n    }\r\n    set signStrategy(strategy) {\r\n        if (!(strategy instanceof SignStrategy)) {\r\n            throw new Error('Параметр должен быть подклассом SignStrategy');\r\n        }\r\n        this._signStrategy = strategy;\r\n    }\r\n    get signStrategy() {\r\n        if (!this._signStrategy) {\r\n            throw new Error('Необходимо задать стратегию для подписания');\r\n        }\r\n        return this._signStrategy;\r\n    }\r\n    set diffCertificatesStrategy(strategy) {\r\n        if (!(strategy instanceof DiffCertificatesStrategy)) {\r\n            throw new Error('Параметр должен быть подклассом DiffCertificatesStrategy');\r\n        }\r\n        this._diffCertificatesStrategy = strategy;\r\n    }\r\n    get diffCertificatesStrategy() {\r\n        if (!this._diffCertificatesStrategy) {\r\n            throw new Error('Необходимо задать стратегию для получения активных/неактивных сертификатов');\r\n        }\r\n        return this._diffCertificatesStrategy;\r\n    }\r\n    getAllCertificates() {\r\n        return this._getCertificatesFromUserFilesystem()\r\n            .then(this._wrapProviderCertsToDomainCerts);\r\n    }\r\n    getLoginCertificates() {\r\n        const certsMap = new Map();\r\n        return this._getCertificatesFromUserFilesystem()\r\n            .then(this._getCertificatesThumbprints(this._storeCertsToMap(certsMap)))\r\n            .then(this._getCertificatesDiff)\r\n            .then(this._handleCertificateDiff(certsMap)(true))\r\n            .then(this._wrapProviderCertsToDomainCerts)\r\n            .catch((error) => {\r\n            throw errorFactory(CERT, 'Ошибка с сертификатами. Метод getLoginCertificates', error);\r\n        });\r\n    }\r\n    getRegisterCertificates() {\r\n        const certsMap = new Map();\r\n        return this._getCertificatesFromUserFilesystem()\r\n            .then(this._getCertificatesThumbprints(this._storeCertsToMap(certsMap)))\r\n            .then(this._getCertificatesDiff)\r\n            .then(this._handleCertificateDiff(certsMap)(false))\r\n            .then(this._wrapProviderCertsToDomainCerts)\r\n            .catch((error) => {\r\n            throw errorFactory(CERT, 'Ошибка с сертификатами. Метод getRegisterCertificates', error);\r\n        });\r\n    }\r\n    sign(info, thumbprint) {\r\n        return this._signStrategy.sign(info, thumbprint);\r\n    }\r\n}\r\nexport const CertificateService = new Service();\r\nCertificateService.getCertificatesStrategy = new CryptoProGetCertificatesStrategy();\r\nCertificateService.diffCertificatesStrategy = new AJAXDiffCertificatesStrategy();\r\nCertificateService.signStrategy = new CryptoProSignStrategy();\r\nexport const MockCertificateService = new Service();\r\nMockCertificateService.getCertificatesStrategy = new CryptoProGetCertificatesStrategy();\r\nMockCertificateService.diffCertificatesStrategy = new MockDiffCertificatesStrategy(diffMock);\r\nMockCertificateService.signStrategy = new CryptoProSignStrategy();\r\n//# sourceMappingURL=CertificateService.js.map"]},"metadata":{},"sourceType":"module"}