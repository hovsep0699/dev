{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/*\r\n  ИНН(Идентификационный Номер Налогоплательщика) состоит из 12 цифр\r\n\r\n  ИНН ИП присваивается при регистрации физического лица в качестве индивидуального предпринимателя.\r\n  Так как ИНН присваивается физическому лицу один раз, то ИНН физического лица совпадает с ИНН индивидуального предпринимателя.\r\n\r\n  с 1-го по 2-й знак - код субъекта Российской Федерации\r\n\r\n  со 2-го по 4-й знак - номер местной налоговой инспекции\r\n\r\n  с 5-го по 10-й знак - номер налоговой записи налогоплательщика в территориальном разделе\r\n  ОГРН (Основной государственный регистрационный номер)\r\n\r\n  11 - 12-й знак - контрольные цифры\r\n*/\nvar INN = /*#__PURE__*/function () {\n  _createClass(INN, null, [{\n    key: \"validate\",\n    value: function validate(inn) {\n      var KOEFS1 = [7, 2, 4, 10, 3, 5, 9, 4, 6, 8];\n      var KOEFS2 = [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8];\n      var acc1 = KOEFS1.reduce(function (acc, koef, index) {\n        return acc + koef * inn[index];\n      }, 0);\n      var acc2 = KOEFS2.reduce(function (acc, koef, index) {\n        return acc + koef * inn[index];\n      }, 0);\n      var controlResult_1 = parseInt(acc1 % 11 % 10, 10);\n      var controlResult_2 = parseInt(acc2 % 11 % 10, 10);\n\n      if (controlResult_1 !== parseInt(inn[10], 10) || controlResult_2 !== parseInt(inn[11], 10)) {\n        return 'Неправильное контрольное число';\n      }\n\n      return INN.REG_EXP.test(inn) ? undefined : 'Введите номер длиной 12 знаков';\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid(inn) {\n      return !INN.validate(inn);\n    }\n  }, {\n    key: \"mask\",\n    value: function mask(value) {\n      return value && value.replace(/\\D/g, '').slice(0, 12);\n    }\n  }, {\n    key: \"REG_EXP\",\n    get: function get() {\n      return new RegExp('^[0-9]{2}[0-9]{2}[0-9]{6}[0-9]{2}$');\n    }\n  }, {\n    key: \"placeholder\",\n    get: function get() {\n      return 'Введите ИНН';\n    }\n  }, {\n    key: \"hint\",\n    get: function get() {\n      return 'Введите 12-значный код';\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'ИНН';\n    }\n  }, {\n    key: \"field\",\n    get: function get() {\n      return 'inn';\n    }\n  }]);\n\n  function INN(inn) {\n    _classCallCheck(this, INN);\n\n    if (!INN.isValid(\"\".concat(inn))) {\n      this._error = new Error('Невозможно создать ИНН. Формат не верен.');\n    } else {\n      this._error = null;\n    }\n\n    this._value = \"\".concat(inn);\n  }\n\n  _createClass(INN, [{\n    key: \"clone\",\n    value: function clone() {\n      return new INN(this.value);\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n  }, {\n    key: \"error\",\n    get: function get() {\n      return this._error;\n    }\n  }]);\n\n  return INN;\n}();\n\nexport default INN;","map":{"version":3,"sources":["../../../../src/domain/individual_entrepreneur/vo/INN.js"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;IAeM,G;;;6BAKY,G,EAAG;AACjB,UAAM,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,CAAf;AACA,UAAM,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,EAAb,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC,CAAf;AACA,UAAM,IAAI,GAAG,MAAM,CAAC,MAAP,CAAc,UAAC,GAAD,EAAM,IAAN,EAAY,KAAZ;AAAA,eAAsB,GAAG,GAAG,IAAI,GAAG,GAAG,CAAC,KAAD,CAAtC;AAAA,OAAd,EAA6D,CAA7D,CAAb;AACA,UAAM,IAAI,GAAG,MAAM,CAAC,MAAP,CAAc,UAAC,GAAD,EAAM,IAAN,EAAY,KAAZ;AAAA,eAAsB,GAAG,GAAG,IAAI,GAAG,GAAG,CAAC,KAAD,CAAtC;AAAA,OAAd,EAA6D,CAA7D,CAAb;AACA,UAAM,eAAe,GAAG,QAAQ,CAAC,IAAI,GAAG,EAAP,GAAY,EAAb,EAAiB,EAAjB,CAAhC;AACA,UAAM,eAAe,GAAG,QAAQ,CAAC,IAAI,GAAG,EAAP,GAAY,EAAb,EAAiB,EAAjB,CAAhC;;AAEA,UAAK,eAAe,KAAK,QAAQ,CAAC,GAAG,CAAC,EAAD,CAAJ,EAAU,EAAV,CAA7B,IAAgD,eAAe,KAAK,QAAQ,CAAC,GAAG,CAAC,EAAD,CAAJ,EAAU,EAAV,CAAhF,EAAgG;AAC9F,eAAO,gCAAP;AACD;;AACD,aAAO,GAAG,CAAC,OAAJ,CAAY,IAAZ,CAAiB,GAAjB,IAAwB,SAAxB,GAAoC,gCAA3C;AACD;;;4BAEc,G,EAAG;AAChB,aAAO,CAAC,GAAG,CAAC,QAAJ,CAAa,GAAb,CAAR;AACD;;;yBAEW,K,EAAK;AACf,aAAO,KAAK,IAAI,KAAK,CAAC,OAAN,CAAc,KAAd,EAAqB,EAArB,EAAyB,KAAzB,CAA+B,CAA/B,EAAkC,EAAlC,CAAhB;AACD;;;wBAxBiB;AAChB,aAAO,IAAI,MAAJ,CAAW,oCAAX,CAAP;AACD;;;wBAwBqB;AACpB,aAAO,aAAP;AACD;;;wBAEc;AACb,aAAO,wBAAP;AACD;;;wBAEc;AACb,aAAO,KAAP;AACD;;;wBAEe;AACd,aAAO,KAAP;AACD;;;AAED,eAAY,GAAZ,EAAe;AAAA;;AACb,QAAI,CAAC,GAAG,CAAC,OAAJ,WAAe,GAAf,EAAL,EAA4B;AAC1B,WAAK,MAAL,GAAc,IAAI,KAAJ,CAAU,0CAAV,CAAd;AACD,KAFD,MAEO;AACL,WAAK,MAAL,GAAc,IAAd;AACD;;AACD,SAAK,MAAL,aAAiB,GAAjB;AACD;;;;4BAEI;AACH,aAAO,IAAI,GAAJ,CAAQ,KAAK,KAAb,CAAP;AACD;;;wBAEQ;AACP,aAAO,KAAK,MAAZ;AACD;;;wBAEQ;AACP,aAAO,KAAK,MAAZ;AACD;;;;;;AAGH,eAAe,GAAf","sourceRoot":"","sourcesContent":["/*\r\n  ИНН(Идентификационный Номер Налогоплательщика) состоит из 12 цифр\r\n\r\n  ИНН ИП присваивается при регистрации физического лица в качестве индивидуального предпринимателя.\r\n  Так как ИНН присваивается физическому лицу один раз, то ИНН физического лица совпадает с ИНН индивидуального предпринимателя.\r\n\r\n  с 1-го по 2-й знак - код субъекта Российской Федерации\r\n\r\n  со 2-го по 4-й знак - номер местной налоговой инспекции\r\n\r\n  с 5-го по 10-й знак - номер налоговой записи налогоплательщика в территориальном разделе\r\n  ОГРН (Основной государственный регистрационный номер)\r\n\r\n  11 - 12-й знак - контрольные цифры\r\n*/\r\nclass INN {\r\n    static get REG_EXP() {\r\n        return new RegExp('^[0-9]{2}[0-9]{2}[0-9]{6}[0-9]{2}$');\r\n    }\r\n    static validate(inn) {\r\n        const KOEFS1 = [7, 2, 4, 10, 3, 5, 9, 4, 6, 8];\r\n        const KOEFS2 = [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8];\r\n        const acc1 = KOEFS1.reduce((acc, koef, index) => acc + koef * inn[index], 0);\r\n        const acc2 = KOEFS2.reduce((acc, koef, index) => acc + koef * inn[index], 0);\r\n        const controlResult_1 = parseInt(acc1 % 11 % 10, 10);\r\n        const controlResult_2 = parseInt(acc2 % 11 % 10, 10);\r\n        if ((controlResult_1 !== parseInt(inn[10], 10)) || (controlResult_2 !== parseInt(inn[11], 10))) {\r\n            return 'Неправильное контрольное число';\r\n        }\r\n        return INN.REG_EXP.test(inn) ? undefined : 'Введите номер длиной 12 знаков';\r\n    }\r\n    static isValid(inn) {\r\n        return !INN.validate(inn);\r\n    }\r\n    static mask(value) {\r\n        return value && value.replace(/\\D/g, '').slice(0, 12);\r\n    }\r\n    static get placeholder() {\r\n        return 'Введите ИНН';\r\n    }\r\n    static get hint() {\r\n        return 'Введите 12-значный код';\r\n    }\r\n    static get name() {\r\n        return 'ИНН';\r\n    }\r\n    static get field() {\r\n        return 'inn';\r\n    }\r\n    constructor(inn) {\r\n        if (!INN.isValid(`${inn}`)) {\r\n            this._error = new Error('Невозможно создать ИНН. Формат не верен.');\r\n        }\r\n        else {\r\n            this._error = null;\r\n        }\r\n        this._value = `${inn}`;\r\n    }\r\n    clone() {\r\n        return new INN(this.value);\r\n    }\r\n    get value() {\r\n        return this._value;\r\n    }\r\n    get error() {\r\n        return this._error;\r\n    }\r\n}\r\nexport default INN;\r\n//# sourceMappingURL=INN.js.map"]},"metadata":{},"sourceType":"module"}