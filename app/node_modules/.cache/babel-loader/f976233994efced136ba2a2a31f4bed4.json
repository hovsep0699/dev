{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _get from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport HasAuthHandlerBase from '../HasAuthHandlerBase';\nimport AuthRequest from '../../AuthRequest';\nimport SecurityService from '../../../security/SecurityService';\nimport Certificate from '../../../../domain/common/Certificate';\n\nvar MergeUserDataHandler = /*#__PURE__*/function (_HasAuthHandlerBase) {\n  _inherits(MergeUserDataHandler, _HasAuthHandlerBase);\n\n  var _super = _createSuper(MergeUserDataHandler);\n\n  function MergeUserDataHandler() {\n    _classCallCheck(this, MergeUserDataHandler);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MergeUserDataHandler, [{\n    key: \"hasAuth\",\n    value: function hasAuth(request) {\n      if (this.canHandle(request)) {\n        var req = AuthRequest.clone(request);\n        req.user = this.createUser(request);\n\n        if (request.certificate) {\n          req.certificate = this.createCertificate(request);\n        } else {\n          req.certificate = null;\n        }\n\n        req.isAuthed = true;\n        return this.doNextHandler(req);\n      }\n\n      return this.doNextHandler(request);\n    }\n  }, {\n    key: \"canHandle\",\n    value: function canHandle(request) {\n      _get(_getPrototypeOf(MergeUserDataHandler.prototype), \"canHandle\", this).call(this, request);\n\n      var isAuthed = request.isAuthed,\n          rawUser = request.rawUser;\n\n      if (!isAuthed || !rawUser) {\n        return false;\n      }\n\n      return !!rawUser;\n    }\n  }, {\n    key: \"createUser\",\n    value: function createUser(request) {\n      var user;\n      var rawUser = request.rawUser;\n      rawUser.roles.forEach(function (role) {\n        SecurityService.addRole(role);\n      });\n      user = rawUser;\n      return user;\n    }\n  }, {\n    key: \"createCertificate\",\n    value: function createCertificate(request) {\n      var _request$rawUser$cert = request.rawUser.certificate,\n          active = _request$rawUser$cert.active,\n          thumbprint = _request$rawUser$cert.thumbprint,\n          valid_from = _request$rawUser$cert.valid_from,\n          valid_until = _request$rawUser$cert.valid_until;\n      return new Certificate(null, thumbprint, valid_from, valid_until, null, active);\n    }\n  }]);\n\n  return MergeUserDataHandler;\n}(HasAuthHandlerBase);\n\nexport default MergeUserDataHandler;","map":{"version":3,"sources":["../../../../../src/application/auth/handlers/hasAuth/MergeUserDataHandler.js"],"names":[],"mappings":";;;;;;AAAA,OAAO,kBAAP,MAA+B,uBAA/B;AACA,OAAO,WAAP,MAAwB,mBAAxB;AAEA,OAAO,eAAP,MAA4B,mCAA5B;AACA,OAAO,WAAP,MAAwB,uCAAxB;;IAEM,oB;;;;;;;;;;;;;4BACI,O,EAAO;AACb,UAAI,KAAK,SAAL,CAAe,OAAf,CAAJ,EAA6B;AAC3B,YAAM,GAAG,GAAG,WAAW,CAAC,KAAZ,CAAkB,OAAlB,CAAZ;AAEA,QAAA,GAAG,CAAC,IAAJ,GAAW,KAAK,UAAL,CAAgB,OAAhB,CAAX;;AACA,YAAI,OAAO,CAAC,WAAZ,EAAyB;AACvB,UAAA,GAAG,CAAC,WAAJ,GAAkB,KAAK,iBAAL,CAAuB,OAAvB,CAAlB;AACD,SAFD,MAEO;AACL,UAAA,GAAG,CAAC,WAAJ,GAAkB,IAAlB;AACD;;AACD,QAAA,GAAG,CAAC,QAAJ,GAAe,IAAf;AAEA,eAAO,KAAK,aAAL,CAAmB,GAAnB,CAAP;AACD;;AAED,aAAO,KAAK,aAAL,CAAmB,OAAnB,CAAP;AACD;;;8BAES,O,EAAO;AACf,0FAAgB,OAAhB;;AADe,UAEP,QAFO,GAEe,OAFf,CAEP,QAFO;AAAA,UAEG,OAFH,GAEe,OAFf,CAEG,OAFH;;AAIf,UAAI,CAAC,QAAD,IAAa,CAAC,OAAlB,EAA2B;AACzB,eAAO,KAAP;AACD;;AAED,aAAO,CAAC,CAAC,OAAT;AACD;;;+BAEU,O,EAAO;AAChB,UAAI,IAAJ;AADgB,UAER,OAFQ,GAEI,OAFJ,CAER,OAFQ;AAIhB,MAAA,OAAO,CAAC,KAAR,CAAc,OAAd,CAAsB,UAAA,IAAI,EAAG;AAC3B,QAAA,eAAe,CAAC,OAAhB,CAAwB,IAAxB;AACD,OAFD;AAIA,MAAA,IAAI,GAAG,OAAP;AAEA,aAAO,IAAP;AACD;;;sCAEiB,O,EAAO;AAAA,kCACiC,OAAO,CAAC,OAAR,CAAgB,WADjD;AAAA,UACf,MADe,yBACf,MADe;AAAA,UACP,UADO,yBACP,UADO;AAAA,UACK,UADL,yBACK,UADL;AAAA,UACiB,WADjB,yBACiB,WADjB;AAEvB,aAAO,IAAI,WAAJ,CAAgB,IAAhB,EAAsB,UAAtB,EAAkC,UAAlC,EAA8C,WAA9C,EAA2D,IAA3D,EAAiE,MAAjE,CAAP;AACD;;;;EA9CgC,kB;;AAiDnC,eAAe,oBAAf","sourceRoot":"","sourcesContent":["import HasAuthHandlerBase from '../HasAuthHandlerBase';\r\nimport AuthRequest from '../../AuthRequest';\r\nimport SecurityService from '../../../security/SecurityService';\r\nimport Certificate from '../../../../domain/common/Certificate';\r\nclass MergeUserDataHandler extends HasAuthHandlerBase {\r\n    hasAuth(request) {\r\n        if (this.canHandle(request)) {\r\n            const req = AuthRequest.clone(request);\r\n            req.user = this.createUser(request);\r\n            if (request.certificate) {\r\n                req.certificate = this.createCertificate(request);\r\n            }\r\n            else {\r\n                req.certificate = null;\r\n            }\r\n            req.isAuthed = true;\r\n            return this.doNextHandler(req);\r\n        }\r\n        return this.doNextHandler(request);\r\n    }\r\n    canHandle(request) {\r\n        super.canHandle(request);\r\n        const { isAuthed, rawUser } = request;\r\n        if (!isAuthed || !rawUser) {\r\n            return false;\r\n        }\r\n        return !!rawUser;\r\n    }\r\n    createUser(request) {\r\n        let user;\r\n        const { rawUser } = request;\r\n        rawUser.roles.forEach(role => {\r\n            SecurityService.addRole(role);\r\n        });\r\n        user = rawUser;\r\n        return user;\r\n    }\r\n    createCertificate(request) {\r\n        const { active, thumbprint, valid_from, valid_until } = request.rawUser.certificate;\r\n        return new Certificate(null, thumbprint, valid_from, valid_until, null, active);\r\n    }\r\n}\r\nexport default MergeUserDataHandler;\r\n//# sourceMappingURL=MergeUserDataHandler.js.map"]},"metadata":{},"sourceType":"module"}