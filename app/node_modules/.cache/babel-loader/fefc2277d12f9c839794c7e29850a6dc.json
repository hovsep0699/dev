{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\Hovsep\\\\Desktop\\\\local\\\\diflow_react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(ducumentAttachFolder),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(sagaAttachFolder);import{takeLatest,put,select}from'redux-saga/effects';import{Flash}from'../../../../common/flash/Flash';import{actionDocumentAttachFolder,actionDocumentUpdate}from'../actions';import{selectList}from'../selects';export function ducumentAttachFolder(){return _regeneratorRuntime.wrap(function ducumentAttachFolder$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return takeLatest(actionDocumentAttachFolder,sagaAttachFolder);case 2:case\"end\":return _context.stop();}}},_marked);}function sagaAttachFolder(_ref){var _ref$payload,packageIds,folder,documents,list,message;return _regeneratorRuntime.wrap(function sagaAttachFolder$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_ref$payload=_ref.payload,packageIds=_ref$payload.packageIds,folder=_ref$payload.folder;if(folder){_context2.next=3;break;}return _context2.abrupt(\"return\");case 3:_context2.next=5;return select(selectList);case 5:documents=_context2.sent;_context2.prev=6;list=[];documents.forEach(function(doc){var isChange=packageIds.includes(doc.packageId);if(isChange){var folderId=folder.id;var isFolder=doc.labels.find(function(item){return item.id===folderId;});if(!isFolder){doc.labels.push(folder);}}list.push(doc);});_context2.next=11;return put(actionDocumentUpdate({list:list}));case 11:_context2.next=18;break;case 13:_context2.prev=13;_context2.t0=_context2[\"catch\"](6);message=_context2.t0.message;_context2.next=18;return Flash.error(message||'Возникла ошибка');case 18:case\"end\":return _context2.stop();}}},_marked2,null,[[6,13]]);}","map":{"version":3,"sources":["C:/Users/Hovsep/Desktop/local/diflow_react/packages/app/src/pages/documents/store/sagas/attach.effect.ts"],"names":["ducumentAttachFolder","sagaAttachFolder","takeLatest","put","select","Flash","actionDocumentAttachFolder","actionDocumentUpdate","selectList","payload","packageIds","folder","documents","list","forEach","doc","isChange","includes","packageId","folderId","id","isFolder","labels","find","item","push","message","error"],"mappings":"oNAOiBA,oB,iDAIPC,gB,EAXV,OAASC,UAAT,CAAqBC,GAArB,CAA0BC,MAA1B,KAAwC,oBAAxC,CAEA,OAASC,KAAT,KAAsB,gCAAtB,CAEA,OAASC,0BAAT,CAAqCC,oBAArC,KAAiE,YAAjE,CACA,OAASC,UAAT,KAA2B,YAA3B,CAEA,MAAO,SAAUR,CAAAA,oBAAV,gJACL,MAAME,CAAAA,UAAU,CAACI,0BAAD,CAA6BL,gBAA7B,CAAhB,CADK,sDAIP,QAAUA,CAAAA,gBAAV,+MAA6BQ,OAA7B,CAAwCC,UAAxC,cAAwCA,UAAxC,CAAoDC,MAApD,cAAoDA,MAApD,IACOA,MADP,oFAGoC,MAAMP,CAAAA,MAAM,CAACI,UAAD,CAAZ,CAHpC,OAGQI,SAHR,iCAKUC,IALV,CAKiC,EALjC,CAMID,SAAS,CAACE,OAAV,CAAkB,SAAAC,GAAG,CAAI,CACvB,GAAIC,CAAAA,QAAQ,CAAGN,UAAU,CAACO,QAAX,CAAoBF,GAAG,CAACG,SAAxB,CAAf,CACA,GAAIF,QAAJ,CAAc,CACZ,GAAMG,CAAAA,QAAQ,CAAGR,MAAM,CAACS,EAAxB,CACA,GAAMC,CAAAA,QAAQ,CAAGN,GAAG,CAACO,MAAJ,CAAWC,IAAX,CAAgB,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACJ,EAAL,GAAYD,QAAhB,EAApB,CAAjB,CAEA,GAAI,CAACE,QAAL,CAAe,CACbN,GAAG,CAACO,MAAJ,CAAWG,IAAX,CAAgBd,MAAhB,EACD,CACF,CAEDE,IAAI,CAACY,IAAL,CAAUV,GAAV,EACD,CAZD,EANJ,kBAoBI,MAAMZ,CAAAA,GAAG,CAACI,oBAAoB,CAAC,CAAEM,IAAI,CAAJA,IAAF,CAAD,CAArB,CAAT,CApBJ,6FAqBaa,OArBb,cAqBaA,OArBb,mBAsBI,MAAMrB,CAAAA,KAAK,CAACsB,KAAN,CAAYD,OAAO,EAAI,iBAAvB,CAAN,CAtBJ","sourcesContent":["import { takeLatest, put, select } from 'redux-saga/effects';\r\n\r\nimport { Flash } from '../../../../common/flash/Flash';\r\nimport { DocumentAttachPayload, DocumentType } from '../../helpers/documents.typings';\r\nimport { actionDocumentAttachFolder, actionDocumentUpdate } from '../actions';\r\nimport { selectList } from '../selects';\r\n\r\nexport function* ducumentAttachFolder() {\r\n  yield takeLatest(actionDocumentAttachFolder, sagaAttachFolder);\r\n}\r\n\r\nfunction* sagaAttachFolder({ payload: { packageIds, folder } }: DocumentAttachPayload) {\r\n  if (!folder) return;\r\n\r\n  const documents: DocumentType[] = yield select(selectList);\r\n  try {\r\n    const list: DocumentType[] = [];\r\n    documents.forEach(doc => {\r\n      let isChange = packageIds.includes(doc.packageId);\r\n      if (isChange) {\r\n        const folderId = folder.id;\r\n        const isFolder = doc.labels.find(item => item.id === folderId);\r\n\r\n        if (!isFolder) {\r\n          doc.labels.push(folder);\r\n        }\r\n      }\r\n\r\n      list.push(doc);\r\n    });\r\n\r\n    yield put(actionDocumentUpdate({ list }));\r\n  } catch ({ message }) {\r\n    yield Flash.error(message || 'Возникла ошибка');\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}