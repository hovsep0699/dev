/*
  БИК(Банковский идентификационный код) состоит из 9 цифр

  Первые две цифры обозначают код Российской Федерации («04»);

  Третья и четвертая — код региона РФ. Если эти цифры равны «00», значит, подразделение банка находится за пределами России;

  Пятая и шестая — условный номер подразделения расчетной сети ЦБ РФ, или условный номер структурного подразделения Банка России.
  Код может принимать цифровые значения от «00» до «99»;

  С седьмой по девятую — условный номер кредитной организации в подразделении расчетной сети Центробанка, в котором открыт ее корреспондентский счет.
  Может принимать значения от «050» до «999».

  Для расчетно-кассовых центров в составе Банка России данные значения принимают вид «000».
  Для головного расчетно-кассового центра и иных подразделений, выполняющих его функции, – «001».
  Для других подразделений расчетной сети ЦБ РФ и структурных подразделений Банка России данные значения соответствуют «002».
*/
// TODO очень плохо. В domain просочились вышестоящие уровни архитектуры
import Environment from '../../application/Environment';

class BIK {
  static get REG_EXP() {
    return new RegExp('^[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{3}$');
  }

  static validate(value) {
    if (value && !BIK.REG_EXP.test(value)) return 'Введите число длиной 9 знаков';

    const regExp04Begin = new RegExp('^04');
    if (value && !regExp04Begin.test(value)) return 'Первые две цифры в БИК должны быть «04»(код РФ)';

    return undefined;
  }

  static isValid(value) {
    return !BIK.validate(value);
  }

  static get hint() {
    return 'Начните вводить «Банковский идентификационный код» и выберите его из выпадающего списка';
  }

  static get placeholder() {
    return 'Введите БИК';
  }

  static get name() {
    return 'БИК';
  }

  static get field() {
    return 'bank';
  }

  static mask(value) {
    return value && value.replace(/\D/g, '').slice(0, 9);
  }

  constructor(bik) {
    if (BIK.isValid(`${bik}`)) {
      this._value = `${bik}`;
    } else {
      this._value = bik;
    }
  }

  clone() {
    return new BIK(this.value);
  }

  get value() {
    return this._value;
  }
}

export default BIK;
